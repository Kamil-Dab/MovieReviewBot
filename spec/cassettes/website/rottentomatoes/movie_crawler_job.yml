---
http_interactions:
- request:
    method: get
    uri: https://www.rottentomatoes.com/m/the_wild_robot
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Content-Type:
      - application/json
      User-Agent:
      - Faraday v2.12.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Etag:
      - W/"3f803-57XzraORZ63DHDfarIwo6C9F/K4"
      X-Content-Type-Options:
      - nosniff
      X-Response-Time:
      - 134.941ms
      Vary:
      - Accept-Encoding
      Cache-Control:
      - max-age=67
      Expires:
      - Sun, 20 Oct 2024 19:52:41 GMT
      Date:
      - Sun, 20 Oct 2024 19:51:34 GMT
      Transfer-Encoding:
      - chunked
      Connection:
      - Transfer-Encoding
      - keep-alive
      Set-Cookie:
      - akacd_RTReplatform=2147483647~rv=99~id=201b23e7061aaf0a874c4823716c61ce; path=/;
        Expires=Tue, 19 Jan 2038 03:14:07 GMT; Secure; SameSite=None
      - akamai_generated_location={"zip":"""","city":"WARSAW","state":"""","county":"""","areacode":"""","lat":"52.25","long":"21.00","countrycode":"PL"};
        expires=Tue, 19-Nov-2024 19:51:34 GMT; path=/; domain=.rottentomatoes.com;
        secure
      X-Frame-Options:
      - SAMEORIGIN
      Strict-Transport-Security:
      - max-age=31536000 ; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!DOCTYPE html>
<html lang="en" dir="ltr" xmlns="http://www.w3.org/1999/xhtml" prefix="fb: http://www.facebook.com/2008/fbml og: http://opengraphprotocol.org/schema/">
    <head prefix="og: http://ogp.me/ns# flixstertomatoes: http://ogp.me/ns/apps/flixstertomatoes#">
        
        
            <script
                charset="UTF-8"
                crossorigin="anonymous"
                data-domain-script="7e979733-6841-4fce-9182-515fac69187f"
                integrity="sha384-TKdmlzVmoD70HzftTw4WtOzIBL5mNx8mXSRzEvwrWjpIJ7FZ/EuX758yMDWXtRUN"
                src="https://cdn.cookielaw.org/consent/7e979733-6841-4fce-9182-515fac69187f/otSDKStub.js"
                type="text/javascript"
            >
            </script>
            <script type="text/javascript">
                function OptanonWrapper() { }
            </script>
        

        
            <script
                ccpa-opt-out-ids="USP"
                ccpa-opt-out-geo="US"
                ccpa-opt-out-lspa="false"
                charset="UTF-8"
                src="https://cdn.cookielaw.org/opt-out/otCCPAiab.js"
                type="text/javascript"
            >
            </script>
        
        

        
            
            <script src="/assets/pizza-pie/javascripts/bundles/roma/rt-common.js?single"></script>
            
        

        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <meta http-equiv="x-ua-compatible" content="ie=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <link rel="shortcut icon" sizes="76x76" type="image/x-icon" href="https://www.rottentomatoes.com/assets/pizza-pie/images/favicon.ico" />

        

        
    
        
    
<title>The Wild Robot | Rotten Tomatoes</title>


    <meta name="description" content="The epic adventure follows the journey of a robot--ROZZUM unit 7134, &quot;Roz&quot; for short -- that is shipwrecked on an uninhabited island and must learn to adapt to the harsh surroundings, gradually building relationships with the animals on the island and becoming the adoptive parent of an orphaned gosling." />

    <meta name="twitter:card" content="summary" />

    <meta name="twitter:image" content="https://resizing.flixster.com/H_01DJwgqQtq3M9GLavrM9_FL3g=/206x305/v2/https://resizing.flixster.com/c7fcjCvkHP4wiDlEdVRusMXCOws=/ems.cHJkLWVtcy1hc3NldHMvbW92aWVzLzAzOWI1YzkwLTNiODAtNDNmYy05MTA1LTViZjg4ZTgyYTc1MC5qcGc=" />

    <meta name="twitter:title" content="The Wild Robot | Rotten Tomatoes" />

    <meta name="twitter:text:title" content="The Wild Robot | Rotten Tomatoes" />

    <meta name="twitter:description" content="The epic adventure follows the journey of a robot--ROZZUM unit 7134, &quot;Roz&quot; for short -- that is shipwrecked on an uninhabited island and must learn to adapt to the harsh surroundings, gradually building relationships with the animals on the island and becoming the adoptive parent of an orphaned gosling." />



    <meta property="og:site_name" content="Rotten Tomatoes" />

    <meta property="og:title" content="The Wild Robot | Rotten Tomatoes" />

    <meta property="og:description" content="The epic adventure follows the journey of a robot--ROZZUM unit 7134, &quot;Roz&quot; for short -- that is shipwrecked on an uninhabited island and must learn to adapt to the harsh surroundings, gradually building relationships with the animals on the island and becoming the adoptive parent of an orphaned gosling." />

    <meta property="og:type" content="video.movie" />

    <meta property="og:url" content="https://www.rottentomatoes.com/m/the_wild_robot" />

    <meta property="og:image" content="https://resizing.flixster.com/H_01DJwgqQtq3M9GLavrM9_FL3g=/206x305/v2/https://resizing.flixster.com/c7fcjCvkHP4wiDlEdVRusMXCOws=/ems.cHJkLWVtcy1hc3NldHMvbW92aWVzLzAzOWI1YzkwLTNiODAtNDNmYy05MTA1LTViZjg4ZTgyYTc1MC5qcGc=" />

    <meta property="og:locale" content="en_US" />



    <link rel="canonical" href="https://www.rottentomatoes.com/m/the_wild_robot" />


<script>
    var dataLayer = dataLayer || [];
    var RottenTomatoes = RottenTomatoes || {};
    RottenTomatoes.dtmData = {"customerId":"","loggedInStatus":"","rtVersion":3.1,"webVersion":"node","emsID":"dd36be73-6c5e-3b4b-94e2-4b62260e2808","lifeCycleWindow":"OUT_OF_THEATERS","pageName":"rt | movies | overview | The Wild Robot","titleGenre":"Kids family","titleId":"dd36be73-6c5e-3b4b-94e2-4b62260e2808","titleName":"The Wild Robot","titleType":"Movie"};
    dataLayer.push({"customerId":"","loggedInStatus":"","rtVersion":3.1,"webVersion":"node","emsID":"dd36be73-6c5e-3b4b-94e2-4b62260e2808","lifeCycleWindow":"OUT_OF_THEATERS","pageName":"rt | movies | overview | The Wild Robot","titleGenre":"Kids family","titleId":"dd36be73-6c5e-3b4b-94e2-4b62260e2808","titleName":"The Wild Robot","titleType":"Movie"});
</script>


    <script id="mps-page-integration">
        window.mpscall = {"cag[certified_fresh]":"0","cag[fresh_rotten]":"rotten","cag[genre]":"Kids & Family|Adventure|Animation","cag[movieshow]":"The Wild Robot","cag[rating]":"PG","cag[release]":"Sep 27, 2024","cag[score]":"null","cag[urlid]":"/the_wild_robot","cat":"movie|movie_page","field[env]":"production","field[rtid]":"dd36be73-6c5e-3b4b-94e2-4b62260e2808","title":"The Wild Robot","type":"movie_page","site":"rottentomatoes-web"};
        var mpsopts={'host':'mps.nbcuni.com', 'updatecorrelator':1};
        var mps=mps||{};mps._ext=mps._ext||{};mps._adsheld=[];mps._queue=mps._queue||{};mps._queue.mpsloaded=mps._queue.mpsloaded||[];mps._queue.mpsinit=mps._queue.mpsinit||[];mps._queue.gptloaded=mps._queue.gptloaded||[];mps._queue.adload=mps._queue.adload||[];mps._queue.adclone=mps._queue.adclone||[];mps._queue.adview=mps._queue.adview||[];mps._queue.refreshads=mps._queue.refreshads||[];mps.__timer=Date.now||function(){return+new Date};mps.__intcode="v2";if(typeof mps.getAd!="function")mps.getAd=function(adunit){if(typeof adunit!="string")return false;var slotid="mps-getad-"+adunit.replace(/\W/g,"");if(!mps._ext||!mps._ext.loaded){mps._queue.gptloaded.push(function(){typeof mps._gptfirst=="function"&&mps._gptfirst(adunit,slotid);mps.insertAd("#"+slotid,adunit)});mps._adsheld.push(adunit)}return'<div id="'+slotid+'" class="mps-wrapper" data-mps-fill-slot="'+adunit+'"></div>'};
    </script>
    <script src="//mps.nbcuni.com/fetch/ext/load-rottentomatoes-web.js?nowrite=2" id="mps-load"></script>


    <script type="application/ld+json">{"@context":"http://schema.org","@type":"Movie","aggregateRating":{"@type":"AggregateRating","bestRating":"100","description":"The Tomatometer rating – based on the published opinions of hundreds of film and television critics – is a trusted measurement of movie and TV programming quality for millions of moviegoers. It represents the percentage of professional critic reviews that are positive for a given film or television show.","name":"Tomatometer","ratingCount":197,"ratingValue":"98","reviewCount":197,"worstRating":"0"},"contentRating":"PG","dateCreated":"2024-09-27","director":[{"@type":"Person","name":"Christopher Sanders","sameAs":"https://www.rottentomatoes.com/celebrity/chris_sanders","image":"https://images.fandango.com/cms/assets/b0cefeb0-b6a8-11ed-81d8-51a487a38835--poster-default-thumbnail.jpg"}],"description":"Discover reviews, ratings, and the latest on The Wild Robot. Stay updated on what critics and audiences are saying about this film now.","genre":["Kids & Family","Adventure","Animation"],"image":"https://resizing.flixster.com/c7fcjCvkHP4wiDlEdVRusMXCOws=/ems.cHJkLWVtcy1hc3NldHMvbW92aWVzLzAzOWI1YzkwLTNiODAtNDNmYy05MTA1LTViZjg4ZTgyYTc1MC5qcGc=","name":"The Wild Robot","producer":[{"@type":"Person","name":"Dean DeBlois","sameAs":"https://www.rottentomatoes.com/celebrity/dean_deblois","image":"https://images.fandango.com/cms/assets/b0cefeb0-b6a8-11ed-81d8-51a487a38835--poster-default-thumbnail.jpg"}],"url":"https://www.rottentomatoes.com/m/the_wild_robot","video":{"@type":"VideoObject","thumbnailUrl":"https://statcdn.fandango.com/MPX/image/NBCU_Fandango/881/715/WildRobot.jpg","name":"The Wild Robot: Final Trailer","duration":"2:20","sourceOrganization":"MPX","uploadDate":"2024-09-10T15:45:51","description":"","contentUrl":"https://www.rottentomatoes.com/m/the_wild_robot/videos/phV7PJYm2ecP"}}</script>


        <link rel="manifest" href="https://www.rottentomatoes.com/assets/pizza-pie/manifest/manifest.json" />

        <link rel="apple-touch-icon" href="https://www.rottentomatoes.com/assets/pizza-pie/head-assets/images/apple-touch-icon-60.jpg" />
        <link rel="apple-touch-icon" sizes="152x152" href="https://www.rottentomatoes.com/assets/pizza-pie/head-assets/images/apple-touch-icon-152.jpg" />
        <link rel="apple-touch-icon" sizes="167x167" href="https://www.rottentomatoes.com/assets/pizza-pie/head-assets/images/apple-touch-icon-167.jpg" />
        <link rel="apple-touch-icon" sizes="180x180" href="https://www.rottentomatoes.com/assets/pizza-pie/head-assets/images/apple-touch-icon-180.jpg" />

        
        

        
        <meta name="google-site-verification" content="VPPXtECgUUeuATBacnqnCm4ydGO99reF-xgNklSbNbc" />

        
        <meta name="msvalidate.01" content="034F16304017CA7DCF45D43850915323" />
        <meta name="theme-color" content="#FA320A">

        <!-- DNS prefetch -->
        <meta http-equiv="x-dns-prefetch-control" content="on">
        
            <link rel="dns-prefetch" href="//www.rottentomatoes.com" />
        
        
            <link rel="preconnect" href="//www.rottentomatoes.com" />
        

        

        
<!-- BEGIN: critical-->
<style id="critical-path">*,:after,:before{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}a,body,button,div,footer,html,img,li,p,section,span,ul{margin:0;padding:0;border:0;font-size:100%;font:inherit;vertical-align:baseline}footer,section{display:block}body{line-height:1}li,ul{list-style:none}a{text-decoration:none}img{vertical-align:middle}button{background-color:transparent}:root{--fontFranklinGothic:"Franklin Gothic",-apple-system,BlinkMacSystemFont,"PT Sans",Arial,Sans-Serif;--fontNeusa:"Neusa","Impact","Helvetica Neue",Arial,Sans-Serif;--fontMonospace:"Courier New",Courier,monospace}:root{--red:#FA320A;--redRGB:250,50,10;--redDark1:#A33E2A;--blue:#3976DC;--blueHover:#2A62C0;--gray:#757A84;--grayLight1:#F3F3F3;--grayLight2:#E9E9EA;--grayLight3:#DCDCE6;--grayLight4:#BCBDBE;--grayDark1:#505257;--grayDark2:#2A2C32;--grayDark3:#171C20;--grayDark4:#333e48;--orange:#FF7300;--yellow:#FFB600;--white:#FFFFFF;--black:#000000;--blackRGB:0,0,0;--yellowLegacy:#FFE400;--blueLightLegacy:#EBF3FE}:root{--borderRadius:6px}.sr-only{position:absolute;width:1px;height:1px;margin:-1px;padding:0;overflow:hidden;clip:rect(0,0,0,0);border:0}.skip-link{clip:rect(1px,1px,1px,1px);height:1px;overflow:hidden;position:absolute;white-space:nowrap;width:1px}.leaderboard_wrapper{height:50px;display:flex;justify-content:center;width:100%}@media (min-width:768px){.leaderboard_wrapper{padding:5px 0 5px;height:100px;min-height:100px}.sleaderboard_wrapper{display:flex;justify-content:center;align-items:center;background-color:var(--white);padding:10px;text-align:center}}html{--webkitFontSmoothing:antialiased;--mozOsxFontSmoothing:grayscale;font-size:1rem}body{background-color:var(--grayLight1);color:var(--grayDark2);font-family:var(--fontFranklinGothic);font-size:1rem;line-height:1.5;letter-spacing:.016em}p{font-family:var(--fontFranklinGothic);font-size:1rem;font-weight:400;line-height:1.25;margin-bottom:1.25rem}section{margin-bottom:2.5rem}.button,button{display:inline-block;height:40px;font-family:var(--fontFranklinGothic);font-size:.875rem;font-weight:500;line-height:2.85;padding:0 16px;text-align:center;text-overflow:ellipsis;text-transform:uppercase;vertical-align:middle;-webkit-line-clamp:2;white-space:nowrap;word-wrap:break-word;border:1px transparent;border-radius:4px;background-color:var(--blue);color:var(--white)}.button--link{height:auto;background-color:transparent;color:var(--blue);font-size:1rem;line-height:inherit;padding:0}button.transparent{width:inherit;height:inherit;padding:0;background:0 0}.hide{display:none!important}.h3{font-family:var(--fontFranklinGothic);font-weight:500;font-size:1.25rem;line-height:1.2;letter-spacing:0;margin-bottom:1.25rem}.h4{font-family:var(--fontFranklinGothic);font-weight:600;line-height:1.17;letter-spacing:.01em}.h4{font-size:1.125rem;margin-bottom:1rem}img{max-width:100%}a{background-color:transparent;color:var(--blue);fill:var(--grayDark2);font-family:var(--fontFranklinGothic);font-size:inherit;font-weight:400;line-height:inherit;letter-spacing:inherit;text-decoration:none}ul{padding:5px 0}ul ul{margin-top:0;margin-left:12px}li{margin-bottom:.4em;text-align:-webkit-match-parent}.list-inline{list-style:none}.list-inline>li{display:inline-block}.list-inline--separator>li{display:inline-block}.list-inline--separator>li:after{content:"|";display:inline-block;color:var(--grayDark1);margin-left:10px;margin-right:10px}.list-inline--separator>li:last-child:after{content:none}#main_container{position:relative}.rt-layout__body{line-height:1.25}.rt-layout__content{background-color:var(--white);padding-left:15px;padding-right:15px;padding-bottom:24px;overflow-x:hidden}.container{margin-right:auto;margin-left:auto}@media (min-width:768px){.container{overflow-x:unset;width:1100px;padding-left:15px;padding-right:15px}.rt-layout__body{padding:0}}[skeleton]{display:block;background-color:#eee;color:transparent}[skeleton] *{visibility:hidden}[skeleton=chip]{display:inline-block;border-radius:100px}[skeleton=panel]{border-radius:4px}.unset{font-size:unset;font-family:unset;font-weight:unset;line-height:unset;margin:unset;padding:unset;color:inherit;letter-spacing:unset;text-transform:unset}rt-header{height:55px}rt-header[skeleton]{display:block;background-color:var(--red)}rt-header a{color:var(--grayDark2)}rt-header a[slot=logo] img{height:35px}rt-header li ul,rt-header ul{margin:0;padding:0}rt-header ul[slot=nav-links] a,rt-header ul[slot=nav-links] button{margin:0 15px;color:var(--white);font-family:var(--fontFranklinGothic);font-size:.875rem;font-weight:500;line-height:inherit}rt-header ul[slot=nav-links] li{margin-bottom:.4em}rt-header ul[slot=nav-links] .masthead-user-link{display:flex;align-items:center;color:var(--white);font-size:inherit;font-weight:500;margin-left:10px}rt-header ul[slot=nav-links] .masthead-user-link img{height:14px;margin-right:5px;vertical-align:text-bottom}rt-header ul[slot=nav-links] .masthead-user-link p{margin-bottom:0}rt-header ul[slot=nav-links] .masthead-user-link rt-icon{fill:var(--white)}rt-header ul[slot=nav-links] rt-header-user-info{position:absolute;top:30px;left:auto;right:0;z-index:103}rt-header ul[slot=nav-links] rt-header-user-info a{position:relative;margin:0;color:var(--grayDark2);font-size:1rem;font-weight:400;z-index:2}rt-header ul[slot=nav-links] rt-header-user-info .username{font-size:1rem;font-weight:500px;color:var(--grayDark2)}rt-header ul[slot=nav-links] rt-header-user-info .dropdown-link{color:var(--grayDark2);margin-bottom:.4em}rt-header ul[slot=nav-links] rt-header-user-info .rating-count-block,rt-header ul[slot=nav-links] rt-header-user-info .wts-count-block{font-size:.875rem;font-weight:400px;color:var(--gray)}rt-header ul[slot=nav-links] rt-header-user-info .wts-count-block rt-icon[icon=plus]{fill:var(--blue)}rt-header ul[slot=nav-links] rt-header-user-info .rating-count-block rt-icon[icon=star]{fill:var(--yellow)}rt-header rt-header-nav-item{padding:13px 15px;color:var(--white)}rt-header rt-header-nav-item>a[slot=link]{color:var(--white);font-family:var(--fontNeusa);letter-spacing:.9px;text-transform:uppercase;position:relative}rt-header rt-header-nav-item temporary-display{position:absolute;top:-20px;right:-15px}rt-header rt-header-nav-item temporary-display rt-badge{font-size:.75rem}rt-header rt-header-nav-item-dropdown[aria-expanded=false]{display:none}rt-header rt-header-nav-item-dropdown-list:last-child{margin-right:0}rt-header rt-header-nav-item-dropdown-list{margin-right:15px}rt-header rt-header-nav-item-dropdown-list ul{margin-bottom:15px}rt-header rt-header-nav-item-dropdown-list li{margin-bottom:.4em}rt-header rt-header-nav-item-dropdown-list a{display:flex;width:100%}rt-header rt-header-nav-item-dropdown-list a span{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;width:215px}rt-header rt-header-nav-item-dropdown-list a.what-to-watch{align-items:center;gap:3px}rt-header rt-header-nav-item-dropdown-list p{display:flex}@media (min-width:768px){rt-header{height:100px}rt-header a[slot=logo]{margin:15px}rt-header a[slot=logo] img{height:50px}}bottom-nav{position:fixed;bottom:0;left:0;width:100%;height:84px;z-index:100}@media (min-width:768px){bottom-nav{display:none}}.trending-bar{background-color:rgba(var(--blackRGB),.6);color:var(--white);display:none;padding:4px 10px;font-size:.875rem;z-index:1;opacity:.9;position:relative;height:26px;margin-bottom:0}.trending-bar a{color:var(--white)}.trending-bar__header{color:var(--yellowLegacy);margin-bottom:0;padding-right:5px;white-space:nowrap;font-size:1rem;font-family:var(--fontNeusa);line-height:18px;letter-spacing:.055em;text-transform:uppercase}.trending-bar__list{display:flex;align-items:center;padding:0}.trending-bar__list li{margin-bottom:0}.trending-bar__link{margin-right:2px;padding:0 5px;font-weight:400;line-height:18px}.trending-list-wrap{display:flex;flex-wrap:nowrap;justify-content:space-between;align-items:flex-start}@media (min-width:768px){.trending-bar{display:block}}#trending_bar_ad{position:absolute;top:0;right:0}.auth-overlay__icon-button{display:flex;border:none;background:0 0;height:26px;font-size:1.625rem;padding:0;z-index:1}.auth-overlay__icon-button rt-icon{fill:var(--grayLight4)}.auth-overlay__icon-button--close{position:absolute;right:20px}.footer{background-color:var(--grayDark2);font-family:var(--fontFranklinGothic);font-size:.875rem;display:block;color:var(--white)}.footer__content-desktop-block{display:none}.footer__content-mobile-block{display:block;color:var(--white);font-size:.875rem;padding:15px 15px 69px;text-align:center;font-family:var(--fontFranklinGothic)}.footer__content-mobile-block a{font-size:.875rem}.footer__content-group-title{line-height:1.875rem}.footer__links-list{padding:0;margin-left:-5px;margin-bottom:30px}.footer__links-list-item{margin-bottom:0;padding:2px 5px;font-size:1rem}.footer__links-list-item a{color:var(--white);fill:var(--white);line-height:1.375rem}.footer__links-list-item a#ot-sdk-btn.ot-sdk-show-settings{color:var(--white);border:initial;height:initial;white-space:initial;padding:2px 5px;font-size:1rem;line-height:initial;background-color:initial}.footer__links-list-item a#ot-sdk-btn.ot-sdk-show-settings.mobile{font-size:.875rem}.footer__ccpa-icon{display:inline-block;width:30px;margin:0 0 2px 0}.footer__newsletter-block{display:block;margin:auto;width:100%}.footer__newsletter-btn{display:flex;justify-content:center;align-items:center;width:175px;margin:10px auto;font-weight:500;color:var(--white)}.footer__copyright{display:none}.footer__copyright .footer__links-list{font-size:.75rem}.footer__copyright-legal{margin-bottom:0;font-size:1rem}.footer__copyright .footer__links-list{font-size:.75rem}@media (min-width:768px){.footer__content-desktop-block{display:flex;justify-content:space-between}.footer__content-mobile-block{display:none}.footer__content-group{padding:20px 0}.footer__content-group-title{margin-bottom:10px;font-size:1.125rem;text-transform:uppercase}.footer__newsletter-block{display:block;margin:0;text-align:center;width:250px}.footer__newsletter-copy{margin:10px 0;line-height:1.09rem}.footer__copyright{display:flex;flex-direction:column;align-items:center;padding-top:10px;padding-bottom:10px}.footer__copyright-legal{color:var(--gray);font-size:.875rem}}#movie-overview #main-wrap{position:relative}#movie-overview #main-wrap #modules-wrap{width:100%;height:auto;position:relative;z-index:1;margin-top:-12px}#movie-overview #main-wrap #sidebar-wrap{display:none}@media (min-width:768px){#movie-overview #main-wrap{margin-top:0;display:flex}#movie-overview #main-wrap #modules-wrap,#movie-overview #main-wrap #sidebar-wrap{height:auto}#movie-overview #main-wrap #modules-wrap{display:inline-block;width:728px;margin:0 40px 0 16px}#movie-overview #main-wrap #sidebar-wrap{display:inline-block;width:300px;padding:16px 0}}:root{scroll-behavior:smooth}#movie-overview{width:auto;height:100%;margin:0 -15px}.rt-layout__content{overflow-x:unset}discovery-sidebar{margin-bottom:16px}discovery-sidebar[skeleton]{min-height:500px}#hero-wrap{position:relative;top:0;z-index:0}@media (min-width:768px){#hero-wrap{margin-bottom:16px;z-index:2}}media-review-full-audience{bottom:0;position:absolute;width:100%}@media (min-width:768px){media-review-full-audience{bottom:unset;position:unset}}overlay-base[data-photoscarouselmanager]{background-color:var(--white)}overlay-base[data-photoscarouselmanager] photos-carousel-overlay{display:flex;justify-content:center;align-items:center;width:100vw;height:100vh}video-player-overlay button.transparent{margin:15px}video-player-overlay rt-icon[icon=close]{fill:var(--white)}video-player-overlay .cta-btn.header-cta{display:none;margin:16px}video-player-overlay .cta-btn.footer-cta{width:calc(100% - 68px);text-align:center}@media (min-width:768px){video-player-overlay rt-icon[icon=close]{display:none;visibility:hidden}video-player-overlay .cta-btn.header-cta{display:inline-block}}</style>
<!-- /END: critical-->


        
    
            <!-- @todo TOMATO-10097 - clean up redesignGlobalStyles-->
            
                <link rel="preload" href="/assets/pizza-pie/stylesheets/bundles/layouts/default_DEPRECATED.3a61f687bf7.css" as="style" onload="this.onload=null;this.rel='stylesheet'">
            
        

    <link rel="preload" href="/assets/pizza-pie/stylesheets/bundles/pages/movie.5102b449f58.css" as="style" onload="this.onload=null;this.rel='stylesheet'">


        <script>
        !function(t){"use strict";t.loadCSS||(t.loadCSS=function(){});var e=loadCSS.relpreload={};if(e.support=function(){var e;try{e=t.document.createElement("link").relList.supports("preload")}catch(t){e=!1}return function(){return e}}(),e.bindMediaToggle=function(t){var e=t.media||"all";function a(){t.media=e}t.addEventListener?t.addEventListener("load",a):t.attachEvent&&t.attachEvent("onload",a),setTimeout(function(){t.rel="stylesheet",t.media="only x"}),setTimeout(a,3e3)},e.poly=function(){if(!e.support())for(var a=t.document.getElementsByTagName("link"),n=0;n<a.length;n++){var o=a[n];"preload"!==o.rel||"style"!==o.getAttribute("as")||o.getAttribute("data-loadcss")||(o.setAttribute("data-loadcss",!0),e.bindMediaToggle(o))}},!e.support()){e.poly();var a=t.setInterval(e.poly,500);t.addEventListener?t.addEventListener("load",function(){e.poly(),t.clearInterval(a)}):t.attachEvent&&t.attachEvent("onload",function(){e.poly(),t.clearInterval(a)})}"undefined"!=typeof exports?exports.loadCSS=loadCSS:t.loadCSS=loadCSS}("undefined"!=typeof global?global:this);
        </script>

        <script>
            window.RottenTomatoes = {};
            window.RTLocals = {};
            window.nunjucksPrecompiled = {};
            window.__RT__ = {};
        </script>

        
            
            <script src="https://cdn.jwplayer.com/libraries/U8MHzHHR.js"></script>
            <script src="https://sb.scorecardresearch.com/c2/plugins/streamingtag_plugin_jwplayer.js"></script>
        

        
        
    </head>
    
    <body
        class="body no-touch js-mptd-layout"
        data-AdsGlobalSkinTakeoverManager="body"
        data-SearchResultsNavManager="body"
    >
        <user-activity-manager></user-activity-manager>
        <ad-unit-manager></ad-unit-manager>

        <auth-initiate-manager data-WatchlistButtonManager="authInitiateManager:createAccount"></auth-initiate-manager>
<auth-profile-manager data-AuthInitiateManager="authProfileManager"></auth-profile-manager>
<overlay-base
    class=""
    data-AuthInitiateManager="overlayBase:close"
    data-PagePollsIndexManager="authOverlay:close"
    hidden
>
    <overlay-flows data-AuthInitiateManager="overlayFlows" slot="content">
        <button slot="close" class="auth-overlay__icon-button auth-overlay__icon-button--close" aria-label="Close" data-qa="close-overlay-btn">
            <rt-icon image icon="close"></rt-icon>
        </button>
    </overlay-flows>
</overlay-base>

<notification-alert data-AuthInitiateManager="authSuccess" class="" animate hidden>
    <rt-icon icon="check-circled"></rt-icon>
    <span>Signed in</span>
</notification-alert>

<div id="auth-templates" data-AuthInitiateManager="authTemplates">
    <template slot="screens" id="cognito-loading">
    <div>
        <loading-spinner id="cognito-auth-loading-spinner"></loading-spinner>
        <style>
            #cognito-auth-loading-spinner {
                font-size: 2rem;
                transform: translate(calc(100% - 1em), 250px);
                width: 50%;
            }
        </style>
    </div>
</template>

    <template slot="screens" id="cognito-signup-form">
<auth-signup-screen data-qa="auth-signup-screen">
    <h2 slot="header" class="cognito-signup-form__header" data-qa="auth-signup-screen-title">Log in or sign up for Rotten Tomatoes</h2>
    <rt-button slot="signup-option" theme="light" class="cognito-signup-form__option" value="google" data-qa="auth-signup-screen-google-btn">
        <div class="cognito-signup-form__option__container">
            <span class="cognito-signup-form__option__icon cognito-signup-form__option__icon--google"></span>
            <span class="cognito-signup-form__option__text">Continue with Google</span>
        </div>
    </rt-button>
    <rt-button slot="signup-option" theme="light" class="cognito-signup-form__option" value="email" data-qa="auth-signup-screen-email-btn">
        <div class="cognito-signup-form__option__container">
            <rt-icon image icon="mail" class="cognito-signup-form__option__icon cognito-signup-form__option__icon--mail"></rt-icon>
            <span class="cognito-signup-form__option__text">Continue with Email</span>
        </div>
    </rt-button>

    <input-label slot="email">
        <label slot="label" for="cognito-email-input" class="auth-form__control__label">Email</label>
        <input slot="input" id="cognito-email-input" type="email" data-qa="auth-signup-screen-email">
    </input-label>

    <div slot="info">
        <div class="no-password-container">
            <rt-badge>New</rt-badge>
            <span class="no-password">Where is the password field?</span>
            <tool-tip-deprecated
                class="cognito-signup-form__tooltip"
                title="Where is the password field?"
                description="Rotten Tomatoes now offers passwordless authentication for all user accounts, making it easier for you to access your information. Simply enter the email address you previously used and hit continue to complete your log-in."
                slot="tooltip"
                nomobilefooter
            >
                <button slot="tool-tip-btn" class="button--link">
                    <rt-icon icon="question-ringed" image></rt-icon>
                </button>
            </tool-tip-deprecated>
        </div>
    </div>

    <button slot="continue" class="auth-form__button" data-qa="auth-signup-screen-continue-btn">Continue</button>

    <p slot="help" class="cognito-signup-form-help">
        <a href="/reset-client" data-qa="auth-signup-screen-reset-client-link">Trouble logging in?</a>
    </p>

    <p slot="terms-and-policies" class="cognito-signup-form__terms-and-policies">
        By continuing, you agree to the <a href="https://www.nbcuniversal.com/fandango-privacy-policy" target="_blank" rel="noopener" data-qa="auth-signup-screen-privacy-policy-link">Privacy Policy</a> and
        the <a href="/policies/terms-and-policies" target="_blank" rel="noopener" data-qa="auth-signup-screen-terms-policies-link">Terms and Policies</a>, and to receive email from the <a href="https://www.fandango.com/about-us"target="_blank" rel="noopener">Fandango Media Brands</a>.
    </p>
</auth-signup-screen>
</template>

    <template slot="screens" id="cognito-name-form-us">
  <auth-name-screen data-qa="auth-name-screen">
    <input-label slot="firstName" data-qa="auth-name-screen-firstname-input">
      <label slot="label" for="cognito-first-name-input" class="auth-form__control__label">First name (Required)</label>
      <input slot="input" id="cognito-first-name-input" data-qa="auth-name-screen-first-name">
    </input-label>
    <input-label slot="lastName" data-qa="auth-name-screen-lastname-input">
      <label slot="label" for="cognito-last-name-input" class="auth-form__control__label">Last name (Required)</label>
      <input slot="input" id="cognito-last-name-input" data-qa="auth-name-screen-last-name">
    </input-label>
    <rt-button slot="createAccount" class="auth-form__button">Create my account</rt-button>
    <p slot="termsAndPolicies" class="cognito-signup-form__terms-and-policies">
      By creating an account, you agree to the
      <a href="https://www.nbcuniversal.com/fandango-privacy-policy" target="_blank" rel="noopener" data-qa="auth-name-screen-privacy-policy-link"> Privacy Policy </a>
      and the<br>
      <a href="/policies/terms-and-policies" target="_blank" rel="noopener" data-qa="auth-name-screen-terms-policies-link"> Terms and Policies</a>,
      and to receive email from Rotten Tomatoes and to receive email from the
      <a href="https://www.fandango.com/about-us" target="_blank" rel="noopener" data-qa="auth-name-screen-fandango-media-link"> Fandango Media Brands</a>.
    </p>
  </auth-name-screen>
</template>

    <template slot="screens" id="cognito-name-form-foreign">
  <auth-name-screen data-qa="auth-name-screen">
    <input-label slot="firstName" data-qa="auth-name-screen-firstname-input">
      <label slot="label" for="cognito-first-name-input" class="auth-form__control__label">First name (Required)</label>
      <input slot="input" id="cognito-first-name-input" data-qa="auth-name-screen-first-name">
    </input-label>
    <input-label slot="lastName" data-qa="auth-name-screen-lastname-input">
      <label slot="label" for="cognito-last-name-input" class="auth-form__control__label">Last name (Required)</label>
      <input slot="input" id="cognito-last-name-input" data-qa="auth-name-screen-last-name">
    </input-label>
    <rt-button slot="createAccount" class="auth-form__button">Create my account</rt-button>
    <p slot="termsAndPolicies" class="cognito-signup-form__terms-and-policies">
      By creating an account, you agree to the
      <a href="https://www.nbcuniversal.com/fandango-privacy-policy" target="_blank" rel="noopener" data-qa="auth-name-screen-privacy-policy-link"> Privacy Policy </a>
      and the<br>
      <a href="/policies/terms-and-policies" target="_blank" rel="noopener" data-qa="auth-name-screen-terms-policies-link"> Terms and Policies</a>
      , and to receive email from Rotten Tomatoes.
    </p>
  </auth-name-screen>
</template>

    <template slot="screens" id="cognito-checkemail">
    <auth-checkemail-screen data-qa="auth-check-email-screen">
        <span slot="email-icon" class="cognito-check-email__icon--email"></span>
        <span slot="mobile-icon" class="cognito-check-email__icon--mobile"></span>
        <button slot="learn-more" class="text-button" tabindex="0" data-qa="auth-check-email-screen-learn-more-link">LEARN MORE</button>
        <a slot="help" tabindex="0" target="_blank" href="/help_desk" data-qa="auth-check-email-screen-help-link">HELP</a>
    </auth-checkemail-screen>
</template>

    <template slot="screens" id="cognito-learn-more">
  <auth-learn-more-screen data-qa="auth-learn-more-screen">
    <button slot="back" class="auth-overlay__icon-button auth-overlay__icon-button--back">
      <rt-icon icon="left-arrow-stem" image></rt-icon>
    </button>
  </auth-learn-more-screen>
</template>
    <template slot="screens" id="cognito-error">
    <auth-error-screen data-qa="auth-error-screen">
        <h2 slot="heading" class="cognito-error__heading" data-qa="auth-error-screen-title">
            <rt-icon image icon="exclamation-circled" class="cognito-error__icon--exclamation-circled"></rt-icon>
            <span class="js-cognito-error-heading-txt">Email not verified</span>
        </h2>
        <p slot="error-message" class="js-cognito-error-message cognito-error__error-message" data-qa="auth-error-screen-message">
            <!-- error message is set from auth-error-screen WC-->
        </p>
        <p slot="error-code" class="js-cognito-error-code cognito-error__error-message" data-qa="auth-error-screen-code">
            <!-- error code is set from auth-error-screen WC-->
        </p>
        <rt-button slot="tryAgainBtn" class="cognito-error__try-again-btn"><span class="cognito-error__btn-text" data-qa="auth-error-screen-try-again-btn">TRY AGAIN</span></rt-button>
        <rt-button slot="cancelBtn" class="cognito-error__cancel-btn" theme="light"><span class="cognito-error__btn-text" data-qa="auth-error-screen-cancel-btn">CANCEL</span></rt-button>
    </auth-error-screen>
</template>

    <template slot="screens" id="cognito-opt-in-us">
  <auth-optin-screen data-qa="auth-opt-in-screen">
    <div slot="newsletterText">
      <h2 class="cognito-optin-form__header unset">Let's keep in touch!</h2>
    </div>
    <img slot="image" class="image" src="https://images.fandango.com/cms/assets/97c33f00-313f-11ee-9aaf-6762c75465cf--newsletter.png" alt="Rotten Tomatoes Newsletter">>
    <h2 slot="subTitle" class="subTitle unset">Sign up for the Rotten Tomatoes newsletter to get weekly updates on:</h2>
    <ul slot="options">
      <li class="icon-item">Upcoming Movies and TV shows</li>
      <li class="icon-item">Rotten Tomatoes Podcast</li>
      <li class="icon-item">Media News + More</li>
    </ul>
    <rt-button slot="optInButton" data-qa="auth-opt-in-screen-opt-in-btn">
      Sign me up
    </rt-button>
    <rt-button slot="optOutButton" class="button--outline" data-qa="auth-opt-in-screen-opt-out-btn">
      No thanks
    </rt-button>
    <p slot="footNote">
      By clicking "Sign Me Up," you are agreeing to receive occasional emails and communications from Fandango Media (Fandango, Vudu, and Rotten Tomatoes) and consenting to Fandango's 
      <a href="https://www.nbcuniversal.com/fandango-privacy-policy" class="optin-link" target="_blank" rel="noopener" data-qa="auth-name-screen-privacy-policy-link">Privacy Policy</a>
      and 
      <a href="/policies/terms-and-policies" class="optin-link" target="_blank" rel="noopener" data-qa="auth-name-screen-privacy-policy-link">Terms and Policies</a>.
      Please allow 10 business days for your account to reflect your preferences.
    </p>
  </auth-optin-screen>
</template>
    <template slot="screens" id="cognito-opt-in-foreign">
  <auth-optin-screen data-qa="auth-opt-in-screen">
    <div slot="newsletterText">
      <h2 class="cognito-optin-form__header unset">Let's keep in touch!</h2>
    </div>
    <img slot="image" class="image" src="https://images.fandango.com/cms/assets/97c33f00-313f-11ee-9aaf-6762c75465cf--newsletter.png" alt="Rotten Tomatoes Newsletter">>
    <h2 slot="subTitle" class="subTitle unset">Sign up for the Rotten Tomatoes newsletter to get weekly updates on:</h2>
    <ul slot="options">
      <li class="icon-item">Upcoming Movies and TV shows</li>
      <li class="icon-item">Rotten Tomatoes Podcast</li>
      <li class="icon-item">Media News + More</li>
    </ul>
    <rt-button slot="optInButton" data-qa="auth-opt-in-screen-opt-in-btn">
      Sign me up
    </rt-button>
    <rt-button slot="optOutButton" class="button--outline" data-qa="auth-opt-in-screen-opt-out-btn">
      No thanks
    </rt-button>
  </auth-optin-screen>
</template>
    <template slot="screens" id="cognito-opt-in-success">
    <auth-verify-screen>
        <rt-icon icon="check-circled" slot="icon"></rt-icon>
        <p class="h3" slot="status">OK, got it!</p>
    </auth-verify-screen>
</template>

</div>


        <div id="emptyPlaceholder"></div> 

        
            
            <script ASYNC src="//assets.adobedtm.com/launch-EN549327edc13e414a9beb5d61bfd9aac6.min.js"></script>
            
        

        <div class="container rt-layout__body">
            <a href="#main-page-content" class="skip-link">Skip to Main Content</a>
            <div id="header_and_leaderboard">
                <div id="top_leaderboard_wrapper" class="leaderboard_wrapper ">
                    <ad-unit hidden unitdisplay="desktop" unittype="topbanner" adjustheight>
                        <div slot="adInject"></div>
                    </ad-unit>

                    <ad-unit hidden unitdisplay="mobile" unittype="mbanner">
                        <div slot="adInject"></div>
                    </ad-unit>
                </div>
            </div>

            

  <rt-header-manager></rt-header-manager>

  <rt-header
    aria-label="navigation bar"
    class="navbar"
    data-qa="header-nav-bar"
    data-AdsGlobalNavTakeoverManager="header"
    id="header-main"
    skeleton="panel"
    
  >

  <a
    class="logo-wrap"
    data-AdsGlobalNavTakeoverManager="logoLink"
    data-SearchResultsNavManager="rtNavLogo"
    href="/"
    id="navbar"
    slot="logo"
  >
    <img
      alt="Rotten Tomatoes"
      data-qa="header-logo"
      data-AdsGlobalNavTakeoverManager="logo"
      src="/assets/pizza-pie/images/rtlogo.9b892cff3fd.png"
      fetchpriority="high"
    />

    <div class="hide">
      <ad-unit hidden unitdisplay="desktop,mobile" unittype="logorepeat" unittargeting="ploc=rtlogo;">
        <div slot="adInject"></div>
      </ad-unit>
    </div>
  </a>

  <search-results-nav-manager></search-results-nav-manager>

  <search-results-nav
    data-adobe-id="global-nav-search"
    data-SearchResultsNavManager="search"
    slot="search"
    skeleton="chip"
  >
    <search-results-controls
      data-SearchResultsNavManager="searchControls"
      slot="controls"
    >
      <input
        aria-label="Search"
        data-AdsGlobalNavTakeoverManager="searchInput"
        data-SearchResultsNavManager="inputText:click,input,keydown"
        data-qa="search-input"
        placeholder="Search"
        slot="search-input"
        type="text"
      />
      <rt-button
        class="search-clear"
        data-qa="search-clear"
        data-AdsGlobalNavTakeoverManager="searchClearBtn"
        data-SearchResultsNavManager="clearBtn:click"
        size="0.875"
        slot="search-clear"
        theme="transparent"
      >
        <rt-icon icon="close"></rt-icon>
      </rt-button>
      <rt-link
        class="search-submit"
        aria-label="Submit search"
        data-qa="search-submit"
        data-AdsGlobalNavTakeoverManager="searchSubmitBtn"
        data-SearchResultsNavManager="submitBtn:click"
        href="/search"
        size="0.875"
        slot="search-submit"
      >
        <rt-icon icon="search"></rt-icon>
      </rt-link>
      <rt-button
        class="search-cancel"
        data-qa="search-cancel"
        data-AdsGlobalNavTakeoverManager="searchCancelBtn"
        data-SearchResultsNavManager="cancelBtn:click"
        size="0.875"
        slot="search-cancel"
        theme="transparent"
      >
        Cancel
      </rt-button>
    </search-results-controls>

    <search-results
      aria-expanded="false"
      class="hide"
      data-SearchResultsNavManager="searchResults"
      slot="results"
    >
    </search-results>
  </search-results-nav>

  <ul slot="nav-links">
    <li>
      <a
        href="/about"
        data-qa="header:link-whats-tmeter"
        data-AdsGlobalNavTakeoverManager="text"
      >
        About Rotten Tomatoes&reg;
      </a>
    </li>
    <li>
      <a 
        href="/critics" 
        data-qa="header:link-critics-home"
        data-AdsGlobalNavTakeoverManager="text"
      >
        Critics
      </a>
    </li>
    <li data-RtHeaderManager="loginLink">
      <ul>
        <li>
          <button
            id="masthead-show-login-btn"
            class="js-cognito-signin button--link"
            data-AuthInitiateManager="btnSignIn:click"
            data-qa="header:login-btn"
            data-AdsGlobalNavTakeoverManager="text"
          >
            Login/signup
          </button>
        </li>
      </ul>
    </li>
    <li class="hide" data-RtHeaderManager="userItem:keydown,keyup,mouseenter" data-qa="header:user">
      <a class="masthead-user-link" data-RtHeaderManager="navUserlink:focus" rel="nofollow" data-qa="user-profile-link">
        <img data-RtHeaderManager="navUserImg" data-qa="user-profile-thumb">
        <p
          data-AdsGlobalNavTakeoverManager="text"
          data-RtHeaderManager="navUserFirstName"
          data-qa="user-profile-name"
        ></p>
        <rt-icon
          data-AdsGlobalNavTakeoverManager="text"
          icon="down-dir"
          image
        >
        </rt-icon>
      </a>
      <rt-header-user-info
        class="hide"
        data-RtHeaderManager="userInfo:focusout,mouseleave"
        data-UserActivityManager="userInfo"
      >
        <a 
          data-qa="user-stats-profile-pic"
          href=""
          rel="nofollow" 
          slot="imageExpanded"
          tabindex="-1"
        >
          <img src="" width="40" alt="">
        </a>
        <a slot="fullName" rel="nofollow" href="" class="username" data-qa="user-stats-name"></a>
        <a slot="wts" rel="nofollow" href="" class="wts-count-block" data-qa="user-stats-wts">
          <rt-icon icon="plus" data-qa="user-stats-ratings-count"></rt-icon>
          <span class="count" data-qa="user-stats-wts-count"></span>
          &nbsp;Wants to See
        </a>
        <a slot="rating" rel="nofollow" href="" class="rating-count-block" data-qa="user-stats-ratings">
          <rt-icon icon="star" data-qa="user-stats-ratings-count"></rt-icon>
          <span class="count"></span>
          &nbsp;Ratings
        </a>

        <a slot="profileLink" rel="nofollow" class="dropdown-link" href="" data-qa="user-stats-profile-link">Profile</a>
        <a slot="accountLink" rel="nofollow" class="dropdown-link" href="/user/account" data-qa="user-stats-account-link">Account</a>
        <a slot="logoutLink" class="dropdown-link" data-RtHeaderManager="logoutLink:click" href="#logout" data-qa="user-stats-logout-link">Log Out</a>
      </rt-header-user-info>
    </li>
  </ul>

  <rt-header-nav slot="nav-dropdowns">
    <rt-header-nav-item slot="movies" data-qa="masthead:movies-dvds">
      <a
        class="unset"
        slot="link"
        href="/browse/movies_in_theaters/sort:popular"
        data-qa="masthead:movies-dvds-link"
        data-AdsGlobalNavTakeoverManager="text"
      >
        Movies
      </a>
      <rt-header-nav-item-dropdown aria-expanded="false" slot="dropdown" data-qa="movies-menu">
        <rt-header-nav-item-dropdown-list slot="column" data-qa="header-movies-in-theaters">
          <p slot="title" class="h4" data-qa="movies-in-theaters-main-link"><a class="unset" href="/browse/movies_in_theaters/sort:popular">Movies in theaters</a></p>
          <ul slot="links">
            <li data-qa="in-theaters-item">
              <a href="/browse/movies_in_theaters/sort:newest" data-qa="opening-this-week-link">Opening This Week</a>
            </li>
            <li data-qa="in-theaters-item">
              <a href="/browse/movies_in_theaters/sort:top_box_office" data-qa="top-box-office-link">Top Box Office</a>
            </li>
            <li data-qa="in-theaters-item">
              <a href="/browse/movies_coming_soon/" data-qa="coming-soon-link">Coming Soon to Theaters</a>
            </li>
            <li data-qa="in-theaters-item">
              <a href="/browse/movies_in_theaters/critics:certified_fresh~sort:popular" data-qa="certified-fresh-link">Certified Fresh Movies</a>
            </li>
          </ul>
        </rt-header-nav-item-dropdown-list>
        <rt-header-nav-item-dropdown-list slot="column" data-qa="header-on-dvd-streaming">
          <p slot="title" class="h4" data-qa="dvd-streaming-main-link"><a class="unset" href="/browse/movies_at_home">Movies at Home</a></p>
          <ul slot="links">
            
            <li data-qa="movies-at-home-item">
              <a href="/browse/movies_at_home/affiliates:fandango-at-home" data-qa="fandango-at-home-link">Fandango at Home</a>
            </li>
            
            <li data-qa="movies-at-home-item">
              <a href="/browse/movies_at_home/affiliates:peacock" data-qa="peacock-link">Peacock</a>
            </li>
            
            <li data-qa="movies-at-home-item">
              <a href="/browse/movies_at_home/affiliates:paramount-plus" data-qa="paramount-link">Paramount+</a>
            </li>
            
            <li data-qa="movies-at-home-item">
              <a href="/browse/movies_at_home/affiliates:netflix" data-qa="netflix-link">Netflix</a>
            </li>
            
            <li data-qa="movies-at-home-item">
              <a href="/browse/movies_at_home/affiliates:apple-tv-plus" data-qa="apple-tv-link">Apple TV+</a>
            </li>
            
            <li data-qa="movies-at-home-item">
              <a href="/browse/movies_at_home/affiliates:prime-video" data-qa="prime-video-link">Prime Video</a>
            </li>
            
            <li data-qa="movies-at-home-item">
              <a href="/browse/movies_at_home/sort:popular" data-qa="most-popular-streaming-movies-link">Most Popular Streaming Movies</a>
            </li>
            
            <li data-qa="movies-at-home-item">
              <a href="/browse/movies_at_home/critics:certified_fresh" data-qa="certified-fresh-movies-link">Certified Fresh Movies</a>
            </li>
            
            <li data-qa="movies-at-home-item">
              <a href="/browse/movies_at_home" data-qa="browse-all-link">Browse all</a>
            </li>
            
          </ul>
        </rt-header-nav-item-dropdown-list>
        <rt-header-nav-item-dropdown-list slot="column" data-qa="header-movies-more">
          <p slot="title" class="h4">More</p>
          <ul slot="links">
            <li data-qa="what-to-watch-item">
                <a href="https://editorial.rottentomatoes.com/rt-hub/what-to-watch" class="what-to-watch" data-qa="what-to-watch-link">What to Watch<rt-badge>New</rt-badge></a>
            </li>
          </ul>
        </rt-header-nav-item-dropdown-list>
        
          <rt-header-nav-item-dropdown-list slot="column" cfp>
            <p slot="title" class="h4">Certified fresh picks</p>
            <ul slot="links" class="cfp-wrap" data-qa="header-certified-fresh-picks" data-curation="rt-nav-list-cf-picks">
              
                <li data-qa="cert-fresh-item">
                  
                  <a class="cfp-tile" href="/m/smile_2" data-qa="cert-fresh-link">
    <tile-dynamic data-qa="tile">
        <rt-img
            alt="Smile 2 poster image"
            slot="image"
            src="https://resizing.flixster.com/IwPzlm_hfJc8xCWPWZjIQAANSRY=/206x305/v2/https://resizing.flixster.com/qsagj7PZiJ_iQoyFd5dWDuIBWDk=/fit-in/180x240/v2/https://resizing.flixster.com/gZtomMQp1wjKcCrcWSIBhY8EPBo=/ems.cHJkLWVtcy1hc3NldHMvbW92aWVzLzZlM2VjZGZjLWI3ZDEtNGFjYS05ODFjLTQwZGUyYmMwODcwYy5qcGc="
            loading="lazy"
        ></rt-img>
        <div slot="caption" data-track="scores">
            <div class="score-wrap">
                <score-icon-critics
                    certified
                    sentiment="positive"
                    size="1"
                ></score-icon-critics>
                <rt-text class="critics-score" size="1" context="label">83%</rt-text>
            </div>
            <span class="p--small">Smile 2</span>
            <span class="sr-only">Link to Smile 2</span>
        </div>
    </tile-dynamic>
</a>
                </li>
              
              
                <li data-qa="cert-fresh-item">
                  
                  <a class="cfp-tile" href="/m/anora" data-qa="cert-fresh-link">
    <tile-dynamic data-qa="tile">
        <rt-img
            alt="Anora poster image"
            slot="image"
            src="https://resizing.flixster.com/7kqTgMLLkeV4IwB2saP3Oiz1huw=/206x305/v2/https://resizing.flixster.com/p9g96mU1onerJ4YgCSqJHrNnY8M=/fit-in/180x240/v2/https://resizing.flixster.com/FTHBGq9jCInQsKBj9dhfLIVIxrM=/ems.cHJkLWVtcy1hc3NldHMvbW92aWVzLzg2NWVmODUwLWIzMDAtNGVkMC1iODgwLWZmZDAyOTVkODkwYS5qcGc="
            loading="lazy"
        ></rt-img>
        <div slot="caption" data-track="scores">
            <div class="score-wrap">
                <score-icon-critics
                    certified
                    sentiment="positive"
                    size="1"
                ></score-icon-critics>
                <rt-text class="critics-score" size="1" context="label">98%</rt-text>
            </div>
            <span class="p--small">Anora</span>
            <span class="sr-only">Link to Anora</span>
        </div>
    </tile-dynamic>
</a>
                </li>
              
              
                <li data-qa="cert-fresh-item">
                  
                  <a class="cfp-tile" href="/m/we_live_in_time" data-qa="cert-fresh-link">
    <tile-dynamic data-qa="tile">
        <rt-img
            alt="We Live in Time poster image"
            slot="image"
            src="https://resizing.flixster.com/O4l_p-Y_hsyYqz7wyvlFb4kD-Kg=/206x305/v2/https://resizing.flixster.com/DorugeIStda5kosjv3v54eQg-DU=/fit-in/180x240/v2/https://resizing.flixster.com/qRBAJoNjbiG99gJfB8bsWY4y8vg=/ems.cHJkLWVtcy1hc3NldHMvbW92aWVzLzYzM2M2NmJkLWQ3ODEtNDI3NS04NjdhLTMzYzYxNTQ4YzlmZS5qcGc="
            loading="lazy"
        ></rt-img>
        <div slot="caption" data-track="scores">
            <div class="score-wrap">
                <score-icon-critics
                    certified
                    sentiment="positive"
                    size="1"
                ></score-icon-critics>
                <rt-text class="critics-score" size="1" context="label">80%</rt-text>
            </div>
            <span class="p--small">We Live in Time</span>
            <span class="sr-only">Link to We Live in Time</span>
        </div>
    </tile-dynamic>
</a>
                </li>
              
            </ul>
          </rt-header-nav-item-dropdown-list>
        
      </rt-header-nav-item-dropdown>
    </rt-header-nav-item>

    <rt-header-nav-item slot="tv" data-qa="masthead:tv">
      <a
        class="unset"
        slot="link"
        href="/browse/tv_series_browse/sort:popular"
        data-qa="masthead:tv-link"
        data-AdsGlobalNavTakeoverManager="text"
      >
        Tv shows
      </a>
      <rt-header-nav-item-dropdown aria-expanded="false" slot="dropdown" data-qa="tv-menu">
        
          <rt-header-nav-item-dropdown-list slot="column" data-qa="header-tv-list1">
            <p slot="title" class="h4" data-curation="rt-hp-text-list-3">
              New TV Tonight
            </p>
            <ul slot="links" class="score-list-wrap">
              
                <li data-qa="list-item">
                  <a class="score-list-item" href="/tv/what_we_do_in_the_shadows/s06" data-qa="list-item-link">
    <div class="score-wrap">
        <score-icon-critics
            certified="false"
            sentiment="positive"
            size="1"
        ></score-icon-critics>
        
        <rt-text
            class="critics-score"
            context="label"
            size="1"
            style="--lineHeight: 1; --letterSpacing: 0.016em;"
        >86%</rt-text>
        
    </div>
    <span>
        
            What We Do in the Shadows: Season 6
        
    </span>
</a>
                </li>
              
                <li data-qa="list-item">
                  <a class="score-list-item" href="/tv/poppas_house/s01" data-qa="list-item-link">
    <div class="score-wrap">
        <score-icon-critics
            certified="false"
            sentiment="empty"
            size="1"
        ></score-icon-critics>
        
        <rt-text
            class="critics-score-empty"
            context="label"
            size="1"
            style="--textColor: var(--grayLight4); --lineHeight: 1; --letterSpacing: 0.2em;" 
        >--</rt-text>
        
    </div>
    <span>
        
            Poppa&#39;s House: Season 1
        
    </span>
</a>
                </li>
              
                <li data-qa="list-item">
                  <a class="score-list-item" href="/tv/territory/s01" data-qa="list-item-link">
    <div class="score-wrap">
        <score-icon-critics
            certified="false"
            sentiment="empty"
            size="1"
        ></score-icon-critics>
        
        <rt-text
            class="critics-score-empty"
            context="label"
            size="1"
            style="--textColor: var(--grayLight4); --lineHeight: 1; --letterSpacing: 0.2em;" 
        >--</rt-text>
        
    </div>
    <span>
        
            Territory: Season 1
        
    </span>
</a>
                </li>
              
                <li data-qa="list-item">
                  <a class="score-list-item" href="/tv/before/s01" data-qa="list-item-link">
    <div class="score-wrap">
        <score-icon-critics
            certified="false"
            sentiment="empty"
            size="1"
        ></score-icon-critics>
        
        <rt-text
            class="critics-score-empty"
            context="label"
            size="1"
            style="--textColor: var(--grayLight4); --lineHeight: 1; --letterSpacing: 0.2em;" 
        >--</rt-text>
        
    </div>
    <span>
        
            Before: Season 1
        
    </span>
</a>
                </li>
              
                <li data-qa="list-item">
                  <a class="score-list-item" href="/tv/hellbound/s02" data-qa="list-item-link">
    <div class="score-wrap">
        <score-icon-critics
            certified="false"
            sentiment="empty"
            size="1"
        ></score-icon-critics>
        
        <rt-text
            class="critics-score-empty"
            context="label"
            size="1"
            style="--textColor: var(--grayLight4); --lineHeight: 1; --letterSpacing: 0.2em;" 
        >--</rt-text>
        
    </div>
    <span>
        
            Hellbound: Season 2
        
    </span>
</a>
                </li>
              
                <li data-qa="list-item">
                  <a class="score-list-item" href="/tv/the_equalizer_2020/s05" data-qa="list-item-link">
    <div class="score-wrap">
        <score-icon-critics
            certified="false"
            sentiment="empty"
            size="1"
        ></score-icon-critics>
        
        <rt-text
            class="critics-score-empty"
            context="label"
            size="1"
            style="--textColor: var(--grayLight4); --lineHeight: 1; --letterSpacing: 0.2em;" 
        >--</rt-text>
        
    </div>
    <span>
        
            The Equalizer: Season 5
        
    </span>
</a>
                </li>
              
                <li data-qa="list-item">
                  <a class="score-list-item" href="/tv/breath_of_fire/s01" data-qa="list-item-link">
    <div class="score-wrap">
        <score-icon-critics
            certified="false"
            sentiment="empty"
            size="1"
        ></score-icon-critics>
        
        <rt-text
            class="critics-score-empty"
            context="label"
            size="1"
            style="--textColor: var(--grayLight4); --lineHeight: 1; --letterSpacing: 0.2em;" 
        >--</rt-text>
        
    </div>
    <span>
        
            Breath of Fire: Season 1
        
    </span>
</a>
                </li>
              
                <li data-qa="list-item">
                  <a class="score-list-item" href="/tv/beauty_in_black/s01" data-qa="list-item-link">
    <div class="score-wrap">
        <score-icon-critics
            certified="false"
            sentiment="empty"
            size="1"
        ></score-icon-critics>
        
        <rt-text
            class="critics-score-empty"
            context="label"
            size="1"
            style="--textColor: var(--grayLight4); --lineHeight: 1; --letterSpacing: 0.2em;" 
        >--</rt-text>
        
    </div>
    <span>
        
            Beauty in Black: Season 1
        
    </span>
</a>
                </li>
              
                <li data-qa="list-item">
                  <a class="score-list-item" href="/tv/like_a_dragon_yakuza/s01" data-qa="list-item-link">
    <div class="score-wrap">
        <score-icon-critics
            certified="false"
            sentiment="empty"
            size="1"
        ></score-icon-critics>
        
        <rt-text
            class="critics-score-empty"
            context="label"
            size="1"
            style="--textColor: var(--grayLight4); --lineHeight: 1; --letterSpacing: 0.2em;" 
        >--</rt-text>
        
    </div>
    <span>
        
            Like a Dragon: Yakuza: Season 1
        
    </span>
</a>
                </li>
              
            </ul>
            <a
              class="a--short"
              data-qa="tv-list1-view-all-link"
              href="/browse/tv_series_browse/sort:newest"
              slot="view-all-link"
            >
                View All
            </a>
          </rt-header-nav-item-dropdown-list>
        

        
          <rt-header-nav-item-dropdown-list slot="column" data-qa="header-tv-list2">
            <p slot="title" class="h4" data-curation="rt-hp-text-list-2">
              Most Popular TV on RT
            </p>
            <ul slot="links" class="score-list-wrap">
              
                <li data-qa="list-item">
                  <a class="score-list-item" href="/tv/agatha_all_along/s01" data-qa="list-item-link">
    <div class="score-wrap">
        <score-icon-critics
            certified="true"
            sentiment="positive"
            size="1"
        ></score-icon-critics>
        
        <rt-text
            class="critics-score"
            context="label"
            size="1"
            style="--lineHeight: 1; --letterSpacing: 0.016em;"
        >82%</rt-text>
        
    </div>
    <span>
        
            Agatha All Along: Season 1
        
    </span>
</a>
                </li>
              
                <li data-qa="list-item">
                  <a class="score-list-item" href="/tv/the_penguin/s01" data-qa="list-item-link">
    <div class="score-wrap">
        <score-icon-critics
            certified="true"
            sentiment="positive"
            size="1"
        ></score-icon-critics>
        
        <rt-text
            class="critics-score"
            context="label"
            size="1"
            style="--lineHeight: 1; --letterSpacing: 0.016em;"
        >94%</rt-text>
        
    </div>
    <span>
        
            The Penguin: Season 1
        
    </span>
</a>
                </li>
              
                <li data-qa="list-item">
                  <a class="score-list-item" href="/tv/rivals_2024/s01" data-qa="list-item-link">
    <div class="score-wrap">
        <score-icon-critics
            certified="false"
            sentiment="positive"
            size="1"
        ></score-icon-critics>
        
        <rt-text
            class="critics-score"
            context="label"
            size="1"
            style="--lineHeight: 1; --letterSpacing: 0.016em;"
        >94%</rt-text>
        
    </div>
    <span>
        
            Rivals: Season 1
        
    </span>
</a>
                </li>
              
                <li data-qa="list-item">
                  <a class="score-list-item" href="/tv/disclaimer/s01" data-qa="list-item-link">
    <div class="score-wrap">
        <score-icon-critics
            certified="true"
            sentiment="positive"
            size="1"
        ></score-icon-critics>
        
        <rt-text
            class="critics-score"
            context="label"
            size="1"
            style="--lineHeight: 1; --letterSpacing: 0.016em;"
        >79%</rt-text>
        
    </div>
    <span>
        
            Disclaimer: Season 1
        
    </span>
</a>
                </li>
              
                <li data-qa="list-item">
                  <a class="score-list-item" href="/tv/hysteria_2024/s01" data-qa="list-item-link">
    <div class="score-wrap">
        <score-icon-critics
            certified="false"
            sentiment="positive"
            size="1"
        ></score-icon-critics>
        
        <rt-text
            class="critics-score"
            context="label"
            size="1"
            style="--lineHeight: 1; --letterSpacing: 0.016em;"
        >67%</rt-text>
        
    </div>
    <span>
        
            Hysteria!: Season 1
        
    </span>
</a>
                </li>
              
                <li data-qa="list-item">
                  <a class="score-list-item" href="/tv/teacup/s01" data-qa="list-item-link">
    <div class="score-wrap">
        <score-icon-critics
            certified="true"
            sentiment="positive"
            size="1"
        ></score-icon-critics>
        
        <rt-text
            class="critics-score"
            context="label"
            size="1"
            style="--lineHeight: 1; --letterSpacing: 0.016em;"
        >79%</rt-text>
        
    </div>
    <span>
        
            Teacup: Season 1
        
    </span>
</a>
                </li>
              
                <li data-qa="list-item">
                  <a class="score-list-item" href="/tv/nobody_wants_this/s01" data-qa="list-item-link">
    <div class="score-wrap">
        <score-icon-critics
            certified="true"
            sentiment="positive"
            size="1"
        ></score-icon-critics>
        
        <rt-text
            class="critics-score"
            context="label"
            size="1"
            style="--lineHeight: 1; --letterSpacing: 0.016em;"
        >94%</rt-text>
        
    </div>
    <span>
        
            Nobody Wants This: Season 1
        
    </span>
</a>
                </li>
              
                <li data-qa="list-item">
                  <a class="score-list-item" href="/tv/the_office_2024/s01" data-qa="list-item-link">
    <div class="score-wrap">
        <score-icon-critics
            certified="false"
            sentiment="positive"
            size="1"
        ></score-icon-critics>
        
        <rt-text
            class="critics-score"
            context="label"
            size="1"
            style="--lineHeight: 1; --letterSpacing: 0.016em;"
        >80%</rt-text>
        
    </div>
    <span>
        
            The Office: Season 1
        
    </span>
</a>
                </li>
              
                <li data-qa="list-item">
                  <a class="score-list-item" href="/tv/sweetpea/s01" data-qa="list-item-link">
    <div class="score-wrap">
        <score-icon-critics
            certified="false"
            sentiment="positive"
            size="1"
        ></score-icon-critics>
        
        <rt-text
            class="critics-score"
            context="label"
            size="1"
            style="--lineHeight: 1; --letterSpacing: 0.016em;"
        >84%</rt-text>
        
    </div>
    <span>
        
            Sweetpea: Season 1
        
    </span>
</a>
                </li>
              
                <li data-qa="list-item">
                  <a class="score-list-item" href="/tv/the_lincoln_lawyer/s03" data-qa="list-item-link">
    <div class="score-wrap">
        <score-icon-critics
            certified="false"
            sentiment="positive"
            size="1"
        ></score-icon-critics>
        
        <rt-text
            class="critics-score"
            context="label"
            size="1"
            style="--lineHeight: 1; --letterSpacing: 0.016em;"
        >100%</rt-text>
        
    </div>
    <span>
        
            The Lincoln Lawyer: Season 3
        
    </span>
</a>
                </li>
              
            </ul>
            <a
              class="a--short"
              data-qa="tv-list2-view-all-link"
              href="/browse/tv_series_browse/sort:popular?"
              slot="view-all-link"
            >
                View All
            </a>
          </rt-header-nav-item-dropdown-list>
        

        <rt-header-nav-item-dropdown-list slot="column" data-qa="header-tv-more">
          <p slot="title" class="h4">More</p>
          <ul slot="links">
            <li>
              <a href="https://editorial.rottentomatoes.com/rt-hub/what-to-watch/" class="what-to-watch" data-qa="what-to-watch-link-tv">
                What to Watch<rt-badge>New</rt-badge>
              </a>
            </li>
            <li>
              <a href="/browse/tv_series_browse/sort:popular" data-qa="tv-best-link">
                <span>Best TV Shows</span>
              </a>
            </li>
            <li>
              <a href="/browse/tv_series_browse/sort:popular" data-qa="tv-popular-link">
                <span>Most Popular TV</span>
              </a>
            </li>
            <li>
              <a href="/browse/tv_series_browse/affiliates:fandango-at-home" data-qa="tv-fandango-at-home-link">
                <span>Fandango at Home</span>
              </a>
            </li>
            <li>
              <a href="/browse/tv_series_browse/affiliates:peacock" data-qa="tv-peacock-link">
                <span>Peacock</span>
              </a>
            </li>
            <li>
              <a href="/browse/tv_series_browse/affiliates:paramount-plus" data-qa="tv-paramount-link">
                <span>Paramount+</span>
              </a>
            </li>
            <li>
              <a href="/browse/tv_series_browse/affiliates:netflix" data-qa="tv-netflix-link">
                <span>Netflix</span>
              </a>
            </li>
            <li>
              <a href="/browse/tv_series_browse/affiliates:prime-video" data-qa="tv-prime-video-link">
                <span>Prime Video</span>
              </a>
            </li>
            <li>
              <a href="/browse/tv_series_browse/affiliates:apple-tv-plus" data-qa="tv-apple-tv-plus-link">
                <span>Apple TV+</span>
              </a>
            </li>
          </ul>
        </rt-header-nav-item-dropdown-list>

        
          <rt-header-nav-item-dropdown-list slot="column" cfp data-qa="header-certified-fresh-pick">
            <p slot="title" class="h4">
              Certified fresh pick
            </p>
            <ul slot="links" class="cfp-wrap" data-curation="rt-nav-list-cf-picks">
              <li>
                
                <a class="cfp-tile" href="/tv/shrinking/s02" data-qa="cert-fresh-link">
    <tile-dynamic data-qa="tile">
        <rt-img
            alt="Shrinking: Season 2 poster image"
            slot="image"
            src="https://resizing.flixster.com/ubdSZnNdzEJSigrp8cYY_8f_u5E=/206x305/v2/https://resizing.flixster.com/Fc4pqfBt0kBT1o96QiTRtWQf-nk=/fit-in/180x240/v2/https://resizing.flixster.com/htIecVmHlycGI6e1xjkhHaZMp34=/ems.cHJkLWVtcy1hc3NldHMvdHZzZWFzb24vMDNmYzc0YzItNjcxMS00ZGQ5LTkyMDYtMDg4ODZmNDBmZGZhLnBuZw=="
            loading="lazy"
        ></rt-img>
        <div slot="caption" data-track="scores">
            <div class="score-wrap">
                <score-icon-critics
                    certified
                    sentiment="positive"
                    size="1"
                ></score-icon-critics>
                <rt-text class="critics-score" size="1" context="label">96%</rt-text>
            </div>
            <span class="p--small">Shrinking: Season 2</span>
            <span class="sr-only">Link to Shrinking: Season 2</span>
        </div>
    </tile-dynamic>
</a>
              </li>
            </ul>
          </rt-header-nav-item-dropdown-list>
        
      </rt-header-nav-item-dropdown>
    </rt-header-nav-item>

    <rt-header-nav-item slot="shop">
      <a class="unset"
          id="shopLink"
          slot="link"
          href="https://editorial.rottentomatoes.com/article/shop/"
          target="_blank"
          data-qa="masthead:shop-link"
          data-AdsGlobalNavTakeoverManager="text"
      >
          Shop
          <temporary-display
            slot="temporary-display"
            key="shop"
            element="#shopLink"
            event="click"
          >
            <rt-badge hidden>New</rt-badge>
          </temporary-display>
      </a>
    </rt-header-nav-item>

    <rt-header-nav-item slot="news" data-qa="masthead:news">
      <a
        class="unset"
        slot="link"
        href="https://editorial.rottentomatoes.com/"
        data-qa="masthead:news-link"
        data-AdsGlobalNavTakeoverManager="text"
      >
        News
      </a>
      <rt-header-nav-item-dropdown aria-expanded="false" slot="dropdown" data-qa="news-menu">
        <rt-header-nav-item-dropdown-list slot="column" data-qa="header-news-columns">
          <p slot="title" class="h4">Columns</p>
          <ul slot="links">
            <li data-qa="column-item">
              <a href="https://editorial.rottentomatoes.com/all-time-lists/" data-pageheader="All-Time Lists" data-qa="column-link">
                All-Time Lists
              </a>
            </li>
            <li data-qa="column-item">
              <a href="https://editorial.rottentomatoes.com/binge-guide/" data-pageheader="Binge Guide" data-qa="column-link">
                Binge Guide
              </a>
            </li>
            <li data-qa="column-item">
              <a href="https://editorial.rottentomatoes.com/comics-on-tv/" data-pageheader="Comics on TV" data-qa="column-link">
                Comics on TV
              </a>
            </li>
            <li data-qa="column-item">
              <a href="https://editorial.rottentomatoes.com/countdown/" data-pageheader="Countdown" data-qa="column-link">
                Countdown
              </a>
            </li>
            <li data-qa="column-item">
              <a href="https://editorial.rottentomatoes.com/five-favorite-films/" data-pageheader="Five Favorite Films" data-qa="column-link">
                Five Favorite Films
              </a>
            </li>
            <li data-qa="column-item">
              <a href="https://editorial.rottentomatoes.com/video-interviews/" data-pageheader="Video Interviews" data-qa="column-link">
                Video Interviews
              </a>
            </li>
            <li data-qa="column-item">
              <a href="https://editorial.rottentomatoes.com/weekend-box-office/" data-pageheader="Weekend Box Office" data-qa="column-link"
              >Weekend Box Office
            </a>
            </li>
            <li data-qa="column-item">
              <a href="https://editorial.rottentomatoes.com/weekly-ketchup/" data-pageheader="Weekly Ketchup" data-qa="column-link">
                Weekly Ketchup
              </a>
            </li>
            <li data-qa="column-item">
              <a href="https://editorial.rottentomatoes.com/what-to-watch/" data-pageheader="What to Watch" data-qa="column-link">
                What to Watch
              </a>
            </li>
          </ul>
        </rt-header-nav-item-dropdown-list>

        
          <rt-header-nav-item-dropdown-list slot="column" data-qa="header-news-guides">
            <p slot="title" class="h4">Guides</p>
            <ul slot="links" class="news-wrap">
              
                <li data-qa="guides-item">
                  <a class="news-tile" href="https://editorial.rottentomatoes.com/guide/new-verified-hot-movies/" data-qa="news-link">
    <tile-dynamic
        data-qa="tile"
        orientation="landscape"
    >
        <rt-img
            alt="50 Newest Verified Hot Movies poster image"
            slot="image"
            src="https://prd-rteditorial.s3.us-west-2.amazonaws.com/wp-content/uploads/2024/07/25125337/600DeadpoolWolverine2.jpg"
            loading="lazy"
        ></rt-img>
        <div slot="caption">
            <p>50 Newest Verified Hot Movies</p>
            <span class="sr-only">Link to 50 Newest Verified Hot Movies</span>
        </div>
    </tile-dynamic>
</a>
                </li>
              
                <li data-qa="guides-item">
                  <a class="news-tile" href="https://editorial.rottentomatoes.com/guide/best-horror-movie-sequels/" data-qa="news-link">
    <tile-dynamic
        data-qa="tile"
        orientation="landscape"
    >
        <rt-img
            alt="78 Best Horror Movie Sequels poster image"
            slot="image"
            src="https://prd-rteditorial.s3.us-west-2.amazonaws.com/wp-content/uploads/2024/10/17174904/600Smile2.jpg"
            loading="lazy"
        ></rt-img>
        <div slot="caption">
            <p>78 Best Horror Movie Sequels</p>
            <span class="sr-only">Link to 78 Best Horror Movie Sequels</span>
        </div>
    </tile-dynamic>
</a>
                </li>
              
            </ul>
            <a
              class="a--short"
              data-qa="guides-view-all-link"
              href="https://editorial.rottentomatoes.com/countdown/"
              slot="view-all-link"
            >
              View All
            </a>
          </rt-header-nav-item-dropdown-list>
        

        
          <rt-header-nav-item-dropdown-list slot="column" data-qa="header-news-hubs">
            <p slot="title" class="h4">Hubs</p>
            <ul slot="links" class="news-wrap">
              
                <li data-qa="hubs-item">
                  <a class="news-tile" href="https://editorial.rottentomatoes.com/rt-hub/what-to-watch/" data-qa="news-link">
    <tile-dynamic
        data-qa="tile"
        orientation="landscape"
    >
        <rt-img
            alt="What to Watch: In Theaters and On Streaming poster image"
            slot="image"
            src="https://prd-rteditorial.s3.us-west-2.amazonaws.com/wp-content/uploads/2024/07/15120909/RT_WTW_Hub_Halloween_600x314_v2-1.png"
            loading="lazy"
        ></rt-img>
        <div slot="caption">
            <p>What to Watch: In Theaters and On Streaming</p>
            <span class="sr-only">Link to What to Watch: In Theaters and On Streaming</span>
        </div>
    </tile-dynamic>
</a>
                </li>
              
                <li data-qa="hubs-item">
                  <a class="news-tile" href="https://editorial.rottentomatoes.com/rt-hub/awards-tour/" data-qa="news-link">
    <tile-dynamic
        data-qa="tile"
        orientation="landscape"
    >
        <rt-img
            alt="Awards Tour poster image"
            slot="image"
            src="https://prd-rteditorial.s3.us-west-2.amazonaws.com/wp-content/uploads/2023/02/30160328/RT_AwardsTour_Thumbnail_600x314.jpg"
            loading="lazy"
        ></rt-img>
        <div slot="caption">
            <p>Awards Tour</p>
            <span class="sr-only">Link to Awards Tour</span>
        </div>
    </tile-dynamic>
</a>
                </li>
              
            </ul>
            <a
              class="a--short"
              data-qa="hubs-view-all-link"
              href="https://editorial.rottentomatoes.com/rt-hubs/"
              slot="view-all-link"
            >
              View All
            </a>
          </rt-header-nav-item-dropdown-list>
        

        
          <rt-header-nav-item-dropdown-list slot="column" data-qa="header-news-rt-news">
            <p slot="title" class="h4">RT News</p>
            <ul slot="links" class="news-wrap">
              
                <li data-qa="rt-news-item">
                  <a class="news-tile" href="https://editorial.rottentomatoes.com/article/all-the-trailers-from-new-york-comic-con-2024/" data-qa="news-link">
    <tile-dynamic
        data-qa="tile"
        orientation="landscape"
    >
        <rt-img
            alt="All the Trailers from New York Comic Con poster image"
            slot="image"
            src="https://prd-rteditorial.s3.us-west-2.amazonaws.com/wp-content/uploads/2024/10/20100550/NYCC_Creature_Commandos-Rep.jpg"
            loading="lazy"
        ></rt-img>
        <div slot="caption">
            <p>All the Trailers from New York Comic Con</p>
            <span class="sr-only">Link to All the Trailers from New York Comic Con</span>
        </div>
    </tile-dynamic>
</a>
                </li>
              
                <li data-qa="rt-news-item">
                  <a class="news-tile" href="https://editorial.rottentomatoes.com/article/hugh-grant-breaks-down-a-scene-from-heretic/" data-qa="news-link">
    <tile-dynamic
        data-qa="tile"
        orientation="landscape"
    >
        <rt-img
            alt="Hugh Grant Breaks Down a Scene from <em>Heretic</em> poster image"
            slot="image"
            src="https://prd-rteditorial.s3.us-west-2.amazonaws.com/wp-content/uploads/2024/10/17163305/Heretic_Scene_Breakdown-Rep.jpg"
            loading="lazy"
        ></rt-img>
        <div slot="caption">
            <p>Hugh Grant Breaks Down a Scene from <em>Heretic</em></p>
            <span class="sr-only">Link to Hugh Grant Breaks Down a Scene from <em>Heretic</em></span>
        </div>
    </tile-dynamic>
</a>
                </li>
              
            </ul>
            <a
              class="a--short"
              data-qa="rt-news-view-all-link"
              href="https://editorial.rottentomatoes.com/news/"
              slot="view-all-link"
            >
              View All
            </a>
          </rt-header-nav-item-dropdown-list>
        
      </rt-header-nav-item-dropdown>
    </rt-header-nav-item>

    <rt-header-nav-item slot="showtimes">
      <a
        class="unset"
        slot="link"
        href="https://www.fandango.com/movies-in-theaters?a=13036"
        target="_blank"
        rel="noopener"
        data-qa="masthead:tickets-showtimes-link"
        data-AdsGlobalNavTakeoverManager="text"
      >
        Showtimes
      </a>
    </rt-header-nav-item>
  </rt-header-nav>

</rt-header>

<ads-global-nav-takeover-manager></ads-global-nav-takeover-manager>
<section class="trending-bar">
  

  <ad-unit hidden id="trending_bar_ad" unitdisplay="desktop" unittype="trendinggraphic">
    <div slot="adInject"></div>
  </ad-unit>
  <div id="trending-bar-start" class="trending-list-wrap" data-qa="trending-bar">
    <ul class="list-inline trending-bar__list" data-curation="rt-nav-trending"
      data-qa="trending-bar-list">
      <li class="trending-bar__header">Trending on RT</li>
      
      <li><a class="trending-bar__link" href="https://editorial.rottentomatoes.com/article/best-1994-movies-showdown/"  data-qa="trending-bar-item"> Pulp Fiction vs. Shawshank </a></li>
      
      <li><a class="trending-bar__link" href="https://editorial.rottentomatoes.com/article/smile-2-first-reviews-one-of-the-best-horror-films-of-the-year/"  data-qa="trending-bar-item"> Smile 2 Reviews </a></li>
      
      <li><a class="trending-bar__link" href="https://editorial.rottentomatoes.com/article/all-the-trailers-from-new-york-comic-con-2024/"  data-qa="trending-bar-item"> Comic Con </a></li>
      
      <li><a class="trending-bar__link" href="https://editorial.rottentomatoes.com/hub-subpage/horror-season/"  data-qa="trending-bar-item"> Spooky Season  </a></li>
      
    </ul>
    <div class="trending-bar__social" data-qa="trending-bar-social-list" style="width: 135px;">
      <social-media-icons theme="light" size="14"></social-media-icons>
    </div>
  </div>
</section>



            <main
                id="main_container"
                class="container rt-layout__content"
            >
                <bottom-nav data-qa="bottom-nav" data-DiscoveryGridsManager="bottomNavComponent">
                    <a slot="template">
                        <bottom-nav-item></bottom-nav-item>
                    </a>
                </bottom-nav>
                <div id="main-page-content">
                    
    
                    

    <div id="movie-overview">
        <watchlist-button-manager></watchlist-button-manager>

        <div
            id="hero-wrap"
            data-TvNavigationManager="heroWrap"
            data-AdUnitManager="heroWrap"
        >
            
                <div
  aria-labelledby="media-hero-label"
  class="media-hero-wrap"
  data-adobe-id="media-hero"
  data-qa="section:media-hero"
  data-MediaHeroColorManager_DEPRECATED="mediaHeroModule"
  skeleton="panel"
  showvideo="true"
>
  <media-hero-color-deprecated
    
    averagecolor="50,29,27,255"
    data-MediaHeroColorManager_DEPRECATED="mediaHero"
    data-MediaScorecardManager="mediaHero:ctaClicked"
    data-ModulesNavigationManager="mediaHero"
  >
    
    <h1 class="unset" slot="titleIntro">
      <rt-text size="1.25, 1.75" style="--textColor: var(--white)" context="label"><span>The Wild Robot</span></rt-text>
    </h1>
    

    
    <rt-text size="0.75, 0.875" style="--textColor: var(--white)" slot="ratingsCode">PG</rt-text>
    
    
    <rt-text size="0.75, 0.875" style="--textColor: var(--white)" slot="releaseDate">Released Sep 27</rt-text>
    
    
    <rt-text size="0.75, 0.875" style="--textColor: var(--white)" slot="duration">1h 42m</rt-text>
    
    

    
    <rt-text size="0.75, 0.875" style="--textColor: var(--white)" slot="genre">Kids &amp; Family</rt-text>
    
    <rt-text size="0.75, 0.875" style="--textColor: var(--white)" slot="genre">Adventure</rt-text>
    
    <rt-text size="0.75, 0.875" style="--textColor: var(--white)" slot="genre">Animation</rt-text>
    

    
    <rt-button
      data-content-type="PROMO"
      data-ems-id="dd36be73-6c5e-3b4b-94e2-4b62260e2808"
      data-MediaHeroColorManager_DEPRECATED="trailerBtn"
      data-mpx-id="2370671683662"
      data-public-id="phV7PJYm2ecP"
      data-title="The Wild Robot: Final Trailer"
      data-type="Movie"
      data-VideoPlayerOverlayManager="btnVideo:click"
      size="0.875"
      shape="pill"
      slot="trailerBtn"
      theme="light"
    >
      <rt-icon icon="play"></rt-icon>
      <span>TRAILER</span>
      <sr-text> for </sr-text>
    </rt-button>
    

    <rt-button
      data-MediaHeroColorManager_DEPRECATED="sponsoredCtaBtn"
      class="cta-button"
      hidden
      rel="noopener"
      shape="pill"
      slot="sponsoredCtaBtn"
      theme="simplified"
    >
      CTA
    </rt-button>

    
    <watchlist-button
      data-WatchlistButtonManager="watchlistButton:click"
      emsid="dd36be73-6c5e-3b4b-94e2-4b62260e2808"
      mediatype="Movie"
      mediatitle="The Wild Robot"
      state="unchecked"
      slot="watchlistBtn"
      theme="transparent-lighttext"
    >
      <span slot="text">List</span>
    </watchlist-button>
    

    <rt-img
      alt="Main image for The Wild Robot"
      fallback="false"
      fallbackdesktop="https://resizing.flixster.com/sRwu6jJI9kmzvKWHON6MHWv1Rpc=/620x336/v2/https://images.fandango.com/cms/assets/2cc99140-aa7f-11ee-8105-b7f85fb17c0d--fallback-image-landscape.png"
      fallbackmobile="https://resizing.flixster.com/2daSHYBserlrTtmdXOLBsOoKbFI=/375x210/v2/https://images.fandango.com/cms/assets/2cc99140-aa7f-11ee-8105-b7f85fb17c0d--fallback-image-landscape.png"
      fetchpriority="high"
      slot="iconic"
      srcmobile="https://resizing.flixster.com/wHfMwmmdKDRL_SjBowzr5yZKvjc=/375x210/v2/https://statcdn.fandango.com/MPX/image/NBCU_Fandango/881/715/WildRobot.jpg"
      srcdesktop="https://resizing.flixster.com/CX1AiksPbZ1OmFBUdWZ7RRc8ifU=/620x336/v2/https://statcdn.fandango.com/MPX/image/NBCU_Fandango/881/715/WildRobot.jpg">
    </rt-img>

    
    <rt-img
      alt="Main image for The Wild Robot"
      fallback="false"
      slot="poster"
      srcmobile="https://resizing.flixster.com/H_01DJwgqQtq3M9GLavrM9_FL3g=/206x305/v2/https://resizing.flixster.com/c7fcjCvkHP4wiDlEdVRusMXCOws=/ems.cHJkLWVtcy1hc3NldHMvbW92aWVzLzAzOWI1YzkwLTNiODAtNDNmYy05MTA1LTViZjg4ZTgyYTc1MC5qcGc="
      srcdesktop="https://resizing.flixster.com/H_01DJwgqQtq3M9GLavrM9_FL3g=/206x305/v2/https://resizing.flixster.com/c7fcjCvkHP4wiDlEdVRusMXCOws=/ems.cHJkLWVtcy1hc3NldHMvbW92aWVzLzAzOWI1YzkwLTNiODAtNDNmYy05MTA1LTViZjg4ZTgyYTc1MC5qcGc=">
    </rt-img>
    

    <score-icon-critics
      data-MediaHeroColorManager_DEPRECATED="criticsScoreIcon"
      size="2.5"
      slot="criticsScoreIcon"
    ></score-icon-critics>
    <rt-text
      context="label"
      data-MediaHeroColorManager_DEPRECATED="criticsScore"
      size="1.375"
      slot="criticsScore"
      style="--textColor: var(--white);--lineHeight: 1.25;"
    ></rt-text>
    <rt-link
      data-MediaHeroColorManager_DEPRECATED="criticsReviewsLink"
      size="0.75"
      slot="criticsReviewsLink"
    ></rt-link>
    <rt-text
      data-MediaHeroColorManager_DEPRECATED="criticsReviewsDescription"
      size="0.75"
      slot="criticsReviewsDescription"
      style="--textColor: var(--white);"
    ></rt-text>

    <score-icon-audience
      data-MediaHeroColorManager_DEPRECATED="audienceScoreIcon"
      size="2.5"
      slot="audienceScoreIcon"
    ></score-icon-audience>
    <rt-text
      data-MediaHeroColorManager_DEPRECATED="audienceScore"
      context="label"
      size="1.375"
      slot="audienceScore"
      style="--textColor: var(--white);--lineHeight: 1.25;"
    ></rt-text>
    <rt-link
      data-MediaHeroColorManager_DEPRECATED="audienceReviewsLink"
      size="0.75"
      slot="audienceReviewsLink"
    ></rt-link>
    <rt-text
      data-MediaHeroColorManager_DEPRECATED="audienceReviewsDescription"
      size="0.75"
      slot="audienceReviewsDescription"
      style="--textColor: var(--white);"
    ></rt-text>

    
    <div id="media-hero-videos" slot="desktopVideos"></div>
  </media-hero-color-deprecated>

  <media-hero-color-manager-deprecated>
    <script id="media-hero-json" data-json="mediaHero"
      type="application/json">{"averageColor":{"isDark":true,"rgba":"rgba(50,29,27,1)","value":[50,29,27,255]},"emsId":"dd36be73-6c5e-3b4b-94e2-4b62260e2808","genres":["Kids & Family","Adventure","Animation"],"h1":"The Wild Robot","h2":"","heroImage":{"fallback":false,"fallbackdesktop":"https://resizing.flixster.com/sRwu6jJI9kmzvKWHON6MHWv1Rpc=/620x336/v2/https://images.fandango.com/cms/assets/2cc99140-aa7f-11ee-8105-b7f85fb17c0d--fallback-image-landscape.png","fallbackmobile":"https://resizing.flixster.com/2daSHYBserlrTtmdXOLBsOoKbFI=/375x210/v2/https://images.fandango.com/cms/assets/2cc99140-aa7f-11ee-8105-b7f85fb17c0d--fallback-image-landscape.png","srcdesktop":"https://resizing.flixster.com/CX1AiksPbZ1OmFBUdWZ7RRc8ifU=/620x336/v2/https://statcdn.fandango.com/MPX/image/NBCU_Fandango/881/715/WildRobot.jpg","srcmobile":"https://resizing.flixster.com/wHfMwmmdKDRL_SjBowzr5yZKvjc=/375x210/v2/https://statcdn.fandango.com/MPX/image/NBCU_Fandango/881/715/WildRobot.jpg"},"posterImage":{"fallback":false,"srcdesktop":"https://resizing.flixster.com/H_01DJwgqQtq3M9GLavrM9_FL3g=/206x305/v2/https://resizing.flixster.com/c7fcjCvkHP4wiDlEdVRusMXCOws=/ems.cHJkLWVtcy1hc3NldHMvbW92aWVzLzAzOWI1YzkwLTNiODAtNDNmYy05MTA1LTViZjg4ZTgyYTc1MC5qcGc=","srcmobile":"https://resizing.flixster.com/H_01DJwgqQtq3M9GLavrM9_FL3g=/206x305/v2/https://resizing.flixster.com/c7fcjCvkHP4wiDlEdVRusMXCOws=/ems.cHJkLWVtcy1hc3NldHMvbW92aWVzLzAzOWI1YzkwLTNiODAtNDNmYy05MTA1LTViZjg4ZTgyYTc1MC5qcGc="},"primaryVideo":{"contentType":"PROMO","publicId":"phV7PJYm2ecP","mpxId":"2370671683662","thumbnail":{"url":"https://statcdn.fandango.com/MPX/image/NBCU_Fandango/881/715/WildRobot.jpg"},"title":"The Wild Robot: Final Trailer"},"ratingsCode":"PG","releaseDate":"Released Sep 27","duration":"1h 42m","showTrailerBtn":true,"showWatchlistBtn":true,"simplifiedAttr":"","title":"The Wild Robot","type":"Movie"}
    </script>
  </media-hero-color-manager-deprecated>
</div>

            
        </div>
        <div id="main-wrap">
            <div id="modules-wrap" data-curation="drawer">
                
                    <div class="media-scorecard no-border" data-adobe-id="media-scorecard" data-qa="section:media-scorecard">
    <media-scorecard
        data-MediaScorecardManager="mediaScorecard"
        hideaudiencescore="false"
        skeleton="panel"
    >
        <rt-img
            alt="poster image"
            loading="lazy"
            slot="posterImage"
            fallback="false"
            src="https://resizing.flixster.com/H_01DJwgqQtq3M9GLavrM9_FL3g=/206x305/v2/https://resizing.flixster.com/c7fcjCvkHP4wiDlEdVRusMXCOws=/ems.cHJkLWVtcy1hc3NldHMvbW92aWVzLzAzOWI1YzkwLTNiODAtNDNmYy05MTA1LTViZjg4ZTgyYTc1MC5qcGc="
        ></rt-img>
        <rt-button slot="criticsScoreIcon" data-MediaScorecardManager="overlayOpen:click" theme="transparent">
            <score-icon-critics
                certified="true"
                sentiment="POSITIVE"
                size="2.5"
            ></score-icon-critics>
        </rt-button>
        <rt-button slot="criticsScore" data-MediaScorecardManager="overlayOpen:click" theme="transparent">
            <rt-text size="1.375" style="--lineHeight: 1.25; --textColor: var(--grayDark3);" context="label">98%</rt-text>
        </rt-button>
        <rt-button slot="criticsScoreType" class="critics-score-type" data-MediaScorecardManager="overlayOpen:click" theme="transparent">
            <rt-text size="0.75">Tomatometer</rt-text>
        </rt-button>
        <rt-link slot="criticsReviews" size="0.75" href="/m/the_wild_robot/reviews">
            197 Reviews
        </rt-link>

        <rt-button slot="audienceScoreIcon" data-MediaScorecardManager="overlayOpen:click" theme="transparent">
            <score-icon-audience
                certified="true"
                size="2.5"
                sentiment="POSITIVE"
            ></score-icon-audience>
        </rt-button>
        <rt-button slot="audienceScore" data-MediaScorecardManager="overlayOpen:click" theme="transparent">
            <rt-text size="1.375" style="--lineHeight: 1.25; --textColor: var(--grayDark3);" context="label">98%</rt-text>
        </rt-button>
        <rt-button slot="audienceScoreType" class="audience-score-type" data-MediaScorecardManager="overlayOpen:click" theme="transparent">
            <rt-text size="0.75">Popcornmeter</rt-text>
        </rt-button>
        <rt-link slot="audienceReviews" size="0.75" href="/m/the_wild_robot/reviews?type=user">
            5,000+ Verified Ratings
        </rt-link>

        <div slot="description">

          <inline-tool-tip></inline-tool-tip>

          <drawer-more maxlines="2" skeleton="panel" status="closed" style="--display: flex;">
            <rt-text slot="content" size="1">
                The epic adventure follows the journey of a robot--ROZZUM unit 7134, &quot;Roz&quot; for short -- that is shipwrecked on an uninhabited island and must learn to adapt to the harsh surroundings, gradually building relationships with the animals on the island and becoming the adoptive parent of an orphaned gosling.
            </rt-text>
            <rt-link slot="ctaOpen">
                <rt-icon icon="down-open"></rt-icon>
            </rt-link>
            <rt-link slot="ctaClose">
                <rt-icon icon="up-open"></rt-icon>
            </rt-link>
          </drawer-more>
        </div>

        
            <affiliate-icon
                data-MediaScorecardManager="affiliateIcon"
                icon="fandango-at-home"
                slot="affiliateIcon"
            ></affiliate-icon>
            <rt-text
                context="label"
                data-MediaScorecardManager="affiliatePrimaryText"
                size="1"
                slot="affiliatePrimaryText"
            >Watch on Fandango at Home</rt-text>
            <rt-text
                data-MediaScorecardManager="affiliateSecondaryText"
                size="0.75"
                slot="affiliateSecondaryText"></rt-text>
            <rt-button
                arialabel="Buy The Wild Robot on Fandango at Home"
                data-MediaScorecardManager="affiliateCtaBtn:click"
                href="https://www.vudu.com/content/browse/details/The-Wild-Robot/3574835?cmp=rt_leaderboard"
                rel="noopener"
                shape="pill"
                slot="affiliateCtaBtn"
                target="_blank"
                theme="simplified"
            >
                Buy Now
            </rt-button>
            <div slot="adImpressions"></div>
        
    </media-scorecard>

    <media-scorecard-manager>
        <script
            id="media-scorecard-json"
            data-json="mediaScorecard"
            data-MediaHeroColorManager_DEPRECATED="mediaScorecardJson"
            type="application/json"
        >
            {"audienceScore":{"certifiedFresh":"certified","averageRating":"4.8","bandedRatingCount":"5,000+ Verified Ratings","likedCount":5599,"notLikedCount":98,"reviewCount":2228,"score":"98","scoreType":"VERIFIED","sentiment":"POSITIVE","certified":true,"reviewsPageUrl":"/m/the_wild_robot/reviews?type=user","scorePercent":"98%","title":"Popcornmeter"},"criticsScore":{"averageRating":"8.50","certified":true,"likedCount":193,"notLikedCount":4,"ratingCount":197,"reviewCount":197,"score":"98","sentiment":"POSITIVE","reviewsPageUrl":"/m/the_wild_robot/reviews","scorePercent":"98%","title":"Tomatometer"},"criticReviewHref":"/critics/self-submission/movie/dd36be73-6c5e-3b4b-94e2-4b62260e2808","cta":{"affiliate":"fandango-at-home","buttonStyle":{"backgroundColor":"#3478C1","textColor":"#FFFFFF"},"buttonText":"Buy Now","buttonAnnouncement":"Buy The Wild Robot on Fandango at Home","buttonUrl":"https://www.vudu.com/content/browse/details/The-Wild-Robot/3574835?cmp=rt_leaderboard","icon":"fandango-at-home","windowDate":"","windowText":"Watch on Fandango at Home"},"description":"The epic adventure follows the journey of a robot--ROZZUM unit 7134, \"Roz\" for short -- that is shipwrecked on an uninhabited island and must learn to adapt to the harsh surroundings, gradually building relationships with the animals on the island and becoming the adoptive parent of an orphaned gosling.","fallback":false,"hideAudienceScore":false,"overlay":{"audienceAll":{"certifiedFresh":"certified","averageRating":"4.8","bandedRatingCount":"5,000+ Ratings","likedCount":9169,"notLikedCount":244,"reviewCount":3568,"score":"97","scoreType":"ALL","sentiment":"POSITIVE","certified":true,"reviewsPageUrl":"/m/the_wild_robot/reviews?type=user","scorePercent":"97%","title":"Popcornmeter","scoreLinkUrl":"/m/the_wild_robot/reviews?type=user"},"audienceTitle":"Popcornmeter","audienceVerified":{"certifiedFresh":"certified","averageRating":"4.8","bandedRatingCount":"5,000+ Verified Ratings","likedCount":5599,"notLikedCount":98,"reviewCount":2228,"score":"98","scoreType":"VERIFIED","sentiment":"POSITIVE","certified":true,"reviewsPageUrl":"/m/the_wild_robot/reviews?type=user","scorePercent":"98%","title":"Popcornmeter","scoreLinkUrl":"/m/the_wild_robot/reviews?type=verified_audience"},"criticsAll":{"averageRating":"8.50","certified":true,"likedCount":193,"notLikedCount":4,"ratingCount":197,"reviewCount":197,"score":"98","sentiment":"POSITIVE","reviewsPageUrl":"/m/the_wild_robot/reviews","scorePercent":"98%","title":"Tomatometer","scoreLinkUrl":"/m/the_wild_robot/reviews","scoreLinkText":"197 Reviews"},"criticsTitle":"Tomatometer","criticsTop":{"averageRating":"8.60","certified":true,"likedCount":46,"notLikedCount":1,"ratingCount":47,"reviewCount":47,"score":"98","sentiment":"POSITIVE","reviewsPageUrl":"/m/the_wild_robot/reviews","scorePercent":"98%","title":"Tomatometer","scoreLinkUrl":"/m/the_wild_robot/reviews?type=top_critics","scoreLinkText":"47 Top Critic Reviews"},"hasAudienceAll":true,"hasAudienceVerified":true,"hasCriticsAll":true,"hasCriticsTop":true,"mediaType":"Movie","showScoreDetailsAudience":true,"learnMoreUrl":"https://editorial.rottentomatoes.com/article/introducing-verified-audience-score/"},"primaryImageUrl":"https://resizing.flixster.com/H_01DJwgqQtq3M9GLavrM9_FL3g=/206x305/v2/https://resizing.flixster.com/c7fcjCvkHP4wiDlEdVRusMXCOws=/ems.cHJkLWVtcy1hc3NldHMvbW92aWVzLzAzOWI1YzkwLTNiODAtNDNmYy05MTA1LTViZjg4ZTgyYTc1MC5qcGc="}
        </script>
    </media-scorecard-manager>
</div>

                
                    <section class="modules-nav" data-ModulesNavigationManager="navWrap">
    <modules-navigation-manager></modules-navigation-manager>

    <nav>
        <modules-navigation-carousel
            skeleton="panel"
            tilewidth="auto"
            data-ModulesNavigationManager="navCarousel"
        >
            
                
            
                
            
                
                    <a slot="tile" href="#where-to-watch">
                        <rt-tab data-ModulesNavigationManager="navTab">Where to Watch</rt-tab>
                    </a>
                
            
                
                    <a slot="tile" href="#what-to-know">
                        <rt-tab data-ModulesNavigationManager="navTab">What to Know</rt-tab>
                    </a>
                
            
                
            
                
            
                
                    <a slot="tile" href="#critics-reviews">
                        <rt-tab data-ModulesNavigationManager="navTab">Reviews</rt-tab>
                    </a>
                
            
                
            
                
            
                
                    <a slot="tile" href="#cast-and-crew">
                        <rt-tab data-ModulesNavigationManager="navTab">Cast &amp; Crew</rt-tab>
                    </a>
                
            
                
                    <a slot="tile" href="#movie-clips">
                        <rt-tab data-ModulesNavigationManager="navTab">Movie Clips</rt-tab>
                    </a>
                
            
                
                    <a slot="tile" href="#more-like-this">
                        <rt-tab data-ModulesNavigationManager="navTab">More Like This</rt-tab>
                    </a>
                
            
                
                    <a slot="tile" href="#news-and-guides">
                        <rt-tab data-ModulesNavigationManager="navTab">Related News</rt-tab>
                    </a>
                
            
                
                    <a slot="tile" href="#videos">
                        <rt-tab data-ModulesNavigationManager="navTab">Videos</rt-tab>
                    </a>
                
            
                
                    <a slot="tile" href="#photos">
                        <rt-tab data-ModulesNavigationManager="navTab">Photos</rt-tab>
                    </a>
                
            
                
            
                
            
                
                    <a slot="tile" href="#media-info">
                        <rt-tab data-ModulesNavigationManager="navTab">Media Info</rt-tab>
                    </a>
                
            
                
            
        </modules-navigation-carousel>
    </nav>
</section>

                
                    <div
  class="modules-layout"
  tabindex="-1"
  data-ModulesNavigationManager="content:focusin"
>
  
    <div
      id="where-to-watch"
      class="dom-anchor"
      data-ModulesNavigationManager="domAnchor"
    ></div>
  

  
<section
  aria-labelledby="where-to-watch-label"
  class="where-to-watch"
  data-adobe-id="where-to-watch"
  data-qa="section:where-to-watch"
>
  <div class="header-wrap">
    <h2 class="unset" id="where-to-watch-label">
      <rt-text
        context="heading"
        size="1.25"
        style="--textTransform: capitalize;"
      >Where to Watch</rt-text>
    </h2>
    <h3 class="unset">
      <rt-text
        context="heading"
        size="0.75"
        style="--textColor: var(--grayDark4); --letterSpacing: 1px; --textTransform: capitalize;"
      >
        The Wild Robot
      </rt-text>
    </h3>
  </div>

  <where-to-watch-manager>
    <script id="where-to-watch-json" data-json="whereToWatch" type="application/json">
        {"affiliates":[{"icon":"fandango-at-home","url":"https://www.vudu.com/content/browse/details/The-Wild-Robot/3574835?cmp=rt_where_to_watch","isSponsoredLink":false,"text":"Fandango at Home"},{"icon":"amazon-prime-video-us","url":"http://www.amazon.com/gp/product/B0DBZJ2LY3/ref=pv_ag_gcf?cmp=rt_where_to_watch&tag=rottetomao-20","isSponsoredLink":true,"text":"Prime Video"},{"icon":"apple-tv-us","url":"https://tv.apple.com/us/movie/the-wild-robot/umc.cmc.3vk9rngh0rrmpnyhv2qwzm582?action=play&cmp=rt_where_to_watch&itsct=RT&itscg=30200&at=10l9IP","isSponsoredLink":true,"text":"Apple TV"}],"affiliatesText":"Rent The Wild Robot on Fandango at Home, Prime Video, Apple TV, or buy it on Fandango at Home, Prime Video, Apple TV.","director":"Christopher Sanders","hasShowtimes":true,"justWatchMediaType":"movie","showtimesUrl":"https://www.fandango.com/the-wild-robot-2024-235359/movie-overview?a=13036","releaseYear":"2024","tarsSlug":"rt-affiliates-sort-order","title":"The Wild Robot"}
    </script>
  </where-to-watch-manager>

  <div hidden data-WhereToWatchManager="jwContainer"></div>
  <div hidden data-WhereToWatchManager="w2wContainer">
    <carousel-slider
      data-curation="rt-affiliates-sort-order"
      gap="15px"
      skeleton="panel"
      tilewidth="80px"
      excludepageindicators
    >
      
        <where-to-watch-meta
          affiliate="showtimes"
          data-qa="affiliate-item"
          href="https://www.fandango.com/the-wild-robot-2024-235359/movie-overview?a=13036"
          skeleton="panel"
          slot="tile"
        >
          <where-to-watch-bubble
            image="fandango"
            slot="bubble"
            tabindex="-1"
          ></where-to-watch-bubble>
          <span slot="license">In Theaters</span>
        </where-to-watch-meta>
      
      
        <where-to-watch-meta
          affiliate="fandango-at-home"
          data-qa="affiliate-item"
          href="https://www.vudu.com/content/browse/details/The-Wild-Robot/3574835?cmp=rt_where_to_watch"
          issponsoredlink="false"
          skeleton="panel"
          slot="tile"
        >
          <where-to-watch-bubble
            image="fandango-at-home"
            slot="bubble"
            tabindex="-1"
          ></where-to-watch-bubble>
          <span slot="license">Fandango at Home</span>
          <span slot="coverage"></span>
        </where-to-watch-meta>
      
        <where-to-watch-meta
          affiliate="amazon-prime-video-us"
          data-qa="affiliate-item"
          href="http://www.amazon.com/gp/product/B0DBZJ2LY3/ref=pv_ag_gcf?cmp=rt_where_to_watch&amp;tag=rottetomao-20"
          issponsoredlink="true"
          skeleton="panel"
          slot="tile"
        >
          <where-to-watch-bubble
            image="amazon-prime-video-us"
            slot="bubble"
            tabindex="-1"
          ></where-to-watch-bubble>
          <span slot="license">Prime Video</span>
          <span slot="coverage"></span>
        </where-to-watch-meta>
      
        <where-to-watch-meta
          affiliate="apple-tv-us"
          data-qa="affiliate-item"
          href="https://tv.apple.com/us/movie/the-wild-robot/umc.cmc.3vk9rngh0rrmpnyhv2qwzm582?action=play&amp;cmp=rt_where_to_watch&amp;itsct=RT&amp;itscg=30200&amp;at=10l9IP"
          issponsoredlink="true"
          skeleton="panel"
          slot="tile"
        >
          <where-to-watch-bubble
            image="apple-tv-us"
            slot="bubble"
            tabindex="-1"
          ></where-to-watch-bubble>
          <span slot="license">Apple TV</span>
          <span slot="coverage"></span>
        </where-to-watch-meta>
      
    </carousel-slider>

    <p class="affiliates-text">Rent The Wild Robot on Fandango at Home, Prime Video, Apple TV, or buy it on Fandango at Home, Prime Video, Apple TV. </p>
  </div>
</section>

</div>

                
                    <div
  class="modules-layout"
  tabindex="-1"
  data-ModulesNavigationManager="content:focusin"
>
  
    <div
      id="what-to-know"
      class="dom-anchor"
      data-ModulesNavigationManager="domAnchor"
    ></div>
  

  
<section
  aria-labelledby="what-to-know-label"
  class="what-to-know"
  data-adobe-id="what-to-know"
  data-qa="section:what-to-know"
>
  <div class="header-wrap">
    <rt-text context="heading" size="0.75" style="--textColor: var(--grayDark4); --letterSpacing: 1px;--textTransform: capitalize;">
      The Wild Robot
    </rt-text>
    <h2 class="unset" id="what-to-know-label">
      <rt-text context="heading" size="1.25" style="--textTransform: capitalize;">What to Know</rt-text>
    </h2>
  </div>

  <div class="content">
    
    

    
      <div id="critics-consensus" class="consensus">
        <rt-text context="heading">
          <score-icon-critics
            certified="true"
            sentiment="POSITIVE"
            size="1"
          ></score-icon-critics>
          Critics Consensus
        </rt-text>
        <p>A simple tale told with great sophistication, <em>The Wild Robot</em> is wondrous entertainment that dazzles the eye while filling your heart to the brim.</p>
        <a href="/m/the_wild_robot/reviews">Read Critics Reviews</a>
      </div>
    

    
      <hr />
    

    
      <div id="audience-consensus" class="consensus">
        <rt-text context="heading">
          <score-icon-audience
            certified="true"
            size="1"
            sentiment="POSITIVE"
          ></score-icon-audience>
          Audience Says
        </rt-text>
        <p>Adapted from the bestselling novel, DreamWorks’ <em>The Wild Robot</em> will steal hearts both young and old.</p>
        <a href="/m/the_wild_robot/reviews?type=user">Read Audience Reviews</a>
      </div>
    
  </div>
</section>

</div>

                
                    <ad-unit hidden unitdisplay="mobile" unittype="interscroller" noretry data-AdUnitManager="adUnit:interscrollerinstantiated">
  <aside slot="adInject" class="center mobile-interscroller"></aside>
</ad-unit>
                
                    <ad-unit hidden unitdisplay="desktop" unittype="opbannerone">
  <div slot="adInject" class="banner-ad"></div>
</ad-unit>
                
                    <div
  class="modules-layout"
  tabindex="-1"
  data-ModulesNavigationManager="content:focusin"
>
  
    <div
      id="critics-reviews"
      class="dom-anchor"
      data-ModulesNavigationManager="domAnchor"
    ></div>
  

  
<section
  aria-labelledby="critics-reviews-label"
  class="critics-reviews"
  data-adobe-id="critics-reviews"
  data-qa="section:critics-reviews"
>
  <div class="header-wrap">
    <h2 class="unset" id="critics-reviews-label">
      <rt-text size="1.25" context="heading" data-qa="title">Critics Reviews</rt-text>
    </h2>
    <rt-link href="/m/the_wild_robot/reviews" size="0.875" context="label" data-qa="view-all-link">
      View All (197)
      <sr-text>Critics Reviews</sr-text>
    </rt-link>
  </div>

  <div class="content-wrap">
    <carousel-slider tilewidth="80%,45%" skeleton="panel" data-qa="carousel">

      
        <media-review-card-critic slot="tile" istopreview="true" data-qa="critic-review-tile">
          <rt-link
            aria-hidden="true"
            href="/critics/kevin-maher"
            slot="displayImage"
            style="--textColor: var(--grayDark2)"
            tabindex="-1"
            data-qa="critic-picture"
          >
            <img
              src="https://resizing.flixster.com/gLS3z94Ye3kSDyuAt5eOhvNdCBI=/fit-in/128x128/v2/http://resizing.flixster.com/rP32xHVMAhh8koYrDkmKQJ-HD0Y=/128x128/v1.YzszNDc1O3A7MjAwMjU7MjA0ODszNDA7MzQw"
              alt="Critic's profile"
            />
          </rt-link>
          <rt-link
            href="/critics/kevin-maher"
            slot="displayName"
            style="--textColor: var(--grayDark2)"
            data-qa="critic-link"
          >
            <rt-text
              context="label"
              size="0.875"
              style="--lineHeight: 1.25; --textColor: var(--grayDark3);"
            >
              Kevin Maher
            </rt-text>
          </rt-link>
          <rt-link
            href="/critics/source/823"
            slot="publicationName"
            style="--textColor: var(--grayDark2)"
            data-qa="source-link"
          >
            <rt-text size="0.75">
              Times (UK)
            </rt-text>
          </rt-link>
          <drawer-more
            maxlines="6"
            skeleton="panel"
            slot="reviewQuote"
            status="closed"
          >
            <rt-text
              size="0.875"
              slot="content"
              data-qa="review-text"
            >
            The stamp of human warmth lifts the film far above the familiar robot cuddle-fest it could easily have been.
            </rt-text>
          </drawer-more>
          <score-icon-critics
            sentiment="POSITIVE"
            size="1"
            slot="scoreIcon"
            verticalalign="sub"
          >
          </score-icon-critics>
          <rt-text
            size="0.75"
            slot="originalScore"
            style="--textColor: #62686F"
            data-qa="review-rating"
          >
            <span>Rated: 4/5</span>
          </rt-text>
          <rt-text
            size="0.75"
            slot="createDate"
            style="--textColor: #62686F"
            data-qa="review-date"
          >
            <span> Oct 19, 2024 </span>
          </rt-text>
          <rt-link
            href="https://www.thetimes.com/culture/film/article/the-wild-robot-review-lupita-nyongo-0zrxsmv0c"
            slot="editorialUrl"
            size="0.875"
            target="_blank"
            data-qa="full-review-link"
          >Full Review</rt-link>
        </media-review-card-critic>
      
        <media-review-card-critic slot="tile" istopreview="true" data-qa="critic-review-tile">
          <rt-link
            aria-hidden="true"
            href="/critics/peter-travers"
            slot="displayImage"
            style="--textColor: var(--grayDark2)"
            tabindex="-1"
            data-qa="critic-picture"
          >
            <img
              src="https://resizing.flixster.com/lFeySyhKCgBC_0kzodo6wbJwh4Y=/fit-in/128x128/v2/http://resizing.flixster.com/R325FURNRZdkOBOoqwy5ZcMRZ8w=/128x128/v1.YzszODEwO3A7MjAwMjU7MjA0ODs4NzY7ODM0"
              alt="Critic's profile"
            />
          </rt-link>
          <rt-link
            href="/critics/peter-travers"
            slot="displayName"
            style="--textColor: var(--grayDark2)"
            data-qa="critic-link"
          >
            <rt-text
              context="label"
              size="0.875"
              style="--lineHeight: 1.25; --textColor: var(--grayDark3);"
            >
              Peter Travers
            </rt-text>
          </rt-link>
          <rt-link
            href="/critics/source/3839"
            slot="publicationName"
            style="--textColor: var(--grayDark2)"
            data-qa="source-link"
          >
            <rt-text size="0.75">
              ABC News
            </rt-text>
          </rt-link>
          <drawer-more
            maxlines="6"
            skeleton="panel"
            slot="reviewQuote"
            status="closed"
          >
            <rt-text
              size="0.875"
              slot="content"
              data-qa="review-text"
            >
            Family audiences rejoice! The Oscar for Best Animated Film belongs right here in this enchanting tale of a robot, voiced by the amazing Lupita Nyong&#39;o, who finds herself playing mother to a baby goose. The result is spectacular in every sense of the word.
            </rt-text>
          </drawer-more>
          <score-icon-critics
            sentiment="POSITIVE"
            size="1"
            slot="scoreIcon"
            verticalalign="sub"
          >
          </score-icon-critics>
          <rt-text
            size="0.75"
            slot="originalScore"
            style="--textColor: #62686F"
            data-qa="review-rating"
          >
            <span></span>
          </rt-text>
          <rt-text
            size="0.75"
            slot="createDate"
            style="--textColor: #62686F"
            data-qa="review-date"
          >
            <span> Oct 18, 2024 </span>
          </rt-text>
          <rt-link
            href="https://abcnews.go.com/GMA/Culture/wild-robot-review-hooked-1st-scene/story?id=114902942"
            slot="editorialUrl"
            size="0.875"
            target="_blank"
            data-qa="full-review-link"
          >Full Review</rt-link>
        </media-review-card-critic>
      
        <media-review-card-critic slot="tile" istopreview="true" data-qa="critic-review-tile">
          <rt-link
            aria-hidden="true"
            href="/critics/donald-clarke"
            slot="displayImage"
            style="--textColor: var(--grayDark2)"
            tabindex="-1"
            data-qa="critic-picture"
          >
            <img
              src="https://resizing.flixster.com/x9JBLBL6Fr6oOSQSciJw60l20xU=/fit-in/128x128/v2/http://resizing.flixster.com/bPrza4KPi9OL07TwVgAKBHtTtns=/128x128/v1.YzsyNzkwO2c7MjAwMjU7MjA0ODsxNTA7MTUw"
              alt="Critic's profile"
            />
          </rt-link>
          <rt-link
            href="/critics/donald-clarke"
            slot="displayName"
            style="--textColor: var(--grayDark2)"
            data-qa="critic-link"
          >
            <rt-text
              context="label"
              size="0.875"
              style="--lineHeight: 1.25; --textColor: var(--grayDark3);"
            >
              Donald Clarke
            </rt-text>
          </rt-link>
          <rt-link
            href="/critics/source/228"
            slot="publicationName"
            style="--textColor: var(--grayDark2)"
            data-qa="source-link"
          >
            <rt-text size="0.75">
              Irish Times
            </rt-text>
          </rt-link>
          <drawer-more
            maxlines="6"
            skeleton="panel"
            slot="reviewQuote"
            status="closed"
          >
            <rt-text
              size="0.875"
              slot="content"
              data-qa="review-text"
            >
            All this is represented in gorgeous, fluid images that incline towards the painterly. Voice work is spot on. Nyong’o combines the otherworldly with an audible emotional catch.
            </rt-text>
          </drawer-more>
          <score-icon-critics
            sentiment="POSITIVE"
            size="1"
            slot="scoreIcon"
            verticalalign="sub"
          >
          </score-icon-critics>
          <rt-text
            size="0.75"
            slot="originalScore"
            style="--textColor: #62686F"
            data-qa="review-rating"
          >
            <span>Rated: 5/5</span>
          </rt-text>
          <rt-text
            size="0.75"
            slot="createDate"
            style="--textColor: #62686F"
            data-qa="review-date"
          >
            <span> Oct 18, 2024 </span>
          </rt-text>
          <rt-link
            href="https://www.irishtimes.com/culture/film/review/2024/10/17/the-wild-robot-this-superb-family-film-could-become-a-classic/"
            slot="editorialUrl"
            size="0.875"
            target="_blank"
            data-qa="full-review-link"
          >Full Review</rt-link>
        </media-review-card-critic>
      
        <media-review-card-critic slot="tile" istopreview="false" data-qa="critic-review-tile">
          <rt-link
            aria-hidden="true"
            href="/critics/robert-roten"
            slot="displayImage"
            style="--textColor: var(--grayDark2)"
            tabindex="-1"
            data-qa="critic-picture"
          >
            <img
              src="https://resizing.flixster.com/2wMPngIw89u4GrlQbeFnPX-OBQE=/fit-in/128x128/v2/http://resizing.flixster.com/AuuF9NlmZmE1OrY4sy0pqBPdqZI=/72x72/v1.YzsyMDI2O2o7MjAwMjU7MjA0ODs3Mjs3Mg"
              alt="Critic's profile"
            />
          </rt-link>
          <rt-link
            href="/critics/robert-roten"
            slot="displayName"
            style="--textColor: var(--grayDark2)"
            data-qa="critic-link"
          >
            <rt-text
              context="label"
              size="0.875"
              style="--lineHeight: 1.25; --textColor: var(--grayDark3);"
            >
              Robert Roten
            </rt-text>
          </rt-link>
          <rt-link
            href="/critics/source/254"
            slot="publicationName"
            style="--textColor: var(--grayDark2)"
            data-qa="source-link"
          >
            <rt-text size="0.75">
              Laramie Movie Scope
            </rt-text>
          </rt-link>
          <drawer-more
            maxlines="6"
            skeleton="panel"
            slot="reviewQuote"
            status="closed"
          >
            <rt-text
              size="0.875"
              slot="content"
              data-qa="review-text"
            >
            The story about an outcast goose who proves his worth, a fox with a heart of gold and a robot who greatly exceeds its programming to become human is very compelling. The characters are very convincing and the artwork is excellent.
            </rt-text>
          </drawer-more>
          <score-icon-critics
            sentiment="POSITIVE"
            size="1"
            slot="scoreIcon"
            verticalalign="sub"
          >
          </score-icon-critics>
          <rt-text
            size="0.75"
            slot="originalScore"
            style="--textColor: #62686F"
            data-qa="review-rating"
          >
            <span>Rated: A</span>
          </rt-text>
          <rt-text
            size="0.75"
            slot="createDate"
            style="--textColor: #62686F"
            data-qa="review-date"
          >
            <span> Oct 19, 2024 </span>
          </rt-text>
          <rt-link
            href="http://www.lariat.org/AtTheMovies/new/wildrobot.html"
            slot="editorialUrl"
            size="0.875"
            target="_blank"
            data-qa="full-review-link"
          >Full Review</rt-link>
        </media-review-card-critic>
      
        <media-review-card-critic slot="tile" istopreview="false" data-qa="critic-review-tile">
          <rt-link
            aria-hidden="true"
            href="/critics/alan-corr"
            slot="displayImage"
            style="--textColor: var(--grayDark2)"
            tabindex="-1"
            data-qa="critic-picture"
          >
            <img
              src="https://images.fandango.com/cms/assets/5b6ff500-1663-11ec-ae31-05a670d2d590--rtactordefault.png"
              alt="Critic's profile"
            />
          </rt-link>
          <rt-link
            href="/critics/alan-corr"
            slot="displayName"
            style="--textColor: var(--grayDark2)"
            data-qa="critic-link"
          >
            <rt-text
              context="label"
              size="0.875"
              style="--lineHeight: 1.25; --textColor: var(--grayDark3);"
            >
              Alan Corr
            </rt-text>
          </rt-link>
          <rt-link
            href="/critics/source/1149"
            slot="publicationName"
            style="--textColor: var(--grayDark2)"
            data-qa="source-link"
          >
            <rt-text size="0.75">
              RTÉ (Ireland)
            </rt-text>
          </rt-link>
          <drawer-more
            maxlines="6"
            skeleton="panel"
            slot="reviewQuote"
            status="closed"
          >
            <rt-text
              size="0.875"
              slot="content"
              data-qa="review-text"
            >
            It’s sweet, maybe too sweet, but it doesn’t skirt the harsh realities of nature and the fight for survival. 
            </rt-text>
          </drawer-more>
          <score-icon-critics
            sentiment="POSITIVE"
            size="1"
            slot="scoreIcon"
            verticalalign="sub"
          >
          </score-icon-critics>
          <rt-text
            size="0.75"
            slot="originalScore"
            style="--textColor: #62686F"
            data-qa="review-rating"
          >
            <span>Rated: 4/5</span>
          </rt-text>
          <rt-text
            size="0.75"
            slot="createDate"
            style="--textColor: #62686F"
            data-qa="review-date"
          >
            <span> Oct 19, 2024 </span>
          </rt-text>
          <rt-link
            href="https://www.rte.ie/entertainment/2024/1017/1475809-the-wild-robot-a-visually-stunning-lesson-in-love/"
            slot="editorialUrl"
            size="0.875"
            target="_blank"
            data-qa="full-review-link"
          >Full Review</rt-link>
        </media-review-card-critic>
      
        <media-review-card-critic slot="tile" istopreview="false" data-qa="critic-review-tile">
          <rt-link
            aria-hidden="true"
            href="/critics/hilary-a-white"
            slot="displayImage"
            style="--textColor: var(--grayDark2)"
            tabindex="-1"
            data-qa="critic-picture"
          >
            <img
              src="https://resizing.flixster.com/MWyWlEDetuIgNRNA1ArTOBAxdyc=/fit-in/128x128/v2/http://resizing.flixster.com/oFAyrT7531hv33bE3WoLipwHV8Q=/128x128/v1.YzsyOTM2O2o7MjAwMjU7MjA0ODszOTk7Mzk5"
              alt="Critic's profile"
            />
          </rt-link>
          <rt-link
            href="/critics/hilary-a-white"
            slot="displayName"
            style="--textColor: var(--grayDark2)"
            data-qa="critic-link"
          >
            <rt-text
              context="label"
              size="0.875"
              style="--lineHeight: 1.25; --textColor: var(--grayDark3);"
            >
              Hilary A White
            </rt-text>
          </rt-link>
          <rt-link
            href="/critics/source/2743"
            slot="publicationName"
            style="--textColor: var(--grayDark2)"
            data-qa="source-link"
          >
            <rt-text size="0.75">
              Sunday Independent (Ireland)
            </rt-text>
          </rt-link>
          <drawer-more
            maxlines="6"
            skeleton="panel"
            slot="reviewQuote"
            status="closed"
          >
            <rt-text
              size="0.875"
              slot="content"
              data-qa="review-text"
            >
            Animated adventures are rarely as tender, captivating and visually spectacular as this jewel based on the best-selling children’s book by Peter Brown. 
            </rt-text>
          </drawer-more>
          <score-icon-critics
            sentiment="POSITIVE"
            size="1"
            slot="scoreIcon"
            verticalalign="sub"
          >
          </score-icon-critics>
          <rt-text
            size="0.75"
            slot="originalScore"
            style="--textColor: #62686F"
            data-qa="review-rating"
          >
            <span>Rated: 5/5</span>
          </rt-text>
          <rt-text
            size="0.75"
            slot="createDate"
            style="--textColor: #62686F"
            data-qa="review-date"
          >
            <span> Oct 19, 2024 </span>
          </rt-text>
          <rt-link
            href="https://www.independent.ie/entertainment/movies/movie-reviews/the-wild-robot-review-tender-captivating-animation-is-a-visually-spectacular-adventure/a1597793638.html"
            slot="editorialUrl"
            size="0.875"
            target="_blank"
            data-qa="full-review-link"
          >Full Review</rt-link>
        </media-review-card-critic>
      
        <tile-view-more
          aspect="fill"
          background="mediaHero"
          slot="tile"
        >
          <rt-button
            href="/m/the_wild_robot/reviews"
            shape="pill"
            theme="transparent-lighttext"
          >
            Read all reviews
          </rt-button>
        </tile-view-more>
    </carousel-slider>
  </div>
</section>

</div>

                
                    

<section
  aria-labelledby="audience-reviews-label" 
  class="audience-reviews"
  data-adobe-id="audience-reviews"
  data-qa="section:audience-reviews"
>
  <div class="header-wrap">
    <h2 class="unset" id="audience-reviews-label">
      <rt-text size="1.25" context="heading" data-qa="title">Audience Reviews</rt-text>
    </h2>
    <rt-link
      class=""
      context="label"
      href="/m/the_wild_robot/reviews?type=user"
      size="0.875"
      data-qa="view-all-link"
    >
      View All (1000+)
      <sr-text>audience reviews</sr-text>
    </rt-link>
  </div>

  <div class="content-wrap">
    <carousel-slider tilewidth="80%,45%" skeleton="panel" data-qa="carousel">
  
    <media-review-card-audience slot="tile" isverifiedreview="true" data-qa="audience-review-tile">
      <rt-text
        size="0.875"
        context="label"
        slot="displayName"
        style="--letterSpacing: 1px;"
        data-qa="user-name"
      >
        Manuel
      </rt-text>
      <drawer-more
        maxlines="4"
        skeleton="panel"
        slot="reviewQuote"
        status="closed"
      >
        <rt-text
          size="0.875"
          slot="content"
          data-qa="review-text"
        >
        Super cute and moving
        </rt-text>
      </drawer-more>
      <rt-text
        size="0.75"
        slot="originalScore"
        data-qa="review-rating"
      >
        <span aria-hidden="true">Rated 5/5 Stars &bull;&nbsp;</span>
        <sr-text>Rated 5 out of 5 stars</sr-text>
      </rt-text>
      <rt-text
        size="0.75"
        slot="createDate"
        style="--textColor: #62686F"
        data-qa="review-date"
      >
        <span>10/20/24</span>
      </rt-text>
      <rt-link
        data-MediaAudienceReviewsManager="fullReviewBtn:click"
        data-rating-id="9ce974b1-b61f-4f4c-9d4e-e053631be833"
        size="0.875"
        slot="fullReviewBtn"
        data-qa="full-review-btn"
      >
        Full Review
      </rt-link>
    </media-review-card-audience>
  
    <media-review-card-audience slot="tile" isverifiedreview="true" data-qa="audience-review-tile">
      <rt-text
        size="0.875"
        context="label"
        slot="displayName"
        style="--letterSpacing: 1px;"
        data-qa="user-name"
      >
        Stefan B
      </rt-text>
      <drawer-more
        maxlines="4"
        skeleton="panel"
        slot="reviewQuote"
        status="closed"
      >
        <rt-text
          size="0.875"
          slot="content"
          data-qa="review-text"
        >
        Really great style and a touching story!
        </rt-text>
      </drawer-more>
      <rt-text
        size="0.75"
        slot="originalScore"
        data-qa="review-rating"
      >
        <span aria-hidden="true">Rated 5/5 Stars &bull;&nbsp;</span>
        <sr-text>Rated 5 out of 5 stars</sr-text>
      </rt-text>
      <rt-text
        size="0.75"
        slot="createDate"
        style="--textColor: #62686F"
        data-qa="review-date"
      >
        <span>10/20/24</span>
      </rt-text>
      <rt-link
        data-MediaAudienceReviewsManager="fullReviewBtn:click"
        data-rating-id="4842fe37-885f-413d-ba2a-11ed27a71656"
        size="0.875"
        slot="fullReviewBtn"
        data-qa="full-review-btn"
      >
        Full Review
      </rt-link>
    </media-review-card-audience>
  
    <media-review-card-audience slot="tile" isverifiedreview="true" data-qa="audience-review-tile">
      <rt-text
        size="0.875"
        context="label"
        slot="displayName"
        style="--letterSpacing: 1px;"
        data-qa="user-name"
      >
        Barry
      </rt-text>
      <drawer-more
        maxlines="4"
        skeleton="panel"
        slot="reviewQuote"
        status="closed"
      >
        <rt-text
          size="0.875"
          slot="content"
          data-qa="review-text"
        >
        This movie, adapted from the novel of the same name, is a delightful romp which will encourage children&#39;s imagination while resonating with parents. Filled with themes of love and loss, who is family, what it means to be accepted, and how to be supportive, this movie is filled with laughs and whimsical animation. My daughter and I, who watched this movie together, highly recommend this movie!
        </rt-text>
      </drawer-more>
      <rt-text
        size="0.75"
        slot="originalScore"
        data-qa="review-rating"
      >
        <span aria-hidden="true">Rated 5/5 Stars &bull;&nbsp;</span>
        <sr-text>Rated 5 out of 5 stars</sr-text>
      </rt-text>
      <rt-text
        size="0.75"
        slot="createDate"
        style="--textColor: #62686F"
        data-qa="review-date"
      >
        <span>10/20/24</span>
      </rt-text>
      <rt-link
        data-MediaAudienceReviewsManager="fullReviewBtn:click"
        data-rating-id="a9c7a3a1-b4a7-4270-ba6b-90fd3f3d217b"
        size="0.875"
        slot="fullReviewBtn"
        data-qa="full-review-btn"
      >
        Full Review
      </rt-link>
    </media-review-card-audience>
  
    <media-review-card-audience slot="tile" isverifiedreview="true" data-qa="audience-review-tile">
      <rt-text
        size="0.875"
        context="label"
        slot="displayName"
        style="--letterSpacing: 1px;"
        data-qa="user-name"
      >
        Nicole H
      </rt-text>
      <drawer-more
        maxlines="4"
        skeleton="panel"
        slot="reviewQuote"
        status="closed"
      >
        <rt-text
          size="0.875"
          slot="content"
          data-qa="review-text"
        >
        funny, cute, with a great meaning
        </rt-text>
      </drawer-more>
      <rt-text
        size="0.75"
        slot="originalScore"
        data-qa="review-rating"
      >
        <span aria-hidden="true">Rated 5/5 Stars &bull;&nbsp;</span>
        <sr-text>Rated 5 out of 5 stars</sr-text>
      </rt-text>
      <rt-text
        size="0.75"
        slot="createDate"
        style="--textColor: #62686F"
        data-qa="review-date"
      >
        <span>10/20/24</span>
      </rt-text>
      <rt-link
        data-MediaAudienceReviewsManager="fullReviewBtn:click"
        data-rating-id="0873e791-5fe9-4651-8fa6-8b1de4c03fc1"
        size="0.875"
        slot="fullReviewBtn"
        data-qa="full-review-btn"
      >
        Full Review
      </rt-link>
    </media-review-card-audience>
  
    <media-review-card-audience slot="tile" isverifiedreview="true" data-qa="audience-review-tile">
      <rt-text
        size="0.875"
        context="label"
        slot="displayName"
        style="--letterSpacing: 1px;"
        data-qa="user-name"
      >
        Super Genius
      </rt-text>
      <drawer-more
        maxlines="4"
        skeleton="panel"
        slot="reviewQuote"
        status="closed"
      >
        <rt-text
          size="0.875"
          slot="content"
          data-qa="review-text"
        >
        The plot,  the characters, and the animation were all terrific in this heartwarming story of love and selflessness.
        </rt-text>
      </drawer-more>
      <rt-text
        size="0.75"
        slot="originalScore"
        data-qa="review-rating"
      >
        <span aria-hidden="true">Rated 5/5 Stars &bull;&nbsp;</span>
        <sr-text>Rated 5 out of 5 stars</sr-text>
      </rt-text>
      <rt-text
        size="0.75"
        slot="createDate"
        style="--textColor: #62686F"
        data-qa="review-date"
      >
        <span>10/20/24</span>
      </rt-text>
      <rt-link
        data-MediaAudienceReviewsManager="fullReviewBtn:click"
        data-rating-id="ef105b19-a1c9-4d82-a359-12fee1c11812"
        size="0.875"
        slot="fullReviewBtn"
        data-qa="full-review-btn"
      >
        Full Review
      </rt-link>
    </media-review-card-audience>
  
    <media-review-card-audience slot="tile" isverifiedreview="true" data-qa="audience-review-tile">
      <rt-text
        size="0.875"
        context="label"
        slot="displayName"
        style="--letterSpacing: 1px;"
        data-qa="user-name"
      >
        Connor
      </rt-text>
      <drawer-more
        maxlines="4"
        skeleton="panel"
        slot="reviewQuote"
        status="closed"
      >
        <rt-text
          size="0.875"
          slot="content"
          data-qa="review-text"
        >
        Absolute emotional rollercoaster in the best way possible.
        </rt-text>
      </drawer-more>
      <rt-text
        size="0.75"
        slot="originalScore"
        data-qa="review-rating"
      >
        <span aria-hidden="true">Rated 5/5 Stars &bull;&nbsp;</span>
        <sr-text>Rated 5 out of 5 stars</sr-text>
      </rt-text>
      <rt-text
        size="0.75"
        slot="createDate"
        style="--textColor: #62686F"
        data-qa="review-date"
      >
        <span>10/20/24</span>
      </rt-text>
      <rt-link
        data-MediaAudienceReviewsManager="fullReviewBtn:click"
        data-rating-id="e92e676a-4633-41e8-b629-f84bb3f60356"
        size="0.875"
        slot="fullReviewBtn"
        data-qa="full-review-btn"
      >
        Full Review
      </rt-link>
    </media-review-card-audience>
  
  <tile-view-more
    aspect="fill"
    background="mediaHero"
    slot="tile"
  >
    <rt-button
      href="/m/the_wild_robot/reviews?type=user"
      shape="pill"
      theme="transparent-lighttext"
    >
      Read all reviews
    </rt-button>
  </tile-view-more>
</carousel-slider>

  </div>

  <media-audience-reviews-manager>
    <script type="application/json" data-json="reviewsData">{"audienceScore":{"certifiedFresh":"certified","reviewCount":2228,"score":"98","sentiment":"POSITIVE","certified":true,"scorePercent":"98%"},"criticsScore":{"certified":true,"score":"98","sentiment":"POSITIVE","scorePercent":"98%"},"emptyMessage":"There are no Verified Audience reviews for The Wild Robot yet.","linkCss":"","partial":"pages/_shared/mediaAudienceReviewsCarousel.html","ratingsData":{"emsId":"dd36be73-6c5e-3b4b-94e2-4b62260e2808","isPreRelease":false},"reviews":[{"displayDate":"10/20/24","displayName":"Manuel","isVerified":true,"ratingId":"9ce974b1-b61f-4f4c-9d4e-e053631be833","ratingRange":"Rated 5/5 Stars &bull;&nbsp;","ratingRangeA11y":"Rated 5 out of 5 stars","review":"Super cute and moving"},{"displayDate":"10/20/24","displayName":"Stefan B","isVerified":true,"ratingId":"4842fe37-885f-413d-ba2a-11ed27a71656","ratingRange":"Rated 5/5 Stars &bull;&nbsp;","ratingRangeA11y":"Rated 5 out of 5 stars","review":"Really great style and a touching story!"},{"displayDate":"10/20/24","displayName":"Barry","isVerified":true,"ratingId":"a9c7a3a1-b4a7-4270-ba6b-90fd3f3d217b","ratingRange":"Rated 5/5 Stars &bull;&nbsp;","ratingRangeA11y":"Rated 5 out of 5 stars","review":"This movie, adapted from the novel of the same name, is a delightful romp which will encourage children's imagination while resonating with parents. Filled with themes of love and loss, who is family, what it means to be accepted, and how to be supportive, this movie is filled with laughs and whimsical animation. My daughter and I, who watched this movie together, highly recommend this movie!"},{"displayDate":"10/20/24","displayName":"Nicole H","isVerified":true,"ratingId":"0873e791-5fe9-4651-8fa6-8b1de4c03fc1","ratingRange":"Rated 5/5 Stars &bull;&nbsp;","ratingRangeA11y":"Rated 5 out of 5 stars","review":"funny, cute, with a great meaning"},{"displayDate":"10/20/24","displayName":"Super Genius","isVerified":true,"ratingId":"ef105b19-a1c9-4d82-a359-12fee1c11812","ratingRange":"Rated 5/5 Stars &bull;&nbsp;","ratingRangeA11y":"Rated 5 out of 5 stars","review":"The plot,  the characters, and the animation were all terrific in this heartwarming story of love and selflessness."},{"displayDate":"10/20/24","displayName":"Connor","isVerified":true,"ratingId":"e92e676a-4633-41e8-b629-f84bb3f60356","ratingRange":"Rated 5/5 Stars &bull;&nbsp;","ratingRangeA11y":"Rated 5 out of 5 stars","review":"Absolute emotional rollercoaster in the best way possible."}],"reviewCount":2228,"reviewsUrl":"/m/the_wild_robot/reviews?type=user","title":"The Wild Robot","viewMoreText":"View All (1000+)"}</script>
  </media-audience-reviews-manager>
</section>


                
                    <section
  aria-labelledby="rate-and-review-label"
  class="rate-and-review"
  data-adobe-id="rate-and-review"
  data-qa="section:rate-and-review"
>
  <rate-and-review-module-manager>
    <script data-json="rateAndReviewModule" type="application/json">{"emsId":"dd36be73-6c5e-3b4b-94e2-4b62260e2808","releaseDate":"Sep 27, 2024","mediaType":"movie","title":"The Wild Robot"}</script>
  </rate-and-review-module-manager>

  <div class="header-wrap">
    <rt-text
      context="heading"
      size="0.75"
      style="--textColor: #62686F; --letterSpacing: 1px; --textTransform: capitalize;"
    >
      The Wild Robot
    </rt-text>
    <h2 class="unset" id="rate-and-review-label">
      <rt-text size="1.25" context="heading">My Rating</rt-text>
    </h2>
  </div>

  <div class="content">
    <rate-and-review-module
      data-RateAndReviewModuleManager="rateAndReviewModule"
      skeleton="panel"
      status="unrated"
    >
      <rating-stars-group
        data-RateAndReviewModuleManager="stars:changed"
        data-RateAndReviewOverlayManager="moduleStars"
        aria-labelledby="ratingStarsLabel"
        isselectable
        size="2.75,2"
        slot="rating">
      </rating-stars-group>
      <rating-descriptions
        context="label"
        data-RateAndReviewModuleManager="ratingDescriptions"
        size="1"
        slot="description"
        hidden></rating-descriptions>
      <drawer-more maxlines="2" slot="reviewQuote" status="closed">
        <rt-text
          data-RateAndReviewModuleManager="userReview"
          data-RateAndReviewOverlayManager="moduleReview"
          size="0.875"
          slot="content"
        ></rt-text>
        <rt-link slot="ctaOpen" size="0.875" context="label">Read More</rt-link>
        <rt-link slot="ctaClose" size="0.875" context="label">Read Less</rt-link>
      </drawer-more>

      <rt-button
        data-RateAndReviewModuleManager="rateBtn:click"
        shape="pill"
        size="1"
        slot="ctaRate"
      > POST RATING </rt-button>
      <rt-button
        data-RateAndReviewModuleManager="writeReviewBtn:click"
        size="1"
        slot="ctaReview"
        theme="transparent"
      > WRITE A REVIEW </rt-button>
      <rt-button
        data-RateAndReviewModuleManager="editReviewBtn:click"
        size="1"
        slot="ctaEdit"
        theme="transparent"
      > EDIT REVIEW </rt-button>
    </rate-and-review-module>
  </div>

  <rate-and-review-overlay-manager
    data-RateAndReviewModuleManager="overlayManager:error,success"
  ></rate-and-review-overlay-manager>
</section>

                
                    <div
  class="modules-layout"
  tabindex="-1"
  data-ModulesNavigationManager="content:focusin"
>
  
    <div
      id="cast-and-crew"
      class="dom-anchor"
      data-ModulesNavigationManager="domAnchor"
    ></div>
  

  
<section
  aria-labelledby="cast-and-crew-label"
  class="cast-and-crew"
  data-adobe-id="cast-and-crew"
  data-qa="section:cast-and-crew"
>
  <div class="header-wrap">
    <h2 class="unset" id="cast-and-crew-label">
      <rt-text size="1.25" context="heading" data-qa="title">Cast & Crew</rt-text>
    </h2>
  </div>

  <div class="content-wrap">
    <drawer-more showclosedheight skeleton="panel" status="closed">
      <div data-ModuleCastCrewManager="container" slot="content">
        
        
    <a href="/celebrity/chris_sanders" data-qa="person-item">
        <tile-dynamic skeleton="panel">
            <rt-img 
                alt="Christopher Sanders thumbnail image" 
                aria-hidden="true"
                loading="lazy" 
                slot="image" 
                src="https://resizing.flixster.com/RqOPzhvvV_STWiWPzFF_93humto=/100x120/v2/https://resizing.flixster.com/-XZAfHZM39UwaGJIFWKAE8fS0ak=/v3/t/assets/325843_v9_bb.jpg"
            ></rt-img>
            <div slot="insetText" aria-label="Christopher Sanders, Director">
                <p class="name" data-qa="person-name">Christopher Sanders</p>
                <p class="role" data-qa="person-role">Director</p>
            </div>
        </tile-dynamic>
    </a>

    <a href="/celebrity/lupita_nyongo" data-qa="person-item">
        <tile-dynamic skeleton="panel">
            <rt-img 
                alt="Lupita Nyong&#39;o thumbnail image" 
                aria-hidden="true"
                loading="lazy" 
                slot="image" 
                src="https://resizing.flixster.com/ZnFBvQVfCDoJz75zfKWA4qKER90=/100x120/v2/https://resizing.flixster.com/-XZAfHZM39UwaGJIFWKAE8fS0ak=/v3/t/assets/724494_v9_bb.jpg"
            ></rt-img>
            <div slot="insetText" aria-label="Lupita Nyong&#39;o, Roz">
                <p class="name" data-qa="person-name">Lupita Nyong&#39;o</p>
                <p class="role" data-qa="person-role">Roz</p>
            </div>
        </tile-dynamic>
    </a>

    <a href="/celebrity/pedro_pascal" data-qa="person-item">
        <tile-dynamic skeleton="panel">
            <rt-img 
                alt="Pedro Pascal thumbnail image" 
                aria-hidden="true"
                loading="lazy" 
                slot="image" 
                src="https://resizing.flixster.com/gHGci208eTBBe6s555qqrVvMAlg=/100x120/v2/https://resizing.flixster.com/-XZAfHZM39UwaGJIFWKAE8fS0ak=/v3/t/assets/494807_v9_bd.jpg"
            ></rt-img>
            <div slot="insetText" aria-label="Pedro Pascal, Fink">
                <p class="name" data-qa="person-name">Pedro Pascal</p>
                <p class="role" data-qa="person-role">Fink</p>
            </div>
        </tile-dynamic>
    </a>

    <a href="/celebrity/catherine_ohara" data-qa="person-item">
        <tile-dynamic skeleton="panel">
            <rt-img 
                alt="Catherine O&#39;Hara thumbnail image" 
                aria-hidden="true"
                loading="lazy" 
                slot="image" 
                src="https://resizing.flixster.com/tWeg7XUIZKmK1SoV_hIfGHyeFKg=/100x120/v2/https://resizing.flixster.com/-XZAfHZM39UwaGJIFWKAE8fS0ak=/v3/t/assets/1279_v9_bd.jpg"
            ></rt-img>
            <div slot="insetText" aria-label="Catherine O&#39;Hara, Pinktail">
                <p class="name" data-qa="person-name">Catherine O&#39;Hara</p>
                <p class="role" data-qa="person-role">Pinktail</p>
            </div>
        </tile-dynamic>
    </a>

    <a href="/celebrity/bill_nighy" data-qa="person-item">
        <tile-dynamic skeleton="panel">
            <rt-img 
                alt="Bill Nighy thumbnail image" 
                aria-hidden="true"
                loading="lazy" 
                slot="image" 
                src="https://resizing.flixster.com/HwVGbdrHwAbwew1w-CZXyPmqHwc=/100x120/v2/https://resizing.flixster.com/-XZAfHZM39UwaGJIFWKAE8fS0ak=/v3/t/assets/83203_v9_bd.jpg"
            ></rt-img>
            <div slot="insetText" aria-label="Bill Nighy, Longneck">
                <p class="name" data-qa="person-name">Bill Nighy</p>
                <p class="role" data-qa="person-role">Longneck</p>
            </div>
        </tile-dynamic>
    </a>

    <a href="/celebrity/kit_connor" data-qa="person-item">
        <tile-dynamic skeleton="panel">
            <rt-img 
                alt="Kit Connor thumbnail image" 
                aria-hidden="true"
                loading="lazy" 
                slot="image" 
                src="https://resizing.flixster.com/4ZnXMj20Lu70GK9pkc2zjoix_FM=/100x120/v2/https://resizing.flixster.com/-XZAfHZM39UwaGJIFWKAE8fS0ak=/v3/t/assets/830755_v9_bb.jpg"
            ></rt-img>
            <div slot="insetText" aria-label="Kit Connor, Brightbill">
                <p class="name" data-qa="person-name">Kit Connor</p>
                <p class="role" data-qa="person-role">Brightbill</p>
            </div>
        </tile-dynamic>
    </a>

      </div>

      <rt-link data-ModuleCastCrewManager="showLessBtn:click" slot="ctaClose" context="label" size="0.875" data-qa="show-less-btn">
        Show Less
        <sr-text>Cast &amp; Crew</sr-text>
        <rt-icon icon="up-open"></rt-icon>
      </rt-link>

      <rt-link data-ModuleCastCrewManager="showMoreBtn:click" slot="ctaOpen" context="label" size="0.875" data-qa="show-more-btn">
        Show More
        <sr-text>Cast &amp; Crew</sr-text>
        <rt-icon icon="down-open"></rt-icon>
      </rt-link>
    </drawer-more>
  </div>

  <module-cast-crew-manager>
    <script id="castAndCrewData" type="application/json">{"emsId":"dd36be73-6c5e-3b4b-94e2-4b62260e2808","mediaType":"Movie","people":[{"celebrityUrl":"/celebrity/chris_sanders","name":"Christopher Sanders","primaryImageUrl":"https://resizing.flixster.com/RqOPzhvvV_STWiWPzFF_93humto=/100x120/v2/https://resizing.flixster.com/-XZAfHZM39UwaGJIFWKAE8fS0ak=/v3/t/assets/325843_v9_bb.jpg","role":"Director"},{"celebrityUrl":"/celebrity/lupita_nyongo","name":"Lupita Nyong'o","primaryImageUrl":"https://resizing.flixster.com/ZnFBvQVfCDoJz75zfKWA4qKER90=/100x120/v2/https://resizing.flixster.com/-XZAfHZM39UwaGJIFWKAE8fS0ak=/v3/t/assets/724494_v9_bb.jpg","role":"Roz"},{"celebrityUrl":"/celebrity/pedro_pascal","name":"Pedro Pascal","primaryImageUrl":"https://resizing.flixster.com/gHGci208eTBBe6s555qqrVvMAlg=/100x120/v2/https://resizing.flixster.com/-XZAfHZM39UwaGJIFWKAE8fS0ak=/v3/t/assets/494807_v9_bd.jpg","role":"Fink"},{"celebrityUrl":"/celebrity/catherine_ohara","name":"Catherine O'Hara","primaryImageUrl":"https://resizing.flixster.com/tWeg7XUIZKmK1SoV_hIfGHyeFKg=/100x120/v2/https://resizing.flixster.com/-XZAfHZM39UwaGJIFWKAE8fS0ak=/v3/t/assets/1279_v9_bd.jpg","role":"Pinktail"},{"celebrityUrl":"/celebrity/bill_nighy","name":"Bill Nighy","primaryImageUrl":"https://resizing.flixster.com/HwVGbdrHwAbwew1w-CZXyPmqHwc=/100x120/v2/https://resizing.flixster.com/-XZAfHZM39UwaGJIFWKAE8fS0ak=/v3/t/assets/83203_v9_bd.jpg","role":"Longneck"},{"celebrityUrl":"/celebrity/kit_connor","name":"Kit Connor","primaryImageUrl":"https://resizing.flixster.com/4ZnXMj20Lu70GK9pkc2zjoix_FM=/100x120/v2/https://resizing.flixster.com/-XZAfHZM39UwaGJIFWKAE8fS0ak=/v3/t/assets/830755_v9_bb.jpg","role":"Brightbill"}],"showExpandBtn":true}</script>
  </module-cast-crew-manager>
</section>

</div>

                
                    <div
  class="modules-layout"
  tabindex="-1"
  data-ModulesNavigationManager="content:focusin"
>
  
    <div
      id="movie-clips"
      class="dom-anchor"
      data-ModulesNavigationManager="domAnchor"
    ></div>
  

  
<section
  aria-labelledby="movie-clips-label"
  class="movie-clips" 
  data-adobe-id="movie-clips" 
  data-qa="section:movie-clips"
>
  <div class="header-wrap">
    <div class="link-wrap">
        <h2 class="unset" id="movie-clips-label">
          <rt-text size="1.25" context="heading">Movie Clips</rt-text>
        </h2>
      <rt-link
        data-qa="videos-view-all-link"
        href="/m/the_wild_robot/videos"
        size="0.875"
        context="label"
      >
        View All
        <sr-text> videos</sr-text>
      </rt-link>
    </div>
    <h3 class="unset">
      <rt-text
        context="heading"
        size="0.75"
        style="--letterSpacing: 1px; --textColor: var(--grayDark4); --textTransform: capitalize;">
        The Wild Robot
      </rt-text>
    </h3>
  </div>

  <carousel-slider
    tilewidth="80%,240px"
    data-VideosCarouselManager="carousel"
    skeleton="panel"
    data-qa="videos-carousel"
  >
    
        <tile-video
          skeleton="panel"
          slot="tile"
          data-qa="video-item"
        >
          <rt-img
            slot="image"
            loading=""
            src="https://resizing.flixster.com/zdDfzgX-X1rDwKW9_UYKtdpGYvg=/270x160/v2/https://statcdn.fandango.com/MPX/image/NBCU_Fandango/273/547/thumb_DE88C400-E3FE-4CDC-9FB7-9D3B493F00DE.jpg"
            alt="The Wild Robot: Movie Clip - Roz Finds a Task "
          ></rt-img>
          <rt-button
            theme="transparent"
            data-ems-id="dd36be73-6c5e-3b4b-94e2-4b62260e2808"
            data-mpx-id="2380771395643"
            data-public-id="XZp7D8iQXkZy"
            data-type="Movie"
            data-VideoPlayerOverlayManager="btnVideo:click"
            slot="imageAction"
            data-qa="video-trailer-play-btn"
          >
            <span class="sr-only">The Wild Robot: Movie Clip - Roz Finds a Task</span>
          </rt-button>

          <drawer-more slot="caption" maxlines="2" status="closed">
            <rt-text slot="content" size="1" context="label" data-qa="video-item-title">The Wild Robot: Movie Clip - Roz Finds a Task</rt-text>
          </drawer-more>

          <rt-badge
            slot="imageInsetLabel"
            theme="gray"
          >
            1:32
          </rt-badge>
        </tile-video>
    
        <tile-video
          skeleton="panel"
          slot="tile"
          data-qa="video-item"
        >
          <rt-img
            slot="image"
            loading=""
            src="https://resizing.flixster.com/PCfywrzAOAZCd0OJm5WYBe0yQ34=/270x160/v2/https://statcdn.fandango.com/MPX/image/NBCU_Fandango/1023/123/thumb_EC4D96A3-BAFB-4F8B-84EF-E0492A650958.jpg"
            alt="The Wild Robot: Movie Clip - Language Barrier "
          ></rt-img>
          <rt-button
            theme="transparent"
            data-ems-id="dd36be73-6c5e-3b4b-94e2-4b62260e2808"
            data-mpx-id="2380483651629"
            data-public-id="NB6XwNt4WVAx"
            data-type="Movie"
            data-VideoPlayerOverlayManager="btnVideo:click"
            slot="imageAction"
            data-qa="video-trailer-play-btn"
          >
            <span class="sr-only">The Wild Robot: Movie Clip - Language Barrier</span>
          </rt-button>

          <drawer-more slot="caption" maxlines="2" status="closed">
            <rt-text slot="content" size="1" context="label" data-qa="video-item-title">The Wild Robot: Movie Clip - Language Barrier</rt-text>
          </drawer-more>

          <rt-badge
            slot="imageInsetLabel"
            theme="gray"
          >
            1:04
          </rt-badge>
        </tile-video>
    
        <tile-video
          skeleton="panel"
          slot="tile"
          data-qa="video-item"
        >
          <rt-img
            slot="image"
            loading=""
            src="https://resizing.flixster.com/6Aqf1AzXK03q1Fc2TU-lvdhQ5lU=/270x160/v2/https://statcdn.fandango.com/MPX/image/NBCU_Fandango/983/83/thumb_AC311376-BDDB-4DC1-82A2-B100EF61C185.jpg"
            alt="The Wild Robot: Movie Clip - Baby Hatches "
          ></rt-img>
          <rt-button
            theme="transparent"
            data-ems-id="dd36be73-6c5e-3b4b-94e2-4b62260e2808"
            data-mpx-id="2380441667659"
            data-public-id="Umi1JKD4BYWl"
            data-type="Movie"
            data-VideoPlayerOverlayManager="btnVideo:click"
            slot="imageAction"
            data-qa="video-trailer-play-btn"
          >
            <span class="sr-only">The Wild Robot: Movie Clip - Baby Hatches</span>
          </rt-button>

          <drawer-more slot="caption" maxlines="2" status="closed">
            <rt-text slot="content" size="1" context="label" data-qa="video-item-title">The Wild Robot: Movie Clip - Baby Hatches</rt-text>
          </drawer-more>

          <rt-badge
            slot="imageInsetLabel"
            theme="gray"
          >
            1:00
          </rt-badge>
        </tile-video>
    
        <tile-video
          skeleton="panel"
          slot="tile"
          data-qa="video-item"
        >
          <rt-img
            slot="image"
            loading=""
            src="https://resizing.flixster.com/kPtLU95Jct0Zphn8Gm48qTMGGw0=/270x160/v2/https://statcdn.fandango.com/MPX/image/NBCU_Fandango/982/107/thumb_EFE00612-7BCF-427C-87ED-E0F0522912A6.jpg"
            alt="The Wild Robot: Movie Clip - Activated "
          ></rt-img>
          <rt-button
            theme="transparent"
            data-ems-id="dd36be73-6c5e-3b4b-94e2-4b62260e2808"
            data-mpx-id="2380440643892"
            data-public-id="raXWU18NMYhy"
            data-type="Movie"
            data-VideoPlayerOverlayManager="btnVideo:click"
            slot="imageAction"
            data-qa="video-trailer-play-btn"
          >
            <span class="sr-only">The Wild Robot: Movie Clip - Activated</span>
          </rt-button>

          <drawer-more slot="caption" maxlines="2" status="closed">
            <rt-text slot="content" size="1" context="label" data-qa="video-item-title">The Wild Robot: Movie Clip - Activated</rt-text>
          </drawer-more>

          <rt-badge
            slot="imageInsetLabel"
            theme="gray"
          >
            1:23
          </rt-badge>
        </tile-video>
    
        <tile-video
          skeleton="panel"
          slot="tile"
          data-qa="video-item"
        >
          <rt-img
            slot="image"
            loading=""
            src="https://resizing.flixster.com/Od4ZRiGZ3jvLVCcmJWYbLLRkvE4=/270x160/v2/https://statcdn.fandango.com/MPX/image/NBCU_Fandango/182/611/thumb_9790DEE3-3A91-4069-888B-F42AD717AC13.jpg"
            alt="The Wild Robot: Get Wild "
          ></rt-img>
          <rt-button
            theme="transparent"
            data-ems-id="dd36be73-6c5e-3b4b-94e2-4b62260e2808"
            data-mpx-id="2375307331775"
            data-public-id="QlIbRHQXVgDt"
            data-type="Movie"
            data-VideoPlayerOverlayManager="btnVideo:click"
            slot="imageAction"
            data-qa="video-trailer-play-btn"
          >
            <span class="sr-only">The Wild Robot: Get Wild</span>
          </rt-button>

          <drawer-more slot="caption" maxlines="2" status="closed">
            <rt-text slot="content" size="1" context="label" data-qa="video-item-title">The Wild Robot: Get Wild</rt-text>
          </drawer-more>

          <rt-badge
            slot="imageInsetLabel"
            theme="gray"
          >
            0:15
          </rt-badge>
        </tile-video>
    
        <tile-video
          skeleton="panel"
          slot="tile"
          data-qa="video-item"
        >
          <rt-img
            slot="image"
            loading="lazy"
            src="https://resizing.flixster.com/RhJmSh4w9iP8MfzRnyRLePdo86Y=/270x160/v2/https://statcdn.fandango.com/MPX/image/NBCU_Fandango/183/586/thumb_EC60EA3E-E68C-4FA2-BF92-9C450A10E7CA.jpg"
            alt="The Wild Robot: Winning Hearts "
          ></rt-img>
          <rt-button
            theme="transparent"
            data-ems-id="dd36be73-6c5e-3b4b-94e2-4b62260e2808"
            data-mpx-id="2375308355552"
            data-public-id="bjdZiYPOixTZ"
            data-type="Movie"
            data-VideoPlayerOverlayManager="btnVideo:click"
            slot="imageAction"
            data-qa="video-trailer-play-btn"
          >
            <span class="sr-only">The Wild Robot: Winning Hearts</span>
          </rt-button>

          <drawer-more slot="caption" maxlines="2" status="closed">
            <rt-text slot="content" size="1" context="label" data-qa="video-item-title">The Wild Robot: Winning Hearts</rt-text>
          </drawer-more>

          <rt-badge
            slot="imageInsetLabel"
            theme="gray"
          >
            0:15
          </rt-badge>
        </tile-video>
    
      <tile-view-more
        aspect="landscape"
        background="mediaHero"
        slot="tile"
      >
        <rt-button
          href="/m/the_wild_robot/videos"
          shape="pill"
          theme="transparent-lighttext"
        >
          View more videos
        </rt-button>
      </tile-view-more>
  </carousel-slider>
</section>

</div>

                
                    <div
  class="modules-layout"
  tabindex="-1"
  data-ModulesNavigationManager="content:focusin"
>
  
    <div
      id="more-like-this"
      class="dom-anchor"
      data-ModulesNavigationManager="domAnchor"
    ></div>
  

  
<section
  aria-labelledby="more-like-this-label"
  class="more-like-this"
  data-adobe-id="more-like-this"
  data-qa="section:more-like-this"
>
  <div class="header-wrap">
    <div class="link-wrap">
      <h3 class="unset" id="more-like-this-label">
        <rt-text size="1.25" context="heading">
          More Like This
        </rt-text>
      </h3>
      <rt-link href="/browse/movies_at_home/sort:popular/" size="0.875" context="label">
        View All
        <sr-text>Best Movies to Stream at Home</sr-text>
      </rt-link>
    </div>
  </div>

  <div class="content-wrap">
    <carousel-slider skeleton="panel" tilewidth="140px" gap="15px">
      
        <tile-poster-card slot="tile">
            <rt-link slot="primaryImage" href="/m/spirit_untamed" tabindex="-1">
              <sr-text>Spirit Untamed</sr-text>
              <rt-img
                loading=""
                src="https://resizing.flixster.com/Dwe3PT_Eg7g13RAb-EKuW0w3uQU=/206x305/v2/https://resizing.flixster.com/6cCNYYZpzDI6ii3JCAjwzpQN5F8=/ems.cHJkLWVtcy1hc3NldHMvbW92aWVzL2MzZjY5MDZmLWY4OWMtNDA0Ny1iYzQ0LWQ0NTY2MmY0YjhkYi5qcGc="
                alt="Spirit Untamed poster"
              ></rt-img>
            </rt-link>
            <score-icon-critics
              certified="false"
              sentiment="NEGATIVE"
              size="1"
              slot="criticsIcon"
              verticalalign="sub"
            ></score-icon-critics>
            <rt-text slot="criticsScore" size="0.9" context="label">
              47%
            </rt-text>
            <score-icon-audience
              certified="true"
              sentiment="POSITIVE"
              size="1"
              slot="audienceIcon"
            ></score-icon-audience>
            <rt-text slot="audienceScore" size="0.9" context="label">
              95%
            </rt-text>
            <rt-link slot="title" href="/m/spirit_untamed" size="0.85" context="label">
              Spirit Untamed
            </rt-link>
            <watchlist-button
              data-WatchlistButtonManager="watchlistButton:click"
              emsid="62bbd28a-37b1-34ab-82a5-a22561b8f5b9"
              mediatype="Movie"
              mediatitle="Spirit Untamed"
              slot="watchlistButton"
              state="unchecked"
            >
              <span slot="text">Watchlist</span>
            </watchlist-button>
            
              <rt-button
                data-content-type="PROMO"
                data-disable-ads=""
                data-ems-id="62bbd28a-37b1-34ab-82a5-a22561b8f5b9"
                data-mpx-id="1879969859705"
                data-position="1"
                data-public-id="x2ORIM4PGvjR"
                data-title="Spirit Untamed: Trailer 1"
                data-track="poster"
                data-type="Movie"
                data-VideoPlayerOverlayManager="btnVideo:click"
                data-video-list=""
                slot="trailerButton"
                size="0.875"
                theme="transparent"
              >
                <rt-icon icon="play"></rt-icon>
                <span>TRAILER</span>
                <sr-text> for Spirit Untamed</sr-text>
              </rt-button>
            
        </tile-poster-card>
      
        <tile-poster-card slot="tile">
            <rt-link slot="primaryImage" href="/m/kung_fu_panda_4" tabindex="-1">
              <sr-text>Kung Fu Panda 4</sr-text>
              <rt-img
                loading=""
                src="https://resizing.flixster.com/6cfrwJStRae501DxSTqpLPX8lf8=/206x305/v2/https://resizing.flixster.com/gbUUcDTtnjLFPRoTQtyPB5nW4OE=/ems.cHJkLWVtcy1hc3NldHMvbW92aWVzLzQ3ZDdmYjllLTNkZDItNDJiOC1hMGZkLWVkMTdmMDg1YzViYy5qcGc="
                alt="Kung Fu Panda 4 poster"
              ></rt-img>
            </rt-link>
            <score-icon-critics
              certified="false"
              sentiment="POSITIVE"
              size="1"
              slot="criticsIcon"
              verticalalign="sub"
            ></score-icon-critics>
            <rt-text slot="criticsScore" size="0.9" context="label">
              71%
            </rt-text>
            <score-icon-audience
              certified="false"
              sentiment="POSITIVE"
              size="1"
              slot="audienceIcon"
            ></score-icon-audience>
            <rt-text slot="audienceScore" size="0.9" context="label">
              86%
            </rt-text>
            <rt-link slot="title" href="/m/kung_fu_panda_4" size="0.85" context="label">
              Kung Fu Panda 4
            </rt-link>
            <watchlist-button
              data-WatchlistButtonManager="watchlistButton:click"
              emsid="a0fbfc3b-8712-3c3e-b5c1-9f2ebe5b5a14"
              mediatype="Movie"
              mediatitle="Kung Fu Panda 4"
              slot="watchlistButton"
              state="unchecked"
            >
              <span slot="text">Watchlist</span>
            </watchlist-button>
            
              <rt-button
                data-content-type="PROMO"
                data-disable-ads=""
                data-ems-id="a0fbfc3b-8712-3c3e-b5c1-9f2ebe5b5a14"
                data-mpx-id="2291866691923"
                data-position="2"
                data-public-id="bnwMLz78GPpn"
                data-title="Kung Fu Panda 4: Trailer 1"
                data-track="poster"
                data-type="Movie"
                data-VideoPlayerOverlayManager="btnVideo:click"
                data-video-list=""
                slot="trailerButton"
                size="0.875"
                theme="transparent"
              >
                <rt-icon icon="play"></rt-icon>
                <span>TRAILER</span>
                <sr-text> for Kung Fu Panda 4</sr-text>
              </rt-button>
            
        </tile-poster-card>
      
        <tile-poster-card slot="tile">
            <rt-link slot="primaryImage" href="/m/the_boss_baby_family_business" tabindex="-1">
              <sr-text>The Boss Baby: Family Business</sr-text>
              <rt-img
                loading=""
                src="https://resizing.flixster.com/nld6dupXeKjOWEmLwJaTd_JYF98=/206x305/v2/https://resizing.flixster.com/UauXyhYmV77HTI1VU8m0OzspdqM=/ems.cHJkLWVtcy1hc3NldHMvbW92aWVzLzJmMTg3ODU5LWJlNWEtNGNhNC1hMGNlLTU2YTU2MDIzODllNS5qcGc="
                alt="The Boss Baby: Family Business poster"
              ></rt-img>
            </rt-link>
            <score-icon-critics
              certified="false"
              sentiment="NEGATIVE"
              size="1"
              slot="criticsIcon"
              verticalalign="sub"
            ></score-icon-critics>
            <rt-text slot="criticsScore" size="0.9" context="label">
              46%
            </rt-text>
            <score-icon-audience
              certified="false"
              sentiment="POSITIVE"
              size="1"
              slot="audienceIcon"
            ></score-icon-audience>
            <rt-text slot="audienceScore" size="0.9" context="label">
              89%
            </rt-text>
            <rt-link slot="title" href="/m/the_boss_baby_family_business" size="0.85" context="label">
              The Boss Baby: Family Business
            </rt-link>
            <watchlist-button
              data-WatchlistButtonManager="watchlistButton:click"
              emsid="d1f9635a-d02e-35b6-96cc-06fa0931cdd5"
              mediatype="Movie"
              mediatitle="The Boss Baby: Family Business"
              slot="watchlistButton"
              state="unchecked"
            >
              <span slot="text">Watchlist</span>
            </watchlist-button>
            
              <rt-button
                data-content-type="PROMO"
                data-disable-ads=""
                data-ems-id="d1f9635a-d02e-35b6-96cc-06fa0931cdd5"
                data-mpx-id="1911895619967"
                data-position="3"
                data-public-id="CBCl1n4D7mao"
                data-title="The Boss Baby: Family Business: Trailer 3"
                data-track="poster"
                data-type="Movie"
                data-VideoPlayerOverlayManager="btnVideo:click"
                data-video-list=""
                slot="trailerButton"
                size="0.875"
                theme="transparent"
              >
                <rt-icon icon="play"></rt-icon>
                <span>TRAILER</span>
                <sr-text> for The Boss Baby: Family Business</sr-text>
              </rt-button>
            
        </tile-poster-card>
      
        <tile-poster-card slot="tile">
            <rt-link slot="primaryImage" href="/m/the_croods_a_new_age" tabindex="-1">
              <sr-text>The Croods: A New Age</sr-text>
              <rt-img
                loading=""
                src="https://resizing.flixster.com/XjxC85IX28PusH7r-GnEFYdKuxY=/206x305/v2/https://resizing.flixster.com/t-PhNjELHaKGQLan-5K8e07mwM8=/ems.cHJkLWVtcy1hc3NldHMvbW92aWVzL2IxOTA1YWZlLWYwZjktNGU5OC1hNzczLTZmMDc1Nzg4Y2IyYy5qcGc="
                alt="The Croods: A New Age poster"
              ></rt-img>
            </rt-link>
            <score-icon-critics
              certified="true"
              sentiment="POSITIVE"
              size="1"
              slot="criticsIcon"
              verticalalign="sub"
            ></score-icon-critics>
            <rt-text slot="criticsScore" size="0.9" context="label">
              77%
            </rt-text>
            <score-icon-audience
              certified="true"
              sentiment="POSITIVE"
              size="1"
              slot="audienceIcon"
            ></score-icon-audience>
            <rt-text slot="audienceScore" size="0.9" context="label">
              94%
            </rt-text>
            <rt-link slot="title" href="/m/the_croods_a_new_age" size="0.85" context="label">
              The Croods: A New Age
            </rt-link>
            <watchlist-button
              data-WatchlistButtonManager="watchlistButton:click"
              emsid="bbe0e08b-905a-30fe-ac40-bf9342e5c000"
              mediatype="Movie"
              mediatitle="The Croods: A New Age"
              slot="watchlistButton"
              state="unchecked"
            >
              <span slot="text">Watchlist</span>
            </watchlist-button>
            
              <rt-button
                data-content-type="PROMO"
                data-disable-ads=""
                data-ems-id="bbe0e08b-905a-30fe-ac40-bf9342e5c000"
                data-mpx-id="1900579907572"
                data-position="4"
                data-public-id="skzX1nqF5Tb2"
                data-title="The Croods: A New Age: Trailer 1"
                data-track="poster"
                data-type="Movie"
                data-VideoPlayerOverlayManager="btnVideo:click"
                data-video-list=""
                slot="trailerButton"
                size="0.875"
                theme="transparent"
              >
                <rt-icon icon="play"></rt-icon>
                <span>TRAILER</span>
                <sr-text> for The Croods: A New Age</sr-text>
              </rt-button>
            
        </tile-poster-card>
      
        <tile-poster-card slot="tile">
            <rt-link slot="primaryImage" href="/m/abominable" tabindex="-1">
              <sr-text>Abominable</sr-text>
              <rt-img
                loading=""
                src="https://resizing.flixster.com/fVrV_eP6rgGwXIqF_WwDFDfUMt0=/206x305/v2/https://resizing.flixster.com/g7KcQhkaVVORs0lnixa-bzsEKDU=/ems.cHJkLWVtcy1hc3NldHMvbW92aWVzL2M2NzQzNTEwLWU3ZjItNDU3Mi1iMzgxLWRmOGFiYzlkZTdkYS53ZWJw"
                alt="Abominable poster"
              ></rt-img>
            </rt-link>
            <score-icon-critics
              certified="true"
              sentiment="POSITIVE"
              size="1"
              slot="criticsIcon"
              verticalalign="sub"
            ></score-icon-critics>
            <rt-text slot="criticsScore" size="0.9" context="label">
              82%
            </rt-text>
            <score-icon-audience
              certified="true"
              sentiment="POSITIVE"
              size="1"
              slot="audienceIcon"
            ></score-icon-audience>
            <rt-text slot="audienceScore" size="0.9" context="label">
              95%
            </rt-text>
            <rt-link slot="title" href="/m/abominable" size="0.85" context="label">
              Abominable
            </rt-link>
            <watchlist-button
              data-WatchlistButtonManager="watchlistButton:click"
              emsid="455d87bc-6850-4c1d-a0eb-ad5c10757515"
              mediatype="Movie"
              mediatitle="Abominable"
              slot="watchlistButton"
              state="unchecked"
            >
              <span slot="text">Watchlist</span>
            </watchlist-button>
            
              <rt-button
                data-content-type="PROMO"
                data-disable-ads=""
                data-ems-id="455d87bc-6850-4c1d-a0eb-ad5c10757515"
                data-mpx-id="1526990403767"
                data-position="5"
                data-public-id="EUTSyUBdjrlB"
                data-title="Abominable: Trailer 1"
                data-track="poster"
                data-type="Movie"
                data-VideoPlayerOverlayManager="btnVideo:click"
                data-video-list=""
                slot="trailerButton"
                size="0.875"
                theme="transparent"
              >
                <rt-icon icon="play"></rt-icon>
                <span>TRAILER</span>
                <sr-text> for Abominable</sr-text>
              </rt-button>
            
        </tile-poster-card>
      

      <tile-poster-card skeleton="panel" slot="tile" tabindex="-1">
        <tile-view-more
          aspect="posterCard"
          background="collage"
          slot="primaryImage"
        >
        </tile-view-more>
        <rt-text slot="title" size="0.85" context="label">Discover more movies and TV shows.</rt-text>
        <rt-button
          href="/browse/movies_at_home/sort:popular/"
          slot="watchlistButton"
          shape="pill"
          size="0.875"
          theme="transparent-darktext"
          aria-label="View More Best Movies to Stream at Home"
        >
          View More
        </rt-button>
      </tile-poster-card>
    </carousel-slider>
  </div>
</section>

</div>

                
                    <div
  class="modules-layout"
  tabindex="-1"
  data-ModulesNavigationManager="content:focusin"
>
  
    <div
      id="news-and-guides"
      class="dom-anchor"
      data-ModulesNavigationManager="domAnchor"
    ></div>
  

  
<section
  aria-labelledby="news-and-guides-label"
  class="news-and-guides"
  data-adobe-id="news-and-guides"
  data-qa="section:news-and-guides"
>
  <div class="header-wrap">
    <div class="link-wrap">
      <h2 class="unset" id="news-and-guides-label">
        <rt-text size="1.25" style="--textTransform: capitalize;" context="heading" data-qa="title">Related Movie News</rt-text>
      </h2>
      <rt-link
        data-qa="view-all-link"
        href="https://editorial.rottentomatoes.com/more-related-content/?relatedmovieid=dd36be73-6c5e-3b4b-94e2-4b62260e2808"
        size="0.875"
        context="label"
      >
        View All
        <sr-text>Related Movie News</sr-text>
      </rt-link>
    </div>
  </div>

  <div class="content-wrap">
    <carousel-slider tilewidth="80%,240px" skeleton="panel" data-qa="carousel">
      
        <a slot="tile" href="https://editorial.rottentomatoes.com/article/weekend-box-office-the-wild-robot-soars-to-weekend-win/" data-qa="article">
          <tile-dynamic orientation="landscape" skeleton="panel">
            <rt-img slot="image" src="https://prd-rteditorial.s3.us-west-2.amazonaws.com/wp-content/uploads/2024/09/30152152/Wild_Robot_BO1-Rep.jpg" loading="lazy"></rt-img>
            <drawer-more slot="caption" maxlines="2" status="closed">
              <rt-text slot="content" size="1" context="label" data-qa="article-title">Weekend Box Office: <em>The Wild Robot</em> Soars to Weekend Win</rt-text>
            </drawer-more>
          </tile-dynamic>
        </a>
      
        <a slot="tile" href="https://editorial.rottentomatoes.com/article/lupita-nyongo-explains-how-variety-has-guided-her-career-decisions-on-the-awards-tour-podcast/" data-qa="article">
          <tile-dynamic orientation="landscape" skeleton="panel">
            <rt-img slot="image" src="https://prd-rteditorial.s3.us-west-2.amazonaws.com/wp-content/uploads/2024/09/25144809/The_Wild_Robot-600x314-1.jpg" loading="lazy"></rt-img>
            <drawer-more slot="caption" maxlines="2" status="closed">
              <rt-text slot="content" size="1" context="label" data-qa="article-title">Lupita Nyong&#8217;o Explains How Variety Has Guided Her Career Decisions on The Awards Tour Podcast</rt-text>
            </drawer-more>
          </tile-dynamic>
        </a>
      
        <a slot="tile" href="https://editorial.rottentomatoes.com/article/13-must-watch-films-at-the-2024-toronto-international-film-festival/" data-qa="article">
          <tile-dynamic orientation="landscape" skeleton="panel">
            <rt-img slot="image" src="https://prd-rteditorial.s3.us-west-2.amazonaws.com/wp-content/uploads/2024/08/30165621/The_Cut_TIFF-600x314-1.jpg" loading="lazy"></rt-img>
            <drawer-more slot="caption" maxlines="2" status="closed">
              <rt-text slot="content" size="1" context="label" data-qa="article-title">13 Must-Watch Films at the 2024 Toronto International Film Festival</rt-text>
            </drawer-more>
          </tile-dynamic>
        </a>
      
    </carousel-slider>
  </div>
</section>

</div>

                
                    <div
  class="modules-layout"
  tabindex="-1"
  data-ModulesNavigationManager="content:focusin"
>
  
    <div
      id="videos"
      class="dom-anchor"
      data-ModulesNavigationManager="domAnchor"
    ></div>
  

  
<section
  aria-labelledby="videos-carousel-label"
  class="videos-carousel"
  data-adobe-id="videos-carousel"
  data-qa="section:videos-carousel"
>
  <div class="header-wrap">
    <div class="link-wrap">
      <h2 class="unset" data-qa="videos-section-title" id="videos-carousel-label">
        <rt-text size="1.25" context="heading">Videos</rt-text>
      </h2>
      <rt-link
        data-qa="videos-view-all-link"
        href="/m/the_wild_robot/videos"
        size="0.875"
        context="label"
      >
        View All
        <sr-text> videos</sr-text>
      </rt-link>
    </div>
    <h3 class="unset">
      <rt-text
        context="heading"
        size="0.75"
        style="--letterSpacing: 1px; --textColor: var(--grayDark4); --textTransform: capitalize;">
        The Wild Robot
      </rt-text>
    </h3>
  </div>

  <carousel-slider
    tilewidth="80%,240px"
    data-VideosCarouselManager="carousel"
    skeleton="panel"
    data-qa="videos-carousel"
  >
    
        <tile-video
          skeleton="panel"
          slot="tile"
          data-qa="video-item"
        >
          <rt-img
            slot="image"
            loading=""
            src="https://resizing.flixster.com/xTZjywat2FHs1YvO456CnfT_9as=/270x160/v2/https://statcdn.fandango.com/MPX/image/NBCU_Fandango/240/839/thumb_46B62775-B57B-49F1-9D42-FEB2E261A509.jpg"
            alt="The Wild Robot: Exclusive Featurette - In the Booth "
          ></rt-img>
          <rt-button
            theme="transparent"
            data-ems-id="dd36be73-6c5e-3b4b-94e2-4b62260e2808"
            data-mpx-id="2380737091895"
            data-public-id="hdJqt5_xtitm"
            data-type="Movie"
            data-VideoPlayerOverlayManager="btnVideo:click"
            slot="imageAction"
            data-qa="video-trailer-play-btn"
          >
            <span class="sr-only">The Wild Robot: Exclusive Featurette - In the Booth</span>
          </rt-button>

          <drawer-more slot="caption" maxlines="2" status="closed">
            <rt-text slot="content" size="1" context="label" data-qa="video-item-title">The Wild Robot: Exclusive Featurette - In the Booth</rt-text>
          </drawer-more>

          <rt-badge
            slot="imageInsetLabel"
            theme="gray"
          >
            1:09
          </rt-badge>
        </tile-video>
    
        <tile-video
          skeleton="panel"
          slot="tile"
          data-qa="video-item"
        >
          <rt-img
            slot="image"
            loading=""
            src="https://resizing.flixster.com/ZQ01zn253fme4wpWrz1kWC2CBl0=/270x160/v2/https://statcdn.fandango.com/MPX/image/NBCU_Fandango/968/943/thumb_7EA4F965-9E98-4E2B-8033-5CE18D1557DF.jpg"
            alt="The Wild Robot: Bonus Featurette - Immersive World "
          ></rt-img>
          <rt-button
            theme="transparent"
            data-ems-id="dd36be73-6c5e-3b4b-94e2-4b62260e2808"
            data-mpx-id="2380426819891"
            data-public-id="4_kSiLCSyFPp"
            data-type="Movie"
            data-VideoPlayerOverlayManager="btnVideo:click"
            slot="imageAction"
            data-qa="video-trailer-play-btn"
          >
            <span class="sr-only">The Wild Robot: Bonus Featurette - Immersive World</span>
          </rt-button>

          <drawer-more slot="caption" maxlines="2" status="closed">
            <rt-text slot="content" size="1" context="label" data-qa="video-item-title">The Wild Robot: Bonus Featurette - Immersive World</rt-text>
          </drawer-more>

          <rt-badge
            slot="imageInsetLabel"
            theme="gray"
          >
            1:23
          </rt-badge>
        </tile-video>
    
        <tile-video
          skeleton="panel"
          slot="tile"
          data-qa="video-item"
        >
          <rt-img
            slot="image"
            loading=""
            src="https://resizing.flixster.com/gZl0HW18z6nFAwxEgtOuTX58b34=/270x160/v2/https://statcdn.fandango.com/MPX/image/NBCU_Fandango/964/39/thumb_540EF20D-F941-4964-8878-72654786D8A9.jpg"
            alt="The Wild Robot: Bonus Featurette - Feeling Alive "
          ></rt-img>
          <rt-button
            theme="transparent"
            data-ems-id="dd36be73-6c5e-3b4b-94e2-4b62260e2808"
            data-mpx-id="2380421699832"
            data-public-id="5k2LPwQwtTqb"
            data-type="Movie"
            data-VideoPlayerOverlayManager="btnVideo:click"
            slot="imageAction"
            data-qa="video-trailer-play-btn"
          >
            <span class="sr-only">The Wild Robot: Bonus Featurette - Feeling Alive</span>
          </rt-button>

          <drawer-more slot="caption" maxlines="2" status="closed">
            <rt-text slot="content" size="1" context="label" data-qa="video-item-title">The Wild Robot: Bonus Featurette - Feeling Alive</rt-text>
          </drawer-more>

          <rt-badge
            slot="imageInsetLabel"
            theme="gray"
          >
            1:26
          </rt-badge>
        </tile-video>
    
        <tile-video
          skeleton="panel"
          slot="tile"
          data-qa="video-item"
        >
          <rt-img
            slot="image"
            loading=""
            src="https://resizing.flixster.com/VPy1z-FZlfi5QGDXEsK6pj3qZDU=/270x160/v2/https://statcdn.fandango.com/MPX/image/NBCU_Fandango/876/955/thumb_5C68B5C3-D7E9-4C28-9845-AAA3660D0464.jpg"
            alt="The Wild Robot: Featurette - Sustainability "
          ></rt-img>
          <rt-button
            theme="transparent"
            data-ems-id="dd36be73-6c5e-3b4b-94e2-4b62260e2808"
            data-mpx-id="2376035395830"
            data-public-id="v7qOwxjIQD8H"
            data-type="Movie"
            data-VideoPlayerOverlayManager="btnVideo:click"
            slot="imageAction"
            data-qa="video-trailer-play-btn"
          >
            <span class="sr-only">The Wild Robot: Featurette - Sustainability</span>
          </rt-button>

          <drawer-more slot="caption" maxlines="2" status="closed">
            <rt-text slot="content" size="1" context="label" data-qa="video-item-title">The Wild Robot: Featurette - Sustainability</rt-text>
          </drawer-more>

          <rt-badge
            slot="imageInsetLabel"
            theme="gray"
          >
            1:26
          </rt-badge>
        </tile-video>
    
        <tile-video
          skeleton="panel"
          slot="tile"
          data-qa="video-item"
        >
          <rt-img
            slot="image"
            loading=""
            src="https://resizing.flixster.com/0n6gM3It4rN3El8N8Io6M7vM29s=/270x160/v2/https://statcdn.fandango.com/MPX/image/NBCU_Fandango/431/135/thumb_E3600AD0-8DC5-403F-96A0-0D45100CA7F4.jpg"
            alt="What to Watch: The Wild Robot, Megalopolis, Inside Out 2 at Home, &amp;. More "
          ></rt-img>
          <rt-button
            theme="transparent"
            data-ems-id="dd36be73-6c5e-3b4b-94e2-4b62260e2808"
            data-mpx-id="2375567939861"
            data-public-id="uMDDSpHdaHNQ"
            data-type="Movie"
            data-VideoPlayerOverlayManager="btnVideo:click"
            slot="imageAction"
            data-qa="video-trailer-play-btn"
          >
            <span class="sr-only">What to Watch: The Wild Robot, Megalopolis, Inside Out 2 at Home, &amp;. More</span>
          </rt-button>

          <drawer-more slot="caption" maxlines="2" status="closed">
            <rt-text slot="content" size="1" context="label" data-qa="video-item-title">What to Watch: The Wild Robot, Megalopolis, Inside Out 2 at Home, &amp;. More</rt-text>
          </drawer-more>

          <rt-badge
            slot="imageInsetLabel"
            theme="gray"
          >
            3:20
          </rt-badge>
        </tile-video>
    
        <tile-video
          skeleton="panel"
          slot="tile"
          data-qa="video-item"
        >
          <rt-img
            slot="image"
            loading="lazy"
            src="https://resizing.flixster.com/-au6PeugFCCQl6x1ORYrpeB3umk=/270x160/v2/https://statcdn.fandango.com/MPX/image/NBCU_Fandango/452/707/thumb_828A09DF-F78B-43CD-8315-7E700B474A27.jpg"
            alt="Lupita Nyong&#39;o Breaks Down Her Character in &#39;The Wild Robot&#39; "
          ></rt-img>
          <rt-button
            theme="transparent"
            data-ems-id="dd36be73-6c5e-3b4b-94e2-4b62260e2808"
            data-mpx-id="2374516803864"
            data-public-id="u1heIJNvgI1w"
            data-type="Movie"
            data-VideoPlayerOverlayManager="btnVideo:click"
            slot="imageAction"
            data-qa="video-trailer-play-btn"
          >
            <span class="sr-only">Lupita Nyong&#39;o Breaks Down Her Character in &#39;The Wild Robot&#39;</span>
          </rt-button>

          <drawer-more slot="caption" maxlines="2" status="closed">
            <rt-text slot="content" size="1" context="label" data-qa="video-item-title">Lupita Nyong&#39;o Breaks Down Her Character in &#39;The Wild Robot&#39;</rt-text>
          </drawer-more>

          <rt-badge
            slot="imageInsetLabel"
            theme="gray"
          >
            17:00
          </rt-badge>
        </tile-video>
    
        <tile-video
          skeleton="panel"
          slot="tile"
          data-qa="video-item"
        >
          <rt-img
            slot="image"
            loading="lazy"
            src="https://resizing.flixster.com/nxYU5w8lh5_BxRK93AcAGp2zWuU=/270x160/v2/https://statcdn.fandango.com/MPX/image/NBCU_Fandango/868/375/thumb_35571333-3353-4B77-9CB2-DC1DFBAD2110.jpg"
            alt="The Wild Robot: Exclusive Featurette - Meet the Characters "
          ></rt-img>
          <rt-button
            theme="transparent"
            data-ems-id="dd36be73-6c5e-3b4b-94e2-4b62260e2808"
            data-mpx-id="2372805187871"
            data-public-id="nwIpLUOD5N7c"
            data-type="Movie"
            data-VideoPlayerOverlayManager="btnVideo:click"
            slot="imageAction"
            data-qa="video-trailer-play-btn"
          >
            <span class="sr-only">The Wild Robot: Exclusive Featurette - Meet the Characters</span>
          </rt-button>

          <drawer-more slot="caption" maxlines="2" status="closed">
            <rt-text slot="content" size="1" context="label" data-qa="video-item-title">The Wild Robot: Exclusive Featurette - Meet the Characters</rt-text>
          </drawer-more>

          <rt-badge
            slot="imageInsetLabel"
            theme="gray"
          >
            2:11
          </rt-badge>
        </tile-video>
    
        <tile-video
          skeleton="panel"
          slot="tile"
          data-qa="video-item"
        >
          <rt-img
            slot="image"
            loading="lazy"
            src="https://resizing.flixster.com/fHPpPQw3mM2CWnwo3qJN7RJI8v8=/270x160/v2/https://statcdn.fandango.com/MPX/image/NBCU_Fandango/589/70/thumb_43ADE6D2-CB4E-48C2-9B21-4DA66A7817E6.jpg"
            alt="The Wild Robot: Featurette - Taming the Vision "
          ></rt-img>
          <rt-button
            theme="transparent"
            data-ems-id="dd36be73-6c5e-3b4b-94e2-4b62260e2808"
            data-mpx-id="2372512323571"
            data-public-id="3ABNPu615_5j"
            data-type="Movie"
            data-VideoPlayerOverlayManager="btnVideo:click"
            slot="imageAction"
            data-qa="video-trailer-play-btn"
          >
            <span class="sr-only">The Wild Robot: Featurette - Taming the Vision</span>
          </rt-button>

          <drawer-more slot="caption" maxlines="2" status="closed">
            <rt-text slot="content" size="1" context="label" data-qa="video-item-title">The Wild Robot: Featurette - Taming the Vision</rt-text>
          </drawer-more>

          <rt-badge
            slot="imageInsetLabel"
            theme="gray"
          >
            2:14
          </rt-badge>
        </tile-video>
    
        <tile-video
          skeleton="panel"
          slot="tile"
          data-qa="video-item"
        >
          <rt-img
            slot="image"
            loading="lazy"
            src="https://resizing.flixster.com/V5MApxL1RTPxMVY-_w4pAUenAs0=/270x160/v2/https://statcdn.fandango.com/MPX/image/NBCU_Fandango/881/715/WildRobot.jpg"
            alt="The Wild Robot: Final Trailer "
          ></rt-img>
          <rt-button
            theme="transparent"
            data-ems-id="dd36be73-6c5e-3b4b-94e2-4b62260e2808"
            data-mpx-id="2370671683662"
            data-public-id="phV7PJYm2ecP"
            data-type="Movie"
            data-VideoPlayerOverlayManager="btnVideo:click"
            slot="imageAction"
            data-qa="video-trailer-play-btn"
          >
            <span class="sr-only">The Wild Robot: Final Trailer</span>
          </rt-button>

          <drawer-more slot="caption" maxlines="2" status="closed">
            <rt-text slot="content" size="1" context="label" data-qa="video-item-title">The Wild Robot: Final Trailer</rt-text>
          </drawer-more>

          <rt-badge
            slot="imageInsetLabel"
            theme="gray"
          >
            2:20
          </rt-badge>
        </tile-video>
    
        <tile-video
          skeleton="panel"
          slot="tile"
          data-qa="video-item"
        >
          <rt-img
            slot="image"
            loading="lazy"
            src="https://resizing.flixster.com/srNCnyh6neiFMit7pbERH3ihfa4=/270x160/v2/https://statcdn.fandango.com/MPX/image/NBCU_Fandango/618/27/thumb_C9A159D9-1FDB-4D57-8D31-4B821F0FA2B4.jpg"
            alt="The Wild Robot: Featurette - A Look Inside "
          ></rt-img>
          <rt-button
            theme="transparent"
            data-ems-id="dd36be73-6c5e-3b4b-94e2-4b62260e2808"
            data-mpx-id="2370395203840"
            data-public-id="q1SEfpGrbiHQ"
            data-type="Movie"
            data-VideoPlayerOverlayManager="btnVideo:click"
            slot="imageAction"
            data-qa="video-trailer-play-btn"
          >
            <span class="sr-only">The Wild Robot: Featurette - A Look Inside</span>
          </rt-button>

          <drawer-more slot="caption" maxlines="2" status="closed">
            <rt-text slot="content" size="1" context="label" data-qa="video-item-title">The Wild Robot: Featurette - A Look Inside</rt-text>
          </drawer-more>

          <rt-badge
            slot="imageInsetLabel"
            theme="gray"
          >
            2:44
          </rt-badge>
        </tile-video>
    
      <tile-view-more
        aspect="landscape"
        background="mediaHero"
        slot="tile"
      >
        <rt-button
          href="/m/the_wild_robot/videos"
          shape="pill"
          theme="transparent-lighttext"
        >
          View more videos
        </rt-button>
      </tile-view-more>
  </carousel-slider>
</section>

</div>

                
                    <div
  class="modules-layout"
  tabindex="-1"
  data-ModulesNavigationManager="content:focusin"
>
  
    <div
      id="photos"
      class="dom-anchor"
      data-ModulesNavigationManager="domAnchor"
    ></div>
  

  
<section
  aria-labelledby="photos-carousel-label"
  class="photos-carousel"
  data-adobe-id="photos-carousel"
  data-qa="section:photos-carousel"
>
  <div class="header-wrap">
    <div class="link-wrap">
      <h2 class="unset" id="photos-carousel-label">
        <rt-text size="1.25" context="heading">Photos</rt-text>
      </h2>
      <rt-link href="/m/the_wild_robot/pictures" size="0.875" context="label">
        View All
        <sr-text>The Wild Robot photos</sr-text>
      </rt-link>
    </div>
    <h3 class="unset">
      <rt-text
        context="label"
        size="0.75"
        style="--textColor: var(--grayDark4);"
      >
        The Wild Robot
      </rt-text>
    </h3>
  </div>

  <carousel-slider
    tilewidth="80%,240px"
    skeleton="panel"
  >
    
      <tile-photo
        data-PhotosCarouselManager="tilePhoto:click"
        slot="tile"
        skeleton="panel"
      >
        <span class="sr-only"></span>
        
          
        
          <rt-img
            slot="image"
            loading=""
            srcdesktop="https://resizing.flixster.com/XP8RGGmNOuaDzPeP6C6uYWR_F70=/fit-in/705x460/v2/https://resizing.flixster.com/c7fcjCvkHP4wiDlEdVRusMXCOws=/ems.cHJkLWVtcy1hc3NldHMvbW92aWVzLzAzOWI1YzkwLTNiODAtNDNmYy05MTA1LTViZjg4ZTgyYTc1MC5qcGc="
            srcmobile="https://resizing.flixster.com/okOpDgHQEtB5rMvLIlQyK2gZcYA=/fit-in/352x330/v2/https://resizing.flixster.com/c7fcjCvkHP4wiDlEdVRusMXCOws=/ems.cHJkLWVtcy1hc3NldHMvbW92aWVzLzAzOWI1YzkwLTNiODAtNDNmYy05MTA1LTViZjg4ZTgyYTc1MC5qcGc="
            alt="The Wild Robot photo 1"
          ></rt-img>
      </tile-photo>
    
      <tile-photo
        data-PhotosCarouselManager="tilePhoto:click"
        slot="tile"
        skeleton="panel"
      >
        <span class="sr-only"></span>
        
          
        
          <rt-img
            slot="image"
            loading=""
            srcdesktop="https://resizing.flixster.com/ReiHiovRyy3DLvv5UIhJwS5-6DY=/fit-in/705x460/v2/https://resizing.flixster.com/lHaqu6LmY6U4YEtS8mjPyQxxFIo=/ems.cHJkLWVtcy1hc3NldHMvbW92aWVzLzlkYTdiMzc3LWU3ZTYtNGU3Zi04OGUyLWZhM2VkMGJiOTE2Ni5qcGc="
            srcmobile="https://resizing.flixster.com/9GiEFF3vWmFPX101dOVDh_UNjJk=/fit-in/352x330/v2/https://resizing.flixster.com/lHaqu6LmY6U4YEtS8mjPyQxxFIo=/ems.cHJkLWVtcy1hc3NldHMvbW92aWVzLzlkYTdiMzc3LWU3ZTYtNGU3Zi04OGUyLWZhM2VkMGJiOTE2Ni5qcGc="
            alt="The Wild Robot photo 2"
          ></rt-img>
      </tile-photo>
    
      <tile-photo
        data-PhotosCarouselManager="tilePhoto:click"
        slot="tile"
        skeleton="panel"
      >
        <span class="sr-only"></span>
        
          
        
          <rt-img
            slot="image"
            loading=""
            srcdesktop="https://resizing.flixster.com/sTiLAU8YB1Ws_ypQcHoCvMwbPDM=/fit-in/705x460/v2/https://resizing.flixster.com/GoA-2qVtnigXVy37jHJy-IRYj-Y=/ems.cHJkLWVtcy1hc3NldHMvbW92aWVzLzk2MDRhNWNhLTAwNTEtNGY4Yi1iZjMzLTMzYTlkZjZhNDc1Ny5qcGc="
            srcmobile="https://resizing.flixster.com/dHj7U8mS598Qcpvk5Lm0I4Elwig=/fit-in/352x330/v2/https://resizing.flixster.com/GoA-2qVtnigXVy37jHJy-IRYj-Y=/ems.cHJkLWVtcy1hc3NldHMvbW92aWVzLzk2MDRhNWNhLTAwNTEtNGY4Yi1iZjMzLTMzYTlkZjZhNDc1Ny5qcGc="
            alt="The Wild Robot photo 3"
          ></rt-img>
      </tile-photo>
    
      <tile-photo
        data-PhotosCarouselManager="tilePhoto:click"
        slot="tile"
        skeleton="panel"
      >
        <span class="sr-only"></span>
        
          
        
          <rt-img
            slot="image"
            loading=""
            srcdesktop="https://resizing.flixster.com/oP_ihsk7ScJuYtkVUcknRuqA6Ck=/fit-in/705x460/v2/https://resizing.flixster.com/-XZAfHZM39UwaGJIFWKAE8fS0ak=/v3/t/assets/p26880361_v_h9_al.jpg"
            srcmobile="https://resizing.flixster.com/XGjb-zvqqkdNVPFZb0vWMTVb9FQ=/fit-in/352x330/v2/https://resizing.flixster.com/-XZAfHZM39UwaGJIFWKAE8fS0ak=/v3/t/assets/p26880361_v_h9_al.jpg"
            alt="The Wild Robot photo 4"
          ></rt-img>
      </tile-photo>
    
      <tile-photo
        data-PhotosCarouselManager="tilePhoto:click"
        slot="tile"
        skeleton="panel"
      >
        <span class="sr-only"></span>
        
          
        
          <rt-img
            slot="image"
            loading=""
            srcdesktop="https://resizing.flixster.com/OvcSXL4GAb4EprJgaaNmV5TwFeQ=/fit-in/705x460/v2/https://resizing.flixster.com/-XZAfHZM39UwaGJIFWKAE8fS0ak=/v3/t/assets/p26880361_v_v13_ak.jpg"
            srcmobile="https://resizing.flixster.com/5ZiH360YwhhPxoePFxKeRiUNMpo=/fit-in/352x330/v2/https://resizing.flixster.com/-XZAfHZM39UwaGJIFWKAE8fS0ak=/v3/t/assets/p26880361_v_v13_ak.jpg"
            alt="The Wild Robot photo 5"
          ></rt-img>
      </tile-photo>
    
      <tile-photo
        data-PhotosCarouselManager="tilePhoto:click"
        slot="tile"
        skeleton="panel"
      >
        <span class="sr-only"></span>
        
          
        
          <rt-img
            slot="image"
            loading="lazy"
            srcdesktop="https://resizing.flixster.com/fAnoYswsH8mBiBjsE-LpElJB8-4=/fit-in/705x460/v2/https://resizing.flixster.com/-XZAfHZM39UwaGJIFWKAE8fS0ak=/v3/t/assets/p26880361_v_h8_aj.jpg"
            srcmobile="https://resizing.flixster.com/y3QUod-JqbC2HidfNps5uIuR05c=/fit-in/352x330/v2/https://resizing.flixster.com/-XZAfHZM39UwaGJIFWKAE8fS0ak=/v3/t/assets/p26880361_v_h8_aj.jpg"
            alt="The Wild Robot photo 6"
          ></rt-img>
      </tile-photo>
    
      <tile-photo
        data-PhotosCarouselManager="tilePhoto:click"
        slot="tile"
        skeleton="panel"
      >
        <span class="sr-only"></span>
        
          
        
          <rt-img
            slot="image"
            loading="lazy"
            srcdesktop="https://resizing.flixster.com/9GULWCmiNcVZ_P_YQR1Zbdm7agY=/fit-in/705x460/v2/https://resizing.flixster.com/EHsyf43t4KQmw_f7n4ZWyO5VfvI=/ems.cHJkLWVtcy1hc3NldHMvbW92aWVzLzYwYjRhNjViLTFjNjYtNGQ4NS1hNDQzLThjYmJlNjUyM2M2NS5qcGc="
            srcmobile="https://resizing.flixster.com/UITPXz_Glo-FMeraXrqhJa2qKrs=/fit-in/352x330/v2/https://resizing.flixster.com/EHsyf43t4KQmw_f7n4ZWyO5VfvI=/ems.cHJkLWVtcy1hc3NldHMvbW92aWVzLzYwYjRhNjViLTFjNjYtNGQ4NS1hNDQzLThjYmJlNjUyM2M2NS5qcGc="
            alt="The Wild Robot photo 7"
          ></rt-img>
      </tile-photo>
    
      <tile-photo
        data-PhotosCarouselManager="tilePhoto:click"
        slot="tile"
        skeleton="panel"
      >
        <span class="sr-only"></span>
        
          
        
          <rt-img
            slot="image"
            loading="lazy"
            srcdesktop="https://resizing.flixster.com/-UemtibX9Xntf7JmRyqtyBj80EI=/fit-in/705x460/v2/https://resizing.flixster.com/VCoNBRIZMjBYN5DPxrXgONihU-M=/ems.cHJkLWVtcy1hc3NldHMvbW92aWVzLzc0NTc3OWFhLWM3ZTItNDI2Yi04MmUwLTdmZDc0NGEyYzU3Yy5qcGc="
            srcmobile="https://resizing.flixster.com/9yPF6lzCAIjoAzms4f4pNcDP0lg=/fit-in/352x330/v2/https://resizing.flixster.com/VCoNBRIZMjBYN5DPxrXgONihU-M=/ems.cHJkLWVtcy1hc3NldHMvbW92aWVzLzc0NTc3OWFhLWM3ZTItNDI2Yi04MmUwLTdmZDc0NGEyYzU3Yy5qcGc="
            alt="The Wild Robot photo 8"
          ></rt-img>
      </tile-photo>
    
      <tile-photo
        data-PhotosCarouselManager="tilePhoto:click"
        slot="tile"
        skeleton="panel"
      >
        <span class="sr-only"></span>
        
          
        
          <rt-img
            slot="image"
            loading="lazy"
            srcdesktop="https://resizing.flixster.com/dDzQLJ1HvV9vbu937t4eAxhCxKk=/fit-in/705x460/v2/https://resizing.flixster.com/EN9C9i9cdtH0oBD-qZ44NULr9Q0=/ems.cHJkLWVtcy1hc3NldHMvbW92aWVzL2MwNmE3MTliLWZhMzktNDVkYi1iZmM1LTNlMjhkZTg1NzRhZC5qcGc="
            srcmobile="https://resizing.flixster.com/AtHeQTyevNEC14x7DqAE292xA4M=/fit-in/352x330/v2/https://resizing.flixster.com/EN9C9i9cdtH0oBD-qZ44NULr9Q0=/ems.cHJkLWVtcy1hc3NldHMvbW92aWVzL2MwNmE3MTliLWZhMzktNDVkYi1iZmM1LTNlMjhkZTg1NzRhZC5qcGc="
            alt="The Wild Robot photo 9"
          ></rt-img>
      </tile-photo>
    
      <tile-photo
        data-PhotosCarouselManager="tilePhoto:click"
        slot="tile"
        skeleton="panel"
      >
        <span class="sr-only"></span>
        
          
        
          <rt-img
            slot="image"
            loading="lazy"
            srcdesktop="https://resizing.flixster.com/6K_yg45ZL9IwdO8n8cE3GFRLIT4=/fit-in/705x460/v2/https://resizing.flixster.com/hVOm7rMtmd9MKtxs25o4jogHOJo=/ems.cHJkLWVtcy1hc3NldHMvbW92aWVzL2Q3MjhiMjJhLWUzODEtNGVhZi04YTNiLWEyYTYyMDRlMDBlOC5qcGc="
            srcmobile="https://resizing.flixster.com/WthNXJmv63ERa8y9lPcgdJ3KcIY=/fit-in/352x330/v2/https://resizing.flixster.com/hVOm7rMtmd9MKtxs25o4jogHOJo=/ems.cHJkLWVtcy1hc3NldHMvbW92aWVzL2Q3MjhiMjJhLWUzODEtNGVhZi04YTNiLWEyYTYyMDRlMDBlOC5qcGc="
            alt="The Wild Robot photo 10"
          ></rt-img>
      </tile-photo>
    
      <tile-view-more
        aspect="square,landscape"
        background="mediaHero"
        slot="tile"
      >
        <rt-button
          href="/m/the_wild_robot/pictures"
          shape="pill"
          theme="transparent-lighttext"
          aria-label="View more The Wild Robot photos"
        >
          View more photos
        </rt-button>
      </tile-view-more>
  </carousel-slider>

  <photos-carousel-manager>
    <script
      id="photosCarousel"
      type="application/json"
      hidden
    >
        {"title":"The Wild Robot","images":[{"height":"1350","width":"1080","imageUrl":"https://resizing.flixster.com/XP8RGGmNOuaDzPeP6C6uYWR_F70=/fit-in/705x460/v2/https://resizing.flixster.com/c7fcjCvkHP4wiDlEdVRusMXCOws=/ems.cHJkLWVtcy1hc3NldHMvbW92aWVzLzAzOWI1YzkwLTNiODAtNDNmYy05MTA1LTViZjg4ZTgyYTc1MC5qcGc=","imageUrlMobile":"https://resizing.flixster.com/okOpDgHQEtB5rMvLIlQyK2gZcYA=/fit-in/352x330/v2/https://resizing.flixster.com/c7fcjCvkHP4wiDlEdVRusMXCOws=/ems.cHJkLWVtcy1hc3NldHMvbW92aWVzLzAzOWI1YzkwLTNiODAtNDNmYy05MTA1LTViZjg4ZTgyYTc1MC5qcGc=","imageLoading":""},{"aspectRatio":"ASPECT_RATIO_2_3","height":"5000","width":"3158","imageUrl":"https://resizing.flixster.com/ReiHiovRyy3DLvv5UIhJwS5-6DY=/fit-in/705x460/v2/https://resizing.flixster.com/lHaqu6LmY6U4YEtS8mjPyQxxFIo=/ems.cHJkLWVtcy1hc3NldHMvbW92aWVzLzlkYTdiMzc3LWU3ZTYtNGU3Zi04OGUyLWZhM2VkMGJiOTE2Ni5qcGc=","imageUrlMobile":"https://resizing.flixster.com/9GiEFF3vWmFPX101dOVDh_UNjJk=/fit-in/352x330/v2/https://resizing.flixster.com/lHaqu6LmY6U4YEtS8mjPyQxxFIo=/ems.cHJkLWVtcy1hc3NldHMvbW92aWVzLzlkYTdiMzc3LWU3ZTYtNGU3Zi04OGUyLWZhM2VkMGJiOTE2Ni5qcGc=","imageLoading":""},{"aspectRatio":"ASPECT_RATIO_2_3","height":"1219","width":"770","imageUrl":"https://resizing.flixster.com/sTiLAU8YB1Ws_ypQcHoCvMwbPDM=/fit-in/705x460/v2/https://resizing.flixster.com/GoA-2qVtnigXVy37jHJy-IRYj-Y=/ems.cHJkLWVtcy1hc3NldHMvbW92aWVzLzk2MDRhNWNhLTAwNTEtNGY4Yi1iZjMzLTMzYTlkZjZhNDc1Ny5qcGc=","imageUrlMobile":"https://resizing.flixster.com/dHj7U8mS598Qcpvk5Lm0I4Elwig=/fit-in/352x330/v2/https://resizing.flixster.com/GoA-2qVtnigXVy37jHJy-IRYj-Y=/ems.cHJkLWVtcy1hc3NldHMvbW92aWVzLzk2MDRhNWNhLTAwNTEtNGY4Yi1iZjMzLTMzYTlkZjZhNDc1Ny5qcGc=","imageLoading":""},{"aspectRatio":"ASPECT_RATIO_4_3","height":"1080","width":"1440","imageUrl":"https://resizing.flixster.com/oP_ihsk7ScJuYtkVUcknRuqA6Ck=/fit-in/705x460/v2/https://resizing.flixster.com/-XZAfHZM39UwaGJIFWKAE8fS0ak=/v3/t/assets/p26880361_v_h9_al.jpg","imageUrlMobile":"https://resizing.flixster.com/XGjb-zvqqkdNVPFZb0vWMTVb9FQ=/fit-in/352x330/v2/https://resizing.flixster.com/-XZAfHZM39UwaGJIFWKAE8fS0ak=/v3/t/assets/p26880361_v_h9_al.jpg","imageLoading":""},{"aspectRatio":"ASPECT_RATIO_3_4","height":"2880","width":"2160","imageUrl":"https://resizing.flixster.com/OvcSXL4GAb4EprJgaaNmV5TwFeQ=/fit-in/705x460/v2/https://resizing.flixster.com/-XZAfHZM39UwaGJIFWKAE8fS0ak=/v3/t/assets/p26880361_v_v13_ak.jpg","imageUrlMobile":"https://resizing.flixster.com/5ZiH360YwhhPxoePFxKeRiUNMpo=/fit-in/352x330/v2/https://resizing.flixster.com/-XZAfHZM39UwaGJIFWKAE8fS0ak=/v3/t/assets/p26880361_v_v13_ak.jpg","imageLoading":""},{"aspectRatio":"ASPECT_RATIO_16_9","height":"2160","width":"3840","imageUrl":"https://resizing.flixster.com/fAnoYswsH8mBiBjsE-LpElJB8-4=/fit-in/705x460/v2/https://resizing.flixster.com/-XZAfHZM39UwaGJIFWKAE8fS0ak=/v3/t/assets/p26880361_v_h8_aj.jpg","imageUrlMobile":"https://resizing.flixster.com/y3QUod-JqbC2HidfNps5uIuR05c=/fit-in/352x330/v2/https://resizing.flixster.com/-XZAfHZM39UwaGJIFWKAE8fS0ak=/v3/t/assets/p26880361_v_h8_aj.jpg","imageLoading":"lazy"},{"height":"3400","width":"8000","imageUrl":"https://resizing.flixster.com/9GULWCmiNcVZ_P_YQR1Zbdm7agY=/fit-in/705x460/v2/https://resizing.flixster.com/EHsyf43t4KQmw_f7n4ZWyO5VfvI=/ems.cHJkLWVtcy1hc3NldHMvbW92aWVzLzYwYjRhNjViLTFjNjYtNGQ4NS1hNDQzLThjYmJlNjUyM2M2NS5qcGc=","imageUrlMobile":"https://resizing.flixster.com/UITPXz_Glo-FMeraXrqhJa2qKrs=/fit-in/352x330/v2/https://resizing.flixster.com/EHsyf43t4KQmw_f7n4ZWyO5VfvI=/ems.cHJkLWVtcy1hc3NldHMvbW92aWVzLzYwYjRhNjViLTFjNjYtNGQ4NS1hNDQzLThjYmJlNjUyM2M2NS5qcGc=","imageLoading":"lazy"},{"height":"3400","width":"8000","imageUrl":"https://resizing.flixster.com/-UemtibX9Xntf7JmRyqtyBj80EI=/fit-in/705x460/v2/https://resizing.flixster.com/VCoNBRIZMjBYN5DPxrXgONihU-M=/ems.cHJkLWVtcy1hc3NldHMvbW92aWVzLzc0NTc3OWFhLWM3ZTItNDI2Yi04MmUwLTdmZDc0NGEyYzU3Yy5qcGc=","imageUrlMobile":"https://resizing.flixster.com/9yPF6lzCAIjoAzms4f4pNcDP0lg=/fit-in/352x330/v2/https://resizing.flixster.com/VCoNBRIZMjBYN5DPxrXgONihU-M=/ems.cHJkLWVtcy1hc3NldHMvbW92aWVzLzc0NTc3OWFhLWM3ZTItNDI2Yi04MmUwLTdmZDc0NGEyYzU3Yy5qcGc=","imageLoading":"lazy"},{"height":"3400","width":"8000","imageUrl":"https://resizing.flixster.com/dDzQLJ1HvV9vbu937t4eAxhCxKk=/fit-in/705x460/v2/https://resizing.flixster.com/EN9C9i9cdtH0oBD-qZ44NULr9Q0=/ems.cHJkLWVtcy1hc3NldHMvbW92aWVzL2MwNmE3MTliLWZhMzktNDVkYi1iZmM1LTNlMjhkZTg1NzRhZC5qcGc=","imageUrlMobile":"https://resizing.flixster.com/AtHeQTyevNEC14x7DqAE292xA4M=/fit-in/352x330/v2/https://resizing.flixster.com/EN9C9i9cdtH0oBD-qZ44NULr9Q0=/ems.cHJkLWVtcy1hc3NldHMvbW92aWVzL2MwNmE3MTliLWZhMzktNDVkYi1iZmM1LTNlMjhkZTg1NzRhZC5qcGc=","imageLoading":"lazy"},{"height":"3379","width":"8000","imageUrl":"https://resizing.flixster.com/6K_yg45ZL9IwdO8n8cE3GFRLIT4=/fit-in/705x460/v2/https://resizing.flixster.com/hVOm7rMtmd9MKtxs25o4jogHOJo=/ems.cHJkLWVtcy1hc3NldHMvbW92aWVzL2Q3MjhiMjJhLWUzODEtNGVhZi04YTNiLWEyYTYyMDRlMDBlOC5qcGc=","imageUrlMobile":"https://resizing.flixster.com/WthNXJmv63ERa8y9lPcgdJ3KcIY=/fit-in/352x330/v2/https://resizing.flixster.com/hVOm7rMtmd9MKtxs25o4jogHOJo=/ems.cHJkLWVtcy1hc3NldHMvbW92aWVzL2Q3MjhiMjJhLWUzODEtNGVhZi04YTNiLWEyYTYyMDRlMDBlOC5qcGc=","imageLoading":"lazy"}],"picturesPageUrl":"/m/the_wild_robot/pictures"}
    </script>
  </photos-carousel-manager>
</section>

</div>

                
                    <ad-unit hidden unitdisplay="mobile" unittype="mboxadtwo" showadlink>
  <div slot="adInject" class="rectangle_ad mobile center"></div>
</ad-unit>
                
                    <ad-unit hidden unitdisplay="desktop" unittype="opbannertwo">
  <div slot="adInject" class="banner-ad"></div>
</ad-unit>
                
                    <div
  class="modules-layout"
  tabindex="-1"
  data-ModulesNavigationManager="content:focusin"
>
  
    <div
      id="media-info"
      class="dom-anchor"
      data-ModulesNavigationManager="domAnchor"
    ></div>
  

  
<section
  aria-labelledby="media-info-label"
  class="media-info"
  data-adobe-id="media-info"
  data-qa="section:media-info"
>
  <div class="header-wrap">
    <h2 class="unset" id="media-info-label">
      <rt-text
        context="heading"
        size="1.25"
        style="--textTransform: capitalize;"
        data-qa="title"
      >
        Movie Info
      </rt-text>
    </h2>
  </div>

  <div class="content-wrap">
    
      <div class="synopsis-wrap">
        <rt-text class="key" size="0.875" data-qa="synopsis-label">Synopsis</rt-text>
        <rt-text data-qa="synopsis-value">The epic adventure follows the journey of a robot--ROZZUM unit 7134, &quot;Roz&quot; for short -- that is shipwrecked on an uninhabited island and must learn to adapt to the harsh surroundings, gradually building relationships with the animals on the island and becoming the adoptive parent of an orphaned gosling.</rt-text>
      </div>
    

    <dl>
      
      <div class="category-wrap" data-qa="item">
        <dt class="key">
          <rt-text class="key" size="0.875" data-qa="item-label">Director</rt-text>
        </dt>
        <dd data-qa="item-value-group">
          
            <rt-link href="/celebrity/chris_sanders" data-qa="item-value">Christopher Sanders</rt-link>
          
        </dd>
      </div>
      
      <div class="category-wrap" data-qa="item">
        <dt class="key">
          <rt-text class="key" size="0.875" data-qa="item-label">Producer</rt-text>
        </dt>
        <dd data-qa="item-value-group">
          
            <rt-link href="/celebrity/jeff_hermann" data-qa="item-value">Jeff Hermann</rt-link>
          
        </dd>
      </div>
      
      <div class="category-wrap" data-qa="item">
        <dt class="key">
          <rt-text class="key" size="0.875" data-qa="item-label">Screenwriter</rt-text>
        </dt>
        <dd data-qa="item-value-group">
          
            <rt-link href="/celebrity/chris_sanders" data-qa="item-value">Christopher Sanders</rt-link>
          
        </dd>
      </div>
      
      <div class="category-wrap" data-qa="item">
        <dt class="key">
          <rt-text class="key" size="0.875" data-qa="item-label">Distributor</rt-text>
        </dt>
        <dd data-qa="item-value-group">
          
            <rt-text data-qa="item-value">Universal Pictures</rt-text>
          
        </dd>
      </div>
      
      <div class="category-wrap" data-qa="item">
        <dt class="key">
          <rt-text class="key" size="0.875" data-qa="item-label">Production Co</rt-text>
        </dt>
        <dd data-qa="item-value-group">
          
            <rt-text data-qa="item-value">DreamWorks Animation</rt-text>
          
        </dd>
      </div>
      
      <div class="category-wrap" data-qa="item">
        <dt class="key">
          <rt-text class="key" size="0.875" data-qa="item-label">Rating</rt-text>
        </dt>
        <dd data-qa="item-value-group">
          
            <rt-text data-qa="item-value">PG (Thematic Elements|Action/Peril)</rt-text>
          
        </dd>
      </div>
      
      <div class="category-wrap" data-qa="item">
        <dt class="key">
          <rt-text class="key" size="0.875" data-qa="item-label">Genre</rt-text>
        </dt>
        <dd data-qa="item-value-group">
          
            <rt-link href="/browse/movies_in_theaters/genres:kids_and_family" data-qa="item-value">Kids &amp; Family</rt-link><rt-text class="delimiter">, </rt-text>
          
            <rt-link href="/browse/movies_in_theaters/genres:adventure" data-qa="item-value">Adventure</rt-link><rt-text class="delimiter">, </rt-text>
          
            <rt-link href="/browse/movies_in_theaters/genres:animation" data-qa="item-value">Animation</rt-link>
          
        </dd>
      </div>
      
      <div class="category-wrap" data-qa="item">
        <dt class="key">
          <rt-text class="key" size="0.875" data-qa="item-label">Original Language</rt-text>
        </dt>
        <dd data-qa="item-value-group">
          
            <rt-text data-qa="item-value">English</rt-text>
          
        </dd>
      </div>
      
      <div class="category-wrap" data-qa="item">
        <dt class="key">
          <rt-text class="key" size="0.875" data-qa="item-label">Release Date (Theaters)</rt-text>
        </dt>
        <dd data-qa="item-value-group">
          
            <rt-text data-qa="item-value">Sep 27, 2024, Wide</rt-text>
          
        </dd>
      </div>
      
      <div class="category-wrap" data-qa="item">
        <dt class="key">
          <rt-text class="key" size="0.875" data-qa="item-label">Release Date (Streaming)</rt-text>
        </dt>
        <dd data-qa="item-value-group">
          
            <rt-text data-qa="item-value">Oct 15, 2024</rt-text>
          
        </dd>
      </div>
      
      <div class="category-wrap" data-qa="item">
        <dt class="key">
          <rt-text class="key" size="0.875" data-qa="item-label">Runtime</rt-text>
        </dt>
        <dd data-qa="item-value-group">
          
            <rt-text data-qa="item-value">1h 42m</rt-text>
          
        </dd>
      </div>
      
      <div class="category-wrap" data-qa="item">
        <dt class="key">
          <rt-text class="key" size="0.875" data-qa="item-label">Sound Mix</rt-text>
        </dt>
        <dd data-qa="item-value-group">
          
            <rt-text data-qa="item-value">Dolby Digital</rt-text>
          
        </dd>
      </div>
      
      <div class="category-wrap" data-qa="item">
        <dt class="key">
          <rt-text class="key" size="0.875" data-qa="item-label">Aspect Ratio</rt-text>
        </dt>
        <dd data-qa="item-value-group">
          
            <rt-text data-qa="item-value">Scope (2.35:1)</rt-text>
          
        </dd>
      </div>
      
    </dl>
  </div>
</section>

</div>

                
                    <mobile-sticky-footer
    icon="none"
    track="most-popular-at-home-now"
    href="https://www.rottentomatoes.com/browse/movies_at_home/sort:popular?page=1&amp;cmp=rt_sticky_footer"
>
    <rt-text slot="description"> Most Popular at Home Now </rt-text>
</mobile-sticky-footer>
                
            </div>

            <div id="sidebar-wrap">
    <div data-adobe-id="discovery-sidebar" data-DiscoverySidebarManager="sticky">
        <discovery-sidebar-manager>
            <script data-json="discoverySidebarJSON" type="application/json">{"lifecycle":"OUT_OF_THEATERS","mediaType":"movie"}</script>
        </discovery-sidebar-manager>
        <discovery-sidebar
            skeleton="panel"
            data-DiscoverySidebarManager="sidebar"
        ></discovery-sidebar>

        <ad-unit
            data-DiscoverySidebarManager="ad:instantiated"
            unitdisplay="desktop"
            unittype="topmulti"
            showadlink
        >
            <div slot="adInject"></div>
        </ad-unit>
    </div>
</div>


            <script id="curation-json" type="application/json">{"emsId":"dd36be73-6c5e-3b4b-94e2-4b62260e2808","hasShowtimes":true,"rtId":"900050780","type":"movie"}</script>

        </div>
    </div>

    
<overlay-base data-MediaAudienceReviewsManager="overlay" hidden>
    <!-- do not remove content slot preset -->
    <div slot="content">
        <media-review-full-audience >
            <rt-button
                data-MediaAudienceReviewsManager="overlayClose:click"
                size="1"
                slot="close"
                theme="transparent"
            >
                <rt-icon icon="close"></rt-icon>
            </rt-button>
        </media-review-full-audience>
    </div>
</overlay-base>

    
<tool-tip data-MediaScorecardManager="tipCritics" hidden>
    <rt-button slot="btnClose" data-MediaScorecardManager="tipCriticsClose:click" theme="transparent" size="1.5">
        <rt-icon icon="close" image="true"></rt-icon>
    </rt-button>
    <div data-MediaScorecardManager="tipCriticsContent"></div>
</tool-tip>

<tool-tip class="component" data-MediaScorecardManager="tipAudience" hidden>
    <rt-button slot="btnClose" data-MediaScorecardManager="tipAudienceClose:click" theme="transparent" size="1.5">
        <rt-icon icon="close" image="true"></rt-icon>
    </rt-button>
    <div data-MediaScorecardManager="tipAudienceContent"></div>
</tool-tip>

<overlay-base data-MediaScorecardManager="overlay:close" hidden>
    <!-- do not remove content slot preset -->
    <div slot="content"></div>
</overlay-base>

    <overlay-base
    data-PhotosCarouselManager="overlayBase:close"
    hidden
    >
    <photos-carousel-overlay
        data-PhotosCarouselManager="photosOverlay:sliderBtnClick"
        slot="content"
    >
        <rt-button
            data-PhotosCarouselManager="closeBtn:click"
            slot="closeBtn"
            theme="transparent"
        >
            <rt-icon icon="close"></rt-icon>
        </rt-button>
    </photos-carousel-overlay>
</overlay-base>
    <overlay-base
    data-RateAndReviewOverlayManager="overlayBase:close"
    hidden
    noclickoutside
>
    <div slot="content"></div>
</overlay-base>

<toast-notification data-RateAndReviewOverlayManager="toast" aria-live="polite" hidden>
    <rt-icon slot="icon" icon="check-circled" image size="1"></rt-icon>
    <rt-text
        slot="message"
        data-RateAndReviewOverlayManager="toastMessage"
        context="label"
        size="0.875"
    >- -</rt-text>
    <rt-button slot="close" theme="transparent">
        <rt-icon icon="close" image size="1"></rt-icon>
    </rt-button>
</toast-notification>

    <overlay-base
    data-JwPlayerManager="overlayBase:close"
    data-VideoPlayerOverlayManager="overlayBase:close,open"
    hidden
>
    <video-player-overlay
        class="video-overlay-wrap"
        data-qa="video-overlay"
        data-VideoPlayerOverlayManager="videoPlayerOverlay:unmute"
        slot="content"
    >
        <div slot="header">
            <button
                class="unset transparent"
                data-VideoPlayerOverlayManager="btnOverlayClose:click"
                data-qa="video-close-btn"
            >
                <rt-icon icon="close">
                    <span class="sr-only">Close video</span>
                </rt-icon>
            </button>
            <a class="cta-btn header-cta button hide">See Details</a>
        </div>

        <div slot="content"></div>

        <a slot="footer" class="cta-btn footer-cta button hide">See Details</a>
    </video-player-overlay>
</overlay-base>

<div id="video-overlay-player" hidden></div>

<video-player-overlay-manager></video-player-overlay-manager>
<jw-player-manager
    data-AdsVideoSpotlightManager="jwPlayerManager:playlistItem,ready,remove"
    data-VideoPlayerOverlayManager="jwPlayerManager:playlistItem,pause,ready,relatedClose,relatedOpen"
>
</jw-player-manager>


                </div>

                <back-to-top hidden></back-to-top>
            </main>

            <ad-unit hidden unitdisplay="desktop" unittype="bottombanner">
                <div slot="adInject" class="sleaderboard_wrapper"></div>
            </ad-unit>

            <ads-global-skin-takeover-manager></ads-global-skin-takeover-manager>

            <footer-manager></footer-manager>
<footer class="footer container" data-PagePicturesManager="footer">
    <div class="footer__content-desktop-block" data-qa="footer:section">
        <div class="footer__content-group">
            <ul class="footer__links-list">
                <li class="footer__links-list-item">
                    <a href="/help_desk" data-qa="footer:link-helpdesk">Help</a>
                </li>
                <li class="footer__links-list-item">
                    <a href="/about" data-qa="footer:link-about">About Rotten Tomatoes</a>
                </li>
                <li id="footer-feedback" class="footer__links-list-item" data-qa="footer-feedback-desktop">
                    
                </li>
            </ul>
        </div>
        <div class="footer__content-group">
            <ul class="footer__links-list">
                <li class="footer__links-list-item">
                    <a href="/critics/criteria" data-qa="footer:link-critic-submission">Critic Submission</a>
                </li>
                <li class="footer__links-list-item">
                    <a href="/help_desk/licensing" data-qa="footer:link-licensing">Licensing</a>
                </li>
                <li class="footer__links-list-item">
                    <a href="https://together.nbcuni.com/advertise/?utm_source=rotten_tomatoes&amp;utm_medium=referral&amp;utm_campaign=property_ad_pages&amp;utm_content=footer" target="_blank" rel="noopener" data-qa="footer:link-ads">Advertise With Us</a>
                </li>
                <li class="footer__links-list-item">
                    <a href="//www.fandango.com/careers" target="_blank" rel="noopener" data-qa="footer:link-careers">Careers</a>
                </li>
            </ul>
        </div>
        <div class="footer__content-group footer__newsletter-block">
            <p class="h3 footer__content-group-title">
                <rt-icon icon="mail" size="1.25" style="fill:#fff"></rt-icon>&ensp;Join the Newsletter
            </p>
            <p class="footer__newsletter-copy">Get the freshest reviews, news, and more delivered right to your inbox!</p>
            <rt-button data-FooterManager="btnNewsLetter:click" data-qa="footer-newsletter-desktop">
                Join The Newsletter
            </rt-button>
            <a data-FooterManager="linkNewsLetter" class= "button footer__newsletter-btn hide" target="_blank" rel="noopener">
                Join The Newsletter
            </a>
        </div>
        <div class="footer__content-group footer__social-block" data-qa="footer:social">
            <p class="h3 footer__content-group-title">Follow Us</p>
            <social-media-icons theme="light" size="20"></social-media-icons>
        </div>
    </div>
    <div class="footer__content-mobile-block" data-qa="mfooter:section">
        <div class="footer__content-group">
            <p class="footer__copyright-legal" data-qa="mfooter:copyright">
                Copyright &copy; Fandango. All rights reserved.
            </p>
            <rt-button data-FooterManager="btnNewsLetter:click" data-qa="footer-newsletter-mobile">Join The Newsletter</rt-button>
            <a
                data-FooterManager="linkNewsLetter"
                class= "button footer__newsletter-btn hide"
                target="_blank"
                rel="noopener"
            >Join The Newsletter</a>

            <ul class="footer__links-list list-inline">
                <li class="footer__links-list-item">
                    <a href="https://www.nbcuniversal.com/fandango-privacy-policy" target="_blank" rel="noopener" data-qa="mfooter:link-privacy-policy">
                        Privacy Policy
                    </a>
                </li>
                <li class="footer__links-list-item">
                    <a href="/policies/terms-and-policies" data-qa="mfooter:link-terms-policies">Terms and Policies</a>
                </li>
                <li class="footer__links-list-item">
                    <img data-FooterManager="iconCCPA" src="https://images.fandango.com/cms/assets/266533e0-7afb-11ed-83f2-4f600722b564--privacyoptions.svg" class="footer__ccpa-icon" loading="lazy" alt="CCPA icon" />
                    <!-- OneTrust Cookies Settings button start -->
                    <a href="javascript:void(0)" id="ot-sdk-btn" class="ot-sdk-show-settings mobile" data-qa="footer-cookie-settings-mobile">Cookie Settings</a>
                    <!-- OneTrust Cookies Settings button end -->
                </li>
                <li class="footer__links-list-item">
                    <a href="https://www.nbcuniversal.com/privacy/california-consumer-privacy-act" target="_blank" rel="noopener" data-qa="mfooter:link-california-notice">California Notice</a>
                </li>
                <li class="footer__links-list-item">
                    <a href="https://www.nbcuniversal.com/privacy/cookies#accordionheader2" target="_blank" rel="noopener" data-qa="mfooter:link-adChoices">Ad Choices</a>
                </li>
                <li id="footer-feedback-mobile" class="footer__links-list-item" data-qa="footer-feedback-mobile">
                    
                </li>
                <li class="footer__links-list-item">
                    <a href="/faq#accessibility" data-qa="mfooter:link-accessibility">Accessibility</a>
                </li>
            </ul>
        </div>
    </div>
    <div class="footer__copyright">
        <ul class="footer__links-list list-inline list-inline--separator" data-qa="footer:links-list-privacy">
            <li class="footer__links-list-item version" data-qa="footer:version">
                <span>V3.1</span>
            </li>
            <li class="footer__links-list-item">
                <a href="https://www.nbcuniversal.com/fandango-privacy-policy" target="_blank" rel="noopener" data-qa="footer:link-privacy-policy">
                    Privacy Policy
                </a>
            </li>
            <li class="footer__links-list-item">
                <a href="/policies/terms-and-policies" data-qa="footer:link-terms-policies">Terms and Policies</a>
            </li>
            <li class="footer__links-list-item">
                <img data-FooterManager="iconCCPA" src="https://images.fandango.com/cms/assets/266533e0-7afb-11ed-83f2-4f600722b564--privacyoptions.svg" class="footer__ccpa-icon" loading="lazy" alt="CCPA icon" />
                <!-- OneTrust Cookies Settings button start -->
                <a href="javascript:void(0)" id="ot-sdk-btn" class="ot-sdk-show-settings" data-qa="footer-cookie-settings-desktop">Cookie Settings</a>
                <!-- OneTrust Cookies Settings button end -->
            </li>
            <li class="footer__links-list-item">
                <a href="https://www.nbcuniversal.com/privacy/california-consumer-privacy-act" target="_blank" rel="noopener" data-qa="footer:link-california-notice">California Notice</a>
            </li>
            <li class="footer__links-list-item">
                <a href="https://www.nbcuniversal.com/privacy/cookies#accordionheader2" target="_blank" rel="noopener" data-qa="footer:link-adChoices">Ad Choices</a>
            </li>
            <li class="footer__links-list-item">
                <a href="/faq#accessibility" data-qa="footer:link-accessibility">Accessibility</a>
            </li>
        </ul>
        <span class="footer__copyright-legal" data-qa="footer:copyright">
            Copyright &copy; Fandango. A Division of
            <a href="https://www.nbcuniversal.com" target="_blank" rel="noopener" data-qa="footer:link-nbcuniversal">NBCUniversal</a>.
            All rights reserved.
        </span>
    </div>
</footer>

        </div>

        
    
        <script type="text/javascript">
      (function (root) {
        /* -- Data -- */
        root.Fandango || (root.Fandango = {});
root.Fandango.dtmData = {"webVersion":"node","rtVersion":3.1,"loggedInStatus":"","customerId":"","pageName":"trailers"};
root.RottenTomatoes || (root.RottenTomatoes = {});
root.RottenTomatoes.context || (root.RottenTomatoes.context = {});
root.RottenTomatoes.context.franchiseId = "65ad4227-fb4b-3b42-8e51-6f530221d84b";
root.RottenTomatoes.context.franchiseVeneerMoviesAndTvList = [{"audienceScore":{"score":"26","scoreSentiment":"NEGATIVE","certified":false,"scorePercent":"26%"},"directors":[],"emsId":"2dfe22c5-d043-3b10-a125-0998a91c9287","exeProducers":["Andrew Dabb","Robert Kulzer","Oliver Berben","Bronwen Hughes","Mary Leah Sutton"],"imageUrl":"https:\u002F\u002Fresizing.flixster.com\u002FHzLn_WcgwBmxg1Ff1a8RrnVEolQ=\u002F206x305\u002Fv2\u002Fhttps:\u002F\u002Fresizing.flixster.com\u002FWBebJAAR5Zff2ZR3X88-6mF1WyE=\u002Fems.cHJkLWVtcy1hc3NldHMvdHZzZXJpZXMvZjIwYTdiMmMtZGExOS00M2Q2LWExZGItNTM2NWU5ZGYwNDk1LmpwZw==","title":"Resident Evil","tomatometerScore":53,"tomatometerState":"rotten","top3Cast":["Ella Balinska","Tamara Smart","Siena Agudong"],"type":"TvSeries","url":"\u002Ftv\u002Fresident_evil","releaseYear":"2022","presentationDate":"(2022 - 2022)"},{"audienceScore":{"score":"65","scoreSentiment":"POSITIVE","certifiedFresh":"none","certified":false,"scorePercent":"65%"},"directors":["Johannes Roberts"],"emsId":"b78807fa-3cbd-3c37-9757-0436a0739031","exeProducers":["Martin Moszkowicz","Victor Hadida","Jeremy Bolt","Paul W.S. Anderson"],"imageUrl":"https:\u002F\u002Fresizing.flixster.com\u002FRWSVPobJ3e_e3vfAUGOdUlI_RFM=\u002F206x305\u002Fv2\u002Fhttps:\u002F\u002Fresizing.flixster.com\u002FLxxoa5WBd02ReZL5enD7RlSPxNs=\u002Fems.cHJkLWVtcy1hc3NldHMvbW92aWVzLzkwYWNiNmY4LWI3NjMtNGMzZS05ZTIyLTJmN2JiNDkyNzdhMC5qcGc=","title":"Resident Evil: Welcome to Raccoon City","tomatometerScore":30,"tomatometerState":"rotten","top3Cast":["Kaya Scodelario","Hannah John-Kamen","Robbie Amell"],"type":"Movie","url":"\u002Fm\u002Fresident_evil_welcome_to_raccoon_city","releaseYear":"2021","presentationDate":"(2021)"},{"audienceScore":{"score":"47","scoreSentiment":"NEGATIVE","certifiedFresh":"none","certified":false,"scorePercent":"47%"},"directors":["Paul W.S. Anderson"],"emsId":"cd00d10f-7d2d-3d3f-a771-7046eb027828","exeProducers":["Martin Moszkowicz","Victor Hadida"],"imageUrl":"https:\u002F\u002Fresizing.flixster.com\u002FgCTJl2XkG4UY-1uyrWDDrAC0QpM=\u002F206x305\u002Fv2\u002Fhttps:\u002F\u002Fresizing.flixster.com\u002FUHppvqqmhKyr4ooVZHGE055Cbgg=\u002Fems.cHJkLWVtcy1hc3NldHMvbW92aWVzL2YxNTRiZmI0LWY0YzItNDBkNi04YmM1LWI3MDIzNjZhZTVjMS53ZWJw","title":"Resident Evil: The Final Chapter","tomatometerScore":38,"tomatometerState":"rotten","top3Cast":["Milla Jovovich","Iain Glen","Ali Larter"],"type":"Movie","url":"\u002Fm\u002Fresident_evil_the_final_chapter","releaseYear":"2016","presentationDate":"(2016)"},{"audienceScore":{"score":"51","scoreSentiment":"NEGATIVE","certifiedFresh":"none","certified":false,"scorePercent":"51%"},"directors":["Paul W.S. Anderson"],"emsId":"2c9fca7e-0465-3743-928f-bd96d72e9dc6","exeProducers":["Martin Moszkowicz"],"imageUrl":"https:\u002F\u002Fresizing.flixster.com\u002FOvPhJP4YVh0AV5iUBwh8elvd_I4=\u002F206x305\u002Fv2\u002Fhttps:\u002F\u002Fresizing.flixster.com\u002F-XZAfHZM39UwaGJIFWKAE8fS0ak=\u002Fv3\u002Ft\u002Fassets\u002Fp9128231_p_v8_ah.jpg","title":"Resident Evil: Retribution","tomatometerScore":28,"tomatometerState":"rotten","top3Cast":["Milla Jovovich","Michelle Rodriguez","Kevin Durand"],"type":"Movie","url":"\u002Fm\u002Fresident_evil_retribution","releaseYear":"2012","presentationDate":"(2012)"},{"audienceScore":{"score":"48","scoreSentiment":"NEGATIVE","certifiedFresh":"none","certified":false,"scorePercent":"48%"},"directors":["Paul W.S. Anderson"],"emsId":"b101e348-d244-3450-aacc-9ae79e0a8f0d","exeProducers":["Martin Moszkowicz","Victor Hadida"],"imageUrl":"https:\u002F\u002Fresizing.flixster.com\u002Fj_c0rzrVTK1Y_iuHCd9IMuFynnI=\u002F206x305\u002Fv2\u002Fhttps:\u002F\u002Fresizing.flixster.com\u002F-XZAfHZM39UwaGJIFWKAE8fS0ak=\u002Fv3\u002Ft\u002Fassets\u002Fp8078013_p_v10_ac.jpg","title":"Resident Evil: Afterlife","tomatometerScore":21,"tomatometerState":"rotten","top3Cast":["Milla Jovovich","Ali Larter","Kim Coates"],"type":"Movie","url":"\u002Fm\u002Fresident_evil_afterlife","releaseYear":"2010","presentationDate":"(2010)"},{"audienceScore":{"score":"58","scoreSentiment":"NEGATIVE","certifiedFresh":"none","certified":false,"scorePercent":"58%"},"directors":["Russell Mulcahy"],"emsId":"1d549a9d-5315-33d5-aee4-57f79b16c295","exeProducers":["Martin Moszkowicz","Kelly Van Horn","Victor Hadida"],"imageUrl":"https:\u002F\u002Fresizing.flixster.com\u002Ft4yf9XFkWuZ8x2XWn-vM_gY8y5A=\u002F206x305\u002Fv2\u002Fhttps:\u002F\u002Fresizing.flixster.com\u002F-XZAfHZM39UwaGJIFWKAE8fS0ak=\u002Fv3\u002Ft\u002Fassets\u002Fp168193_p_v10_ac.jpg","title":"Resident Evil: Extinction","tomatometerScore":24,"tomatometerState":"rotten","top3Cast":["Milla Jovovich","Oded Fehr","Ali Larter"],"type":"Movie","url":"\u002Fm\u002Fresident_evil_extinction","releaseYear":"2007","presentationDate":"(2007)"},{"audienceScore":{"score":"60","scoreSentiment":"POSITIVE","certifiedFresh":"none","certified":false,"scorePercent":"60%"},"directors":["Alexander Witt"],"emsId":"a0906bb3-f9a7-3ec2-b467-36ac11842ea7","exeProducers":["Bernd Eichinger","Samuel Hadida"],"imageUrl":"https:\u002F\u002Fresizing.flixster.com\u002FRFl0IhGb2n2ApkbzezK8MpytcDw=\u002F206x305\u002Fv2\u002Fhttps:\u002F\u002Fresizing.flixster.com\u002F-XZAfHZM39UwaGJIFWKAE8fS0ak=\u002Fv3\u002Ft\u002Fassets\u002Fp34790_p_v10_al.jpg","title":"Resident Evil: Apocalypse","tomatometerScore":19,"tomatometerState":"rotten","top3Cast":["Milla Jovovich","Sienna Guillory","Oded Fehr"],"type":"Movie","url":"\u002Fm\u002Fresident_evil_apocalypse","releaseYear":"2004","presentationDate":"(2004)"},{"audienceScore":{"score":"67","scoreSentiment":"POSITIVE","certifiedFresh":"none","certified":false,"scorePercent":"67%"},"directors":["Paul W.S. Anderson"],"emsId":"54d4302b-da3b-3a78-9e80-c067270f2bee","exeProducers":["Robert Kulzer","Victor Hadida","Daniel Kletzky","Yoshiki Okamoto"],"imageUrl":"https:\u002F\u002Fresizing.flixster.com\u002FkAx-sM0Jba51qGdshA3kPwxBQVg=\u002F206x305\u002Fv2\u002Fhttps:\u002F\u002Fresizing.flixster.com\u002F-XZAfHZM39UwaGJIFWKAE8fS0ak=\u002Fv3\u002Ft\u002Fassets\u002Fp29625_p_v8_ag.jpg","title":"Resident Evil","tomatometerScore":36,"tomatometerState":"rotten","top3Cast":["Milla Jovovich","Michelle Rodriguez","Eric Mabius"],"type":"Movie","url":"\u002Fm\u002Fresident_evil","releaseYear":"2002","presentationDate":"(2002)"}];
root.RottenTomatoes.context.imagesJson = undefined;
root.RottenTomatoes.context.titlesInFranchise = [{"audienceScore":{"score":"26","scoreSentiment":"NEGATIVE","certified":false,"scorePercent":"26%"},"directors":[],"emsId":"2dfe22c5-d043-3b10-a125-0998a91c9287","exeProducers":["Andrew Dabb","Robert Kulzer","Oliver Berben","Bronwen Hughes","Mary Leah Sutton"],"imageUrl":"https:\u002F\u002Fresizing.flixster.com\u002FHzLn_WcgwBmxg1Ff1a8RrnVEolQ=\u002F206x305\u002Fv2\u002Fhttps:\u002F\u002Fresizing.flixster.com\u002FWBebJAAR5Zff2ZR3X88-6mF1WyE=\u002Fems.cHJkLWVtcy1hc3NldHMvdHZzZXJpZXMvZjIwYTdiMmMtZGExOS00M2Q2LWExZGItNTM2NWU5ZGYwNDk1LmpwZw==","title":"Resident Evil","tomatometerScore":53,"tomatometerState":"rotten","top3Cast":["Ella Balinska","Tamara Smart","Siena Agudong"],"type":"TvSeries","url":"\u002Ftv\u002Fresident_evil","releaseYear":"2022","presentationDate":"(2022 - 2022)"},{"audienceScore":{"score":"65","scoreSentiment":"POSITIVE","certifiedFresh":"none","certified":false,"scorePercent":"65%"},"directors":["Johannes Roberts"],"emsId":"b78807fa-3cbd-3c37-9757-0436a0739031","exeProducers":["Martin Moszkowicz","Victor Hadida","Jeremy Bolt","Paul W.S. Anderson"],"imageUrl":"https:\u002F\u002Fresizing.flixster.com\u002FRWSVPobJ3e_e3vfAUGOdUlI_RFM=\u002F206x305\u002Fv2\u002Fhttps:\u002F\u002Fresizing.flixster.com\u002FLxxoa5WBd02ReZL5enD7RlSPxNs=\u002Fems.cHJkLWVtcy1hc3NldHMvbW92aWVzLzkwYWNiNmY4LWI3NjMtNGMzZS05ZTIyLTJmN2JiNDkyNzdhMC5qcGc=","title":"Resident Evil: Welcome to Raccoon City","tomatometerScore":30,"tomatometerState":"rotten","top3Cast":["Kaya Scodelario","Hannah John-Kamen","Robbie Amell"],"type":"Movie","url":"\u002Fm\u002Fresident_evil_welcome_to_raccoon_city","releaseYear":"2021","presentationDate":"(2021)"},{"audienceScore":{"score":"47","scoreSentiment":"NEGATIVE","certifiedFresh":"none","certified":false,"scorePercent":"47%"},"directors":["Paul W.S. Anderson"],"emsId":"cd00d10f-7d2d-3d3f-a771-7046eb027828","exeProducers":["Martin Moszkowicz","Victor Hadida"],"imageUrl":"https:\u002F\u002Fresizing.flixster.com\u002FgCTJl2XkG4UY-1uyrWDDrAC0QpM=\u002F206x305\u002Fv2\u002Fhttps:\u002F\u002Fresizing.flixster.com\u002FUHppvqqmhKyr4ooVZHGE055Cbgg=\u002Fems.cHJkLWVtcy1hc3NldHMvbW92aWVzL2YxNTRiZmI0LWY0YzItNDBkNi04YmM1LWI3MDIzNjZhZTVjMS53ZWJw","title":"Resident Evil: The Final Chapter","tomatometerScore":38,"tomatometerState":"rotten","top3Cast":["Milla Jovovich","Iain Glen","Ali Larter"],"type":"Movie","url":"\u002Fm\u002Fresident_evil_the_final_chapter","releaseYear":"2016","presentationDate":"(2016)"},{"audienceScore":{"score":"51","scoreSentiment":"NEGATIVE","certifiedFresh":"none","certified":false,"scorePercent":"51%"},"directors":["Paul W.S. Anderson"],"emsId":"2c9fca7e-0465-3743-928f-bd96d72e9dc6","exeProducers":["Martin Moszkowicz"],"imageUrl":"https:\u002F\u002Fresizing.flixster.com\u002FOvPhJP4YVh0AV5iUBwh8elvd_I4=\u002F206x305\u002Fv2\u002Fhttps:\u002F\u002Fresizing.flixster.com\u002F-XZAfHZM39UwaGJIFWKAE8fS0ak=\u002Fv3\u002Ft\u002Fassets\u002Fp9128231_p_v8_ah.jpg","title":"Resident Evil: Retribution","tomatometerScore":28,"tomatometerState":"rotten","top3Cast":["Milla Jovovich","Michelle Rodriguez","Kevin Durand"],"type":"Movie","url":"\u002Fm\u002Fresident_evil_retribution","releaseYear":"2012","presentationDate":"(2012)"},{"audienceScore":{"score":"48","scoreSentiment":"NEGATIVE","certifiedFresh":"none","certified":false,"scorePercent":"48%"},"directors":["Paul W.S. Anderson"],"emsId":"b101e348-d244-3450-aacc-9ae79e0a8f0d","exeProducers":["Martin Moszkowicz","Victor Hadida"],"imageUrl":"https:\u002F\u002Fresizing.flixster.com\u002Fj_c0rzrVTK1Y_iuHCd9IMuFynnI=\u002F206x305\u002Fv2\u002Fhttps:\u002F\u002Fresizing.flixster.com\u002F-XZAfHZM39UwaGJIFWKAE8fS0ak=\u002Fv3\u002Ft\u002Fassets\u002Fp8078013_p_v10_ac.jpg","title":"Resident Evil: Afterlife","tomatometerScore":21,"tomatometerState":"rotten","top3Cast":["Milla Jovovich","Ali Larter","Kim Coates"],"type":"Movie","url":"\u002Fm\u002Fresident_evil_afterlife","releaseYear":"2010","presentationDate":"(2010)"},{"audienceScore":{"score":"58","scoreSentiment":"NEGATIVE","certifiedFresh":"none","certified":false,"scorePercent":"58%"},"directors":["Russell Mulcahy"],"emsId":"1d549a9d-5315-33d5-aee4-57f79b16c295","exeProducers":["Martin Moszkowicz","Kelly Van Horn","Victor Hadida"],"imageUrl":"https:\u002F\u002Fresizing.flixster.com\u002Ft4yf9XFkWuZ8x2XWn-vM_gY8y5A=\u002F206x305\u002Fv2\u002Fhttps:\u002F\u002Fresizing.flixster.com\u002F-XZAfHZM39UwaGJIFWKAE8fS0ak=\u002Fv3\u002Ft\u002Fassets\u002Fp168193_p_v10_ac.jpg","title":"Resident Evil: Extinction","tomatometerScore":24,"tomatometerState":"rotten","top3Cast":["Milla Jovovich","Oded Fehr","Ali Larter"],"type":"Movie","url":"\u002Fm\u002Fresident_evil_extinction","releaseYear":"2007","presentationDate":"(2007)"},{"audienceScore":{"score":"60","scoreSentiment":"POSITIVE","certifiedFresh":"none","certified":false,"scorePercent":"60%"},"directors":["Alexander Witt"],"emsId":"a0906bb3-f9a7-3ec2-b467-36ac11842ea7","exeProducers":["Bernd Eichinger","Samuel Hadida"],"imageUrl":"https:\u002F\u002Fresizing.flixster.com\u002FRFl0IhGb2n2ApkbzezK8MpytcDw=\u002F206x305\u002Fv2\u002Fhttps:\u002F\u002Fresizing.flixster.com\u002F-XZAfHZM39UwaGJIFWKAE8fS0ak=\u002Fv3\u002Ft\u002Fassets\u002Fp34790_p_v10_al.jpg","title":"Resident Evil: Apocalypse","tomatometerScore":19,"tomatometerState":"rotten","top3Cast":["Milla Jovovich","Sienna Guillory","Oded Fehr"],"type":"Movie","url":"\u002Fm\u002Fresident_evil_apocalypse","releaseYear":"2004","presentationDate":"(2004)"},{"audienceScore":{"score":"67","scoreSentiment":"POSITIVE","certifiedFresh":"none","certified":false,"scorePercent":"67%"},"directors":["Paul W.S. Anderson"],"emsId":"54d4302b-da3b-3a78-9e80-c067270f2bee","exeProducers":["Robert Kulzer","Victor Hadida","Daniel Kletzky","Yoshiki Okamoto"],"imageUrl":"https:\u002F\u002Fresizing.flixster.com\u002FkAx-sM0Jba51qGdshA3kPwxBQVg=\u002F206x305\u002Fv2\u002Fhttps:\u002F\u002Fresizing.flixster.com\u002F-XZAfHZM39UwaGJIFWKAE8fS0ak=\u002Fv3\u002Ft\u002Fassets\u002Fp29625_p_v8_ag.jpg","title":"Resident Evil","tomatometerScore":36,"tomatometerState":"rotten","top3Cast":["Milla Jovovich","Michelle Rodriguez","Eric Mabius"],"type":"Movie","url":"\u002Fm\u002Fresident_evil","releaseYear":"2002","presentationDate":"(2002)"}];
root.RottenTomatoes.context.videoClipsJson = {"count":1};
root.RottenTomatoes.context.resetCookies = ["AMCVS_8CF467C25245AE3F0A490D4C%40AdobeOrg","AMCV_8CF467C25245AE3F0A490D4C%40AdobeOrg","WRIgnore","WRUIDAWS","__CT_Data","__gads","_admrla","_awl","_cs_c","_cs_id","_cs_mk","_cs_s","_fbp","_ga","_gat_gtmTracker","_gid","aam_uuid","akamai_generated_location","auth_token","auth_user","auth_client","check","cognito","fblo_326803741017","fbm_326803741017","fbsr_326803741017","gpv_Page","id_token","is_auth","loginPlatform","mbox","notice_behavior","optimizelyBuckets","optimizelyEndUserId","optimizelyPendingLogEvents","optimizelySegments","s_cc","s_dayslastvisit","s_dayslastvisit_s","s_invisit","s_prevPage","s_sq","s_vnum","cognito","fbm_326803741017","fbsr_326803741017","id_token","JSESSIONID","QSI_HistorySession","QSI_SI_8up4dWDOtjAg0hn_intercept","_ALGOLIA","__Host-color-scheme","__Host-theme-options","__host_color_scheme","__host_theme_options","_cb","_cb_ls","_cb_svref","_chartbeat2","_chartbeat4","_chartbeat5","_sp_id.47f3","_sp_ses.47f3","_v__chartbeat3","adops_master_kvs","akacd_RTReplatform","algoliaUT","cognito","cl_duid","fbsr_326803741017","id_token","mps_uuid","session_id","_admrla","_awl","_ga","_gid","aam_uuid","cognito","fbm_326803741017","id_token","_cb","_cb_ls","_cb_svref","_chartbeat2","adops_master_kvs","cognito","id_token","krg_crb","krg_uid","mps_uuid"];
root.RottenTomatoes.criticPage = {"vanity":"dwight-brown","type":"movies","typeDisplayName":"Movie","totalReviews":"","criticID":"18916"};
root.RottenTomatoes.context.video = {"file":"https:\u002F\u002Flink.theplatform.com\u002Fs\u002FNGweTC\u002Fmedia\u002F6BYmlEK3IMjG?formats=MPEG-DASH+widevine,M3U+appleHlsEncryption,M3U+none,MPEG-DASH+none,MPEG4,MP3","type":"hls","description":"","image":"https:\u002F\u002Fstatcdn.fandango.com\u002FMPX\u002Fimage\u002FNBCU_Fandango\u002F655\u002F183\u002Fthumb_5E3FA0F6-C520-4F13-B45F-1FA19AC6EE6B.jpg","isRedBand":false,"mediaid":"2376876611739","mpxId":"2376876611739","publicId":"6BYmlEK3IMjG","title":"Woman of the Hour: Trailer 1","default":false,"label":"0","duration":"2:22","durationInSeconds":"142.976","emsMediaType":"Movie","emsId":"282b1920-17ea-4717-a657-621176c36d84","overviewPageUrl":"\u002Fm\u002Fwoman_of_the_hour","videoPageUrl":"\u002Fm\u002Fwoman_of_the_hour\u002Fvideos\u002F6BYmlEK3IMjG","videoType":"TRAILER","adobeDataLayer":{"content":{"id":"fandango_2376876611739","length":"142.976","type":"vod","player_name":"jw","sdk_version":"web: 6.51.0","channel":"movie","originator":"netflix","name":"woman of the hour: trailer 1","rating":"not adult","stream_type":"video"},"media_params":{"genre":"crime, drama, mystery & thriller","show_type":1}},"comscore":{"labelmapping":"c3=\"rottentomatoes.com\", ns_st_st=\"Rotten Tomatoes\", ns_st_pu=\"Netflix\", ns_st_pr=\"Woman of the Hour\", ns_st_sn=\"*null\", ns_st_en=\"*null\", ns_st_ge=\"Crime,Drama,Mystery & Thriller\", ns_st_ia=\"0\", ns_st_ce=\"0\", ns_st_ddt=\"2023\", ns_st_tdt=\"2023\""},"thumbnail":"https:\u002F\u002Fresizing.flixster.com\u002Fwnq-bAtYXxBZQLgqZB9rclZhPas=\u002F270x160\u002Fv2\u002Fhttps:\u002F\u002Fstatcdn.fandango.com\u002FMPX\u002Fimage\u002FNBCU_Fandango\u002F655\u002F183\u002Fthumb_5E3FA0F6-C520-4F13-B45F-1FA19AC6EE6B.jpg"};
root.RottenTomatoes.context.totalCount = 9;
root.RottenTomatoes.context.review = {"mediaType":"movie","title":"The Black Phone","emsId":"7633e33c-9008-3472-9a26-b2dc15dd9f07","type":"all","sort":undefined,"reviewsCount":0,"pageInfo":undefined,"reviewerDefaultImg":"https:\u002F\u002Fimages.fandango.com\u002Fcms\u002Fassets\u002F5b6ff500-1663-11ec-ae31-05a670d2d590--rtactordefault.png","reviewerDefaultImgWidth":"100"};
root.RottenTomatoes.context.useCursorPagination = true;
root.RottenTomatoes.context.verifiedTooltip = undefined;
root.RottenTomatoes.context.layout = {"header":{"movies":{"moviesAtHome":{"tarsSlug":"rt-nav-movies-at-home","linkList":[{"header":"Fandango at Home","slug":"fandango-at-home-link","url":"\u002Fbrowse\u002Fmovies_at_home\u002Faffiliates:fandango-at-home"},{"header":"Peacock","slug":"peacock-link","url":"\u002Fbrowse\u002Fmovies_at_home\u002Faffiliates:peacock"},{"header":"Paramount+","slug":"paramount-link","url":"\u002Fbrowse\u002Fmovies_at_home\u002Faffiliates:paramount-plus"},{"header":"Netflix","slug":"netflix-link","url":"\u002Fbrowse\u002Fmovies_at_home\u002Faffiliates:netflix"},{"header":"Apple TV+","slug":"apple-tv-link","url":"\u002Fbrowse\u002Fmovies_at_home\u002Faffiliates:apple-tv-plus"},{"header":"Prime Video","slug":"prime-video-link","url":"\u002Fbrowse\u002Fmovies_at_home\u002Faffiliates:prime-video"},{"header":"Most Popular Streaming Movies","slug":"most-popular-streaming-movies-link","url":"\u002Fbrowse\u002Fmovies_at_home\u002Fsort:popular"},{"header":"Certified Fresh Movies","slug":"certified-fresh-movies-link","url":"\u002Fbrowse\u002Fmovies_at_home\u002Fcritics:certified_fresh"},{"header":"Browse all","slug":"browse-all-link","url":"\u002Fbrowse\u002Fmovies_at_home"}]}},"editorial":{"guides":{"posts":[{"ID":255381,"author":{"ID":7,"username":"RT Staff","name":"RT Staff","first_name":"RT","last_name":"Staff","nickname":"RT Staff","slug":"rt-staff","URL":"http:\u002F\u002Fwww.rottentomatoes.com","avatar":"https:\u002F\u002Fsecure.gravatar.com\u002Favatar\u002F1da0327e91516c500afa31e67da2395a?s=96","description":"Rotten Tomatoes every day.","registered":"2015-05-01T22:36:17+00:00","meta":{"links":{"self":"https:\u002F\u002Feditorial.rottentomatoes.com\u002Fwp-json\u002Fusers\u002F7","archives":"https:\u002F\u002Feditorial.rottentomatoes.com\u002Fwp-json\u002Fusers\u002F7\u002Fposts"}}},"featured_image":{"source":"https:\u002F\u002Fprd-rteditorial.s3.us-west-2.amazonaws.com\u002Fwp-content\u002Fuploads\u002F2024\u002F07\u002F25125337\u002F600DeadpoolWolverine2.jpg"},"link":"https:\u002F\u002Feditorial.rottentomatoes.com\u002Fguide\u002Fnew-verified-hot-movies\u002F","status":"publish","title":"50 Newest Verified Hot Movies","type":"guide"},{"ID":256316,"author":{"ID":12,"username":"alex.vo","name":"Alex Vo","first_name":"Alex","last_name":"Vo","nickname":"alex.vo","slug":"alex-vo","URL":"","avatar":"https:\u002F\u002Fsecure.gravatar.com\u002Favatar\u002F818ade2039d2a711e0cd70ae46f14952?s=96","description":"","registered":"2015-05-12T20:00:23+00:00","meta":{"links":{"self":"https:\u002F\u002Feditorial.rottentomatoes.com\u002Fwp-json\u002Fusers\u002F12","archives":"https:\u002F\u002Feditorial.rottentomatoes.com\u002Fwp-json\u002Fusers\u002F12\u002Fposts"}}},"featured_image":{"source":"https:\u002F\u002Fprd-rteditorial.s3.us-west-2.amazonaws.com\u002Fwp-content\u002Fuploads\u002F2024\u002F10\u002F17174904\u002F600Smile2.jpg"},"link":"https:\u002F\u002Feditorial.rottentomatoes.com\u002Fguide\u002Fbest-horror-movie-sequels\u002F","status":"publish","title":"78 Best Horror Movie Sequels","type":"guide"}],"title":"Guides","url":"https:\u002F\u002Feditorial.rottentomatoes.com\u002Fcountdown\u002F"},"hubs":{"posts":[{"ID":237626,"author":{"ID":12,"username":"alex.vo","name":"Alex Vo","first_name":"Alex","last_name":"Vo","nickname":"alex.vo","slug":"alex-vo","URL":"","avatar":"https:\u002F\u002Fsecure.gravatar.com\u002Favatar\u002F818ade2039d2a711e0cd70ae46f14952?s=96","description":"","registered":"2015-05-12T20:00:23+00:00","meta":{"links":{"self":"https:\u002F\u002Feditorial.rottentomatoes.com\u002Fwp-json\u002Fusers\u002F12","archives":"https:\u002F\u002Feditorial.rottentomatoes.com\u002Fwp-json\u002Fusers\u002F12\u002Fposts"}}},"featured_image":{"source":"https:\u002F\u002Fprd-rteditorial.s3.us-west-2.amazonaws.com\u002Fwp-content\u002Fuploads\u002F2024\u002F07\u002F15120909\u002FRT_WTW_Hub_Halloween_600x314_v2-1.png"},"link":"https:\u002F\u002Feditorial.rottentomatoes.com\u002Frt-hub\u002Fwhat-to-watch\u002F","status":"publish","title":"What to Watch: In Theaters and On Streaming","type":"rt-hub"},{"ID":140214,"author":{"ID":12,"username":"alex.vo","name":"Alex Vo","first_name":"Alex","last_name":"Vo","nickname":"alex.vo","slug":"alex-vo","URL":"","avatar":"https:\u002F\u002Fsecure.gravatar.com\u002Favatar\u002F818ade2039d2a711e0cd70ae46f14952?s=96","description":"","registered":"2015-05-12T20:00:23+00:00","meta":{"links":{"self":"https:\u002F\u002Feditorial.rottentomatoes.com\u002Fwp-json\u002Fusers\u002F12","archives":"https:\u002F\u002Feditorial.rottentomatoes.com\u002Fwp-json\u002Fusers\u002F12\u002Fposts"}}},"featured_image":{"source":"https:\u002F\u002Fprd-rteditorial.s3.us-west-2.amazonaws.com\u002Fwp-content\u002Fuploads\u002F2023\u002F02\u002F30160328\u002FRT_AwardsTour_Thumbnail_600x314.jpg"},"link":"https:\u002F\u002Feditorial.rottentomatoes.com\u002Frt-hub\u002Fawards-tour\u002F","status":"publish","title":"Awards Tour","type":"rt-hub"}],"title":"Hubs","url":"https:\u002F\u002Feditorial.rottentomatoes.com\u002Frt-hubs\u002F"},"news":{"posts":[{"ID":256274,"author":7,"featured_image":{"source":"https:\u002F\u002Fprd-rteditorial.s3.us-west-2.amazonaws.com\u002Fwp-content\u002Fuploads\u002F2024\u002F10\u002F20100550\u002FNYCC_Creature_Commandos-Rep.jpg"},"link":"https:\u002F\u002Feditorial.rottentomatoes.com\u002Farticle\u002Fall-the-trailers-from-new-york-comic-con-2024\u002F","promo_order":"","status":"publish","title":"All the Trailers from New York Comic Con","type":"article"},{"ID":256289,"author":7,"featured_image":{"source":"https:\u002F\u002Fprd-rteditorial.s3.us-west-2.amazonaws.com\u002Fwp-content\u002Fuploads\u002F2024\u002F10\u002F17163305\u002FHeretic_Scene_Breakdown-Rep.jpg"},"link":"https:\u002F\u002Feditorial.rottentomatoes.com\u002Farticle\u002Fhugh-grant-breaks-down-a-scene-from-heretic\u002F","promo_order":"","status":"publish","title":"Hugh Grant Breaks Down a Scene from \u003Cem\u003EHeretic\u003C\u002Fem\u003E","type":"article"}],"title":"RT News","url":"https:\u002F\u002Feditorial.rottentomatoes.com\u002Fnews\u002F"}},"trendingTarsSlug":"rt-nav-trending","trending":[{"header":"Pulp Fiction vs. Shawshank","url":"https:\u002F\u002Feditorial.rottentomatoes.com\u002Farticle\u002Fbest-1994-movies-showdown\u002F"},{"header":"Smile 2 Reviews","url":"https:\u002F\u002Feditorial.rottentomatoes.com\u002Farticle\u002Fsmile-2-first-reviews-one-of-the-best-horror-films-of-the-year\u002F"},{"header":"Comic Con","url":"https:\u002F\u002Feditorial.rottentomatoes.com\u002Farticle\u002Fall-the-trailers-from-new-york-comic-con-2024\u002F"},{"header":"Spooky Season ","url":"https:\u002F\u002Feditorial.rottentomatoes.com\u002Fhub-subpage\u002Fhorror-season\u002F"}],"certifiedMedia":{"certifiedFreshTvSeason":{"header":null,"media":{"url":"\u002Ftv\u002Fshrinking\u002Fs02","name":"Shrinking: Season 2","score":96,"posterImg":"https:\u002F\u002Fresizing.flixster.com\u002FubdSZnNdzEJSigrp8cYY_8f_u5E=\u002F206x305\u002Fv2\u002Fhttps:\u002F\u002Fresizing.flixster.com\u002FFc4pqfBt0kBT1o96QiTRtWQf-nk=\u002Ffit-in\u002F180x240\u002Fv2\u002Fhttps:\u002F\u002Fresizing.flixster.com\u002FhtIecVmHlycGI6e1xjkhHaZMp34=\u002Fems.cHJkLWVtcy1hc3NldHMvdHZzZWFzb24vMDNmYzc0YzItNjcxMS00ZGQ5LTkyMDYtMDg4ODZmNDBmZGZhLnBuZw=="},"tarsSlug":"rt-nav-list-cf-picks"},"certifiedFreshMovieInTheater":{"header":null,"media":{"url":"\u002Fm\u002Fsmile_2","name":"Smile 2","score":83,"posterImg":"https:\u002F\u002Fresizing.flixster.com\u002FIwPzlm_hfJc8xCWPWZjIQAANSRY=\u002F206x305\u002Fv2\u002Fhttps:\u002F\u002Fresizing.flixster.com\u002Fqsagj7PZiJ_iQoyFd5dWDuIBWDk=\u002Ffit-in\u002F180x240\u002Fv2\u002Fhttps:\u002F\u002Fresizing.flixster.com\u002FgZtomMQp1wjKcCrcWSIBhY8EPBo=\u002Fems.cHJkLWVtcy1hc3NldHMvbW92aWVzLzZlM2VjZGZjLWI3ZDEtNGFjYS05ODFjLTQwZGUyYmMwODcwYy5qcGc="}},"certifiedFreshMovieInTheater4":{"header":null,"media":{"url":"\u002Fm\u002Fanora","name":"Anora","score":98,"posterImg":"https:\u002F\u002Fresizing.flixster.com\u002F7kqTgMLLkeV4IwB2saP3Oiz1huw=\u002F206x305\u002Fv2\u002Fhttps:\u002F\u002Fresizing.flixster.com\u002Fp9g96mU1onerJ4YgCSqJHrNnY8M=\u002Ffit-in\u002F180x240\u002Fv2\u002Fhttps:\u002F\u002Fresizing.flixster.com\u002FFTHBGq9jCInQsKBj9dhfLIVIxrM=\u002Fems.cHJkLWVtcy1hc3NldHMvbW92aWVzLzg2NWVmODUwLWIzMDAtNGVkMC1iODgwLWZmZDAyOTVkODkwYS5qcGc="}},"certifiedFreshMovieAtHome":{"header":null,"media":{"url":"\u002Fm\u002Fwe_live_in_time","name":"We Live in Time","score":80,"posterImg":"https:\u002F\u002Fresizing.flixster.com\u002FO4l_p-Y_hsyYqz7wyvlFb4kD-Kg=\u002F206x305\u002Fv2\u002Fhttps:\u002F\u002Fresizing.flixster.com\u002FDorugeIStda5kosjv3v54eQg-DU=\u002Ffit-in\u002F180x240\u002Fv2\u002Fhttps:\u002F\u002Fresizing.flixster.com\u002FqRBAJoNjbiG99gJfB8bsWY4y8vg=\u002Fems.cHJkLWVtcy1hc3NldHMvbW92aWVzLzYzM2M2NmJkLWQ3ODEtNDI3NS04NjdhLTMzYzYxNTQ4YzlmZS5qcGc="}},"tarsSlug":"rt-nav-list-cf-picks"},"tvLists":{"newTvTonight":{"tarsSlug":"rt-hp-text-list-3","title":"New TV Tonight","shows":[{"title":"What We Do in the Shadows: Season 6","tomatometer":{"tomatometer":86,"sentiment":"positive","certified":false},"tvPageUrl":"\u002Ftv\u002Fwhat_we_do_in_the_shadows\u002Fs06"},{"title":"Poppa's House: Season 1","tomatometer":{"tomatometer":null,"sentiment":"empty","certified":false},"tvPageUrl":"\u002Ftv\u002Fpoppas_house\u002Fs01"},{"title":"Territory: Season 1","tomatometer":{"tomatometer":null,"sentiment":"empty","certified":false},"tvPageUrl":"\u002Ftv\u002Fterritory\u002Fs01"},{"title":"Before: Season 1","tomatometer":{"tomatometer":null,"sentiment":"empty","certified":false},"tvPageUrl":"\u002Ftv\u002Fbefore\u002Fs01"},{"title":"Hellbound: Season 2","tomatometer":{"tomatometer":null,"sentiment":"empty","certified":false},"tvPageUrl":"\u002Ftv\u002Fhellbound\u002Fs02"},{"title":"The Equalizer: Season 5","tomatometer":{"tomatometer":null,"sentiment":"empty","certified":false},"tvPageUrl":"\u002Ftv\u002Fthe_equalizer_2020\u002Fs05"},{"title":"Breath of Fire: Season 1","tomatometer":{"tomatometer":null,"sentiment":"empty","certified":false},"tvPageUrl":"\u002Ftv\u002Fbreath_of_fire\u002Fs01"},{"title":"Beauty in Black: Season 1","tomatometer":{"tomatometer":null,"sentiment":"empty","certified":false},"tvPageUrl":"\u002Ftv\u002Fbeauty_in_black\u002Fs01"},{"title":"Like a Dragon: Yakuza: Season 1","tomatometer":{"tomatometer":null,"sentiment":"empty","certified":false},"tvPageUrl":"\u002Ftv\u002Flike_a_dragon_yakuza\u002Fs01"}]},"mostPopularTvOnRt":{"tarsSlug":"rt-hp-text-list-2","title":"Most Popular TV on RT","shows":[{"title":"Agatha All Along: Season 1","tomatometer":{"tomatometer":82,"sentiment":"positive","certified":true},"tvPageUrl":"\u002Ftv\u002Fagatha_all_along\u002Fs01"},{"title":"The Penguin: Season 1","tomatometer":{"tomatometer":94,"sentiment":"positive","certified":true},"tvPageUrl":"\u002Ftv\u002Fthe_penguin\u002Fs01"},{"title":"Rivals: Season 1","tomatometer":{"tomatometer":94,"sentiment":"positive","certified":false},"tvPageUrl":"\u002Ftv\u002Frivals_2024\u002Fs01"},{"title":"Disclaimer: Season 1","tomatometer":{"tomatometer":79,"sentiment":"positive","certified":true},"tvPageUrl":"\u002Ftv\u002Fdisclaimer\u002Fs01"},{"title":"Hysteria!: Season 1","tomatometer":{"tomatometer":67,"sentiment":"positive","certified":false},"tvPageUrl":"\u002Ftv\u002Fhysteria_2024\u002Fs01"},{"title":"Teacup: Season 1","tomatometer":{"tomatometer":79,"sentiment":"positive","certified":true},"tvPageUrl":"\u002Ftv\u002Fteacup\u002Fs01"},{"title":"Nobody Wants This: Season 1","tomatometer":{"tomatometer":94,"sentiment":"positive","certified":true},"tvPageUrl":"\u002Ftv\u002Fnobody_wants_this\u002Fs01"},{"title":"The Office: Season 1","tomatometer":{"tomatometer":80,"sentiment":"positive","certified":false},"tvPageUrl":"\u002Ftv\u002Fthe_office_2024\u002Fs01"},{"title":"Sweetpea: Season 1","tomatometer":{"tomatometer":84,"sentiment":"positive","certified":false},"tvPageUrl":"\u002Ftv\u002Fsweetpea\u002Fs01"},{"title":"The Lincoln Lawyer: Season 3","tomatometer":{"tomatometer":100,"sentiment":"positive","certified":false},"tvPageUrl":"\u002Ftv\u002Fthe_lincoln_lawyer\u002Fs03"}]}},"legacyItems":{"tarsSlug":"rt-nav-list-tv-episodic-reviews","tv":{"mediaLists":[{},{},{},{"title":"Episodic Reviews","shows":[{"link":"\u002Ftv\u002Fbodies_2023\u002Fs01","showTitle":"Bodies: Season 1"},{"link":"\u002Ftv\u002Finvincible\u002Fs02","showTitle":"Invincible: Season 2"},{"link":"\u002Ftv\u002Fthe_bear\u002Fs02","showTitle":"The Bear: Season 2"},{"link":"\u002Ftv\u002Floki\u002Fs02","showTitle":"Loki: Season 2"},{"link":"\u002Ftv\u002Fthe_curse_2023\u002Fs01","showTitle":"The Curse: Season 1"}]}]}}},"links":{"moviesInTheaters":{"certifiedFresh":"\u002Fbrowse\u002Fmovies_in_theaters\u002Fcritics:certified_fresh~sort:popular","comingSoon":"\u002Fbrowse\u002Fmovies_coming_soon\u002F","openingThisWeek":"\u002Fbrowse\u002Fmovies_in_theaters\u002Fsort:newest","title":"\u002Fbrowse\u002Fmovies_in_theaters","topBoxOffice":"\u002Fbrowse\u002Fmovies_in_theaters"},"onDvdAndStreaming":{"all":"\u002Fbrowse\u002Fmovies_at_home\u002F","certifiedFresh":"\u002Fbrowse\u002Fmovies_at_home\u002Fcritics:certified_fresh","title":"\u002Fbrowse\u002Fmovies_at_home\u002F","top":"\u002Fbrowse\u002Fmovies_at_home\u002Fsort:popular"},"moreMovies":{"topMovies":"\u002Fbrowse\u002Fmovies_at_home\u002Fsort:popular","trailers":"\u002Ftrailers"},"tvTonight":"\u002Fbrowse\u002Ftv_series_browse\u002Fsort:newest","tvPopular":"\u002Fbrowse\u002Ftv_series_browse\u002Fsort:popular","moreTv":{"topTv":"\u002Fbrowse\u002Ftv_series_browse\u002Fsort:popular","certifiedFresh":"\u002Fbrowse\u002Ftv_series_browse\u002Fcritics:fresh"},"editorial":{"allTimeLists":"https:\u002F\u002Feditorial.rottentomatoes.com\u002Fall-time-lists\u002F","bingeGuide":"https:\u002F\u002Feditorial.rottentomatoes.com\u002Fbinge-guide\u002F","comicsOnTv":"https:\u002F\u002Feditorial.rottentomatoes.com\u002Fcomics-on-tv\u002F","countdown":"https:\u002F\u002Feditorial.rottentomatoes.com\u002Fcountdown\u002F","fiveFavoriteFilms":"https:\u002F\u002Feditorial.rottentomatoes.com\u002Ffive-favorite-films\u002F","videoInterviews":"https:\u002F\u002Feditorial.rottentomatoes.com\u002Fvideo-interviews\u002F","weekendBoxOffice":"https:\u002F\u002Feditorial.rottentomatoes.com\u002Fweekend-box-office\u002F","weeklyKetchup":"https:\u002F\u002Feditorial.rottentomatoes.com\u002Fweekly-ketchup\u002F","whatToWatch":"https:\u002F\u002Feditorial.rottentomatoes.com\u002Fwhat-to-watch\u002F"},"advertisingFooter":"https:\u002F\u002Ftogether.nbcuni.com\u002Fadvertise\u002F?utm_source=rotten_tomatoes&utm_medium=referral&utm_campaign=property_ad_pages&utm_content=footer","californiaNotice":"https:\u002F\u002Fwww.nbcuniversal.com\u002Fprivacy\u002Fcalifornia-consumer-privacy-act","careers":"\u002F\u002Fwww.fandango.com\u002Fcareers","cookieManagement":"https:\u002F\u002Fwww.nbcuniversal.com\u002Fprivacy\u002Fcookies#accordionheader2","fandangoAbout":"https:\u002F\u002Fwww.fandango.com\u002Fabout-us","privacyPolicy":"https:\u002F\u002Fwww.nbcuniversal.com\u002Ffandango-privacy-policy","termsPolicies":"\u002Fpolicies\u002Fterms-and-policies"}};
root.RottenTomatoes.thirdParty = {"chartBeat":{"auth":"64558","domain":"rottentomatoes.com"},"mpx":{"accountPid":"NGweTC","playerPid":"y__7B0iQTi4P","playerPidPDK6":"pdk6_y__7B0iQTi4P","accountId":"2474312077"},"algoliaSearch":{"aId":"79FRDP12PN","sId":"175588f6e5f8319b27702e4cc4013561"},"cognito":{"upId":"us-west-2_4L0ZX4b1U","clientId":"7pu48v8i2n25t4vhes0edck31c"}};
root.RottenTomatoes.serviceWorker = {"isServiceWokerOn":true};
root.__RT__ || (root.__RT__ = {});
root.__RT__.featureFlags = {"adsCarouselHP":true,"adsCarouselHPSlug":"rt-sponsored-carousel-list-disney-plus","adsCarouselOP":true,"adsCarouselOPSlug":"rt-sponsored-carousel-list-disney-plus","adsHub":false,"adsMockDLP":false,"adsPages":"huluOmitb","adsVideoSpotlightHP":false,"authVerboseLogs":false,"certifiedFreshAudienceScore":true,"editorialApiDisabled":false,"heroColorsEnabled":true,"justWatchIframeEnabled":true,"legacyBridge":true,"pageJsonEnabled":false,"privateWatchlistEnabled":true,"redesignGlobalStyles":false,"redesignMediaHeroEnabled":false,"redesignMoreLikeThis":true,"redesignRateAndReview":true,"redesignSortTable":false,"searchVideo":true};
root.RottenTomatoes.context.adsMockDLP = false;
root.RottenTomatoes.context.req = {"params":{"vanity":"the_wild_robot"},"queries":{},"route":{},"url":"\u002Fm\u002Fthe_wild_robot","secure":false,"buildVersion":undefined};
root.RottenTomatoes.context.config = {};
root.BK = {"PageName":"http:\u002F\u002Fwww.rottentomatoes.com\u002Fm\u002Fthe_wild_robot","SiteID":37528,"SiteSection":"movie","MovieId":"dd36be73-6c5e-3b4b-94e2-4b62260e2808","MovieTitle":"The Wild Robot"};
root.RottenTomatoes.dtmData = {"customerId":"","loggedInStatus":"","rtVersion":3.1,"webVersion":"node","emsID":"dd36be73-6c5e-3b4b-94e2-4b62260e2808","lifeCycleWindow":"OUT_OF_THEATERS","pageName":"rt | movies | overview | The Wild Robot","titleGenre":"Kids family","titleId":"dd36be73-6c5e-3b4b-94e2-4b62260e2808","titleName":"The Wild Robot","titleType":"Movie"};
root.RottenTomatoes.context.gptSite = "movie";

      }(this));
    </script>

        <script fetchpriority="high" src="/assets/pizza-pie/javascripts/bundles/roma/preload.56ce8078007.js"></script>

        <script  src="/assets/pizza-pie/javascripts/bundles/roma/vendors.2518a66d54b.js"></script>

        <script  src="/assets/pizza-pie/javascripts/bundles/roma/default.25cddfe767a.js"></script>

        
            <script src="https://cdn.jsdelivr.net/npm/algoliasearch@4/dist/algoliasearch-lite.umd.js"></script>
            <script  src="/assets/pizza-pie/javascripts/templates/roma/searchNav.3722f86e465.js"></script>
            <script  src="/assets/pizza-pie/javascripts/bundles/roma/searchNav.51a48964640.js"></script>
        
        

    <script  src="/assets/pizza-pie/javascripts/templates/pages/movie/index.b46305a4a95.js"></script>

    <script  src="/assets/pizza-pie/javascripts/bundles/pages/movie/index.e17801cde15.js"></script>


        
            
            <script>
                if (window.mps && typeof window.mps.writeFooter === 'function') {
                    window.mps.writeFooter();
                }
            </script>
            
        

        
            
            <script>
                window._satellite && _satellite.pageBottom();
            </script>
            
        
    </body>
</html>

  recorded_at: Sun, 20 Oct 2024 19:51:34 GMT
recorded_with: VCR 6.3.1
